2	60	81	Fast Object Detection
7	6	46	complementary scale - specific detectors
7	51	70	combined to produce
7	73	107	strong multi-scale object detector
16	4	11	R - CNN
16	12	19	samples
16	20	36	object proposals
16	37	39	at
16	40	55	multiple scales
16	58	63	using
16	66	93	preliminary attention stage
16	105	110	warps
16	117	126	proposals
16	127	129	to
16	134	154	size ( e.g. 224224 )
16	155	167	supported by
16	172	175	CNN
29	10	18	proposes
29	21	49	unified multi-scale deep CNN
29	52	59	denoted
29	64	93	multi -scale CNN ( MS - CNN )
29	96	99	for
29	100	121	fast object detection
31	17	24	learned
31	25	39	end - to - end
31	44	62	share computations
35	4	27	complimentary detectors
35	28	30	at
35	31	54	different output layers
35	59	75	combined to form
35	78	105	strong multi-scale detector
36	8	13	shown
36	17	24	produce
36	25	33	accurate
36	34	50	object proposals
36	51	53	on
36	54	74	detection benchmarks
36	75	79	with
36	80	104	large variation of scale
36	107	114	such as
36	115	120	KITTI
36	123	132	achieving
36	135	141	recall
36	142	144	of
36	145	154	over 95 %
36	155	158	for
36	159	177	only 100 proposals
37	42	48	use of
37	49	67	feature upsampling
37	68	70	as
37	89	105	input upsampling
142	0	8	Learning
142	12	28	initialized with
142	33	38	model
142	39	51	generated by
142	56	76	first learning stage
142	77	79	of
142	84	100	proposal network
143	4	17	learning rate
143	21	27	set to
143	28	34	0.0005
143	41	51	reduced by
143	54	72	factor of 10 times
143	73	78	after
143	79	102	every 10,000 iterations
144	0	8	Learning
144	9	14	stops
144	15	20	after
144	21	38	25,000 iterations
145	4	22	joint optimization
145	35	44	solved by
145	45	63	back - propagation
145	64	74	throughout
145	79	94	unified network
147	20	30	parameters
147	31	33	of
147	34	55	layers " conv 1 - 1 "
147	56	58	to
147	77	89	fixed during
147	90	98	learning
147	101	104	for
147	105	120	faster training
165	0	17	Simply forwarding
165	18	32	object patches
165	35	37	at
165	42	56	original scale
165	59	66	through
165	71	94	CNN impairs performance
182	0	17	Context Embedding
199	24	35	trained for
199	36	49	car detection
199	54	65	another for
199	66	96	pedestrian / cyclist detection
202	17	31	implemented in
202	32	36	C ++
202	37	43	within
202	48	61	Caffe toolbox
202	96	132	https://github.com/zhaoweicai/mscnn.
204	3	19	NVIDIA Titan GPU
204	24	32	used for
204	33	49	CNN computations
210	14	24	each layer
210	29	45	highest accuracy
210	46	49	for
210	54	61	objects
210	62	72	that match
210	73	82	its scale
211	10	27	individual recall
211	28	34	across
211	35	41	scales
211	42	44	is
211	45	48	low
211	55	66	combination
211	70	83	all detectors
211	84	92	achieves
211	93	104	high recall
211	105	108	for
211	109	126	all object scales
212	4	24	effect of input size
212	25	30	shows
212	40	56	proposal network
212	57	59	is
212	60	73	fairly robust
212	74	76	to
212	81	101	size of input images
212	102	105	for
212	106	126	cars and pedestrians
217	13	16	for
217	21	29	MS - CNN
217	32	41	detection
217	46	67	substantially benefit
217	68	87	proposal generation
217	90	104	especially for
217	105	116	pedestrians
218	0	10	Comparison
218	20	42	state - of - the - art
218	43	51	compares
218	56	83	proposal generation network
218	84	86	to
218	87	91	BING
218	94	110	Selective Search
218	113	122	EdgeBoxes
218	125	128	MCG
218	131	136	3 DOP
218	141	144	RPN
219	26	31	shows
219	41	49	MS - CNN
219	50	58	achieves
219	61	67	recall
219	68	78	about 98 %
219	79	83	with
219	84	102	only 100 proposals
241	0	3	For
241	4	14	pedestrian
241	17	34	bootstrapping and
241	35	42	mixture
241	43	46	are
241	47	52	close
241	59	65	random
241	66	68	is
241	69	79	much worse
248	18	36	deconvoltion layer
248	37	42	helps
248	43	55	inmost cases
