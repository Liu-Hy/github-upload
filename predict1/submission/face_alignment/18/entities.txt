2	0	22	Deep Alignment Network
2	27	55	convolutional neural network
2	56	59	for
2	60	81	robust face alignment
13	0	14	Face alignment
16	4	12	features
16	22	29	used to
16	30	48	iteratively refine
16	53	62	estimates
16	63	65	of
16	66	84	landmark locations
19	51	60	proposing
19	63	90	novel face alignment method
19	100	103	dub
19	104	134	Deep Alignment Network ( DAN )
20	6	14	based on
20	17	42	multistage neural network
20	43	48	where
20	49	59	each stage
20	60	67	refines
20	72	90	landmark positions
20	91	103	estimated at
20	108	122	previous stage
20	125	146	iteratively improving
20	151	169	landmark locations
22	0	14	To make use of
22	19	36	entire face image
22	37	43	during
22	48	55	process
22	56	58	of
22	59	73	face alignment
22	92	100	input at
22	101	111	each stage
22	114	130	landmark heatmap
22	144	155	key element
22	156	158	of
24	4	32	convolutional neural network
24	37	40	use
24	45	53	heatmaps
24	54	62	to infer
24	67	84	current estimates
24	85	87	of
24	88	106	landmark locations
24	107	109	in
24	114	119	image
29	3	12	introduce
29	13	30	landmark heatmaps
29	37	45	transfer
29	50	61	information
29	62	67	about
29	68	103	current landmark location estimates
29	104	111	between
29	116	136	stages of our method
30	17	23	allows
30	24	34	our method
30	35	49	to make use of
30	54	66	entire image
30	67	69	of
30	72	76	face
30	79	89	instead of
30	90	103	local patches
30	110	128	avoid falling into
30	129	141	local minima
191	3	8	train
191	9	19	two models
191	22	25	DAN
191	35	45	trained on
191	50	65	training subset
191	66	68	of
191	73	94	300W competition data
191	99	110	DAN - Menpo
191	120	130	trained on
191	172	200	Menpo challenge training set
192	0	17	Data augmentation
192	21	33	performed by
192	34	43	mirroring
192	44	50	around
192	55	61	Y axis
192	62	72	as well as
192	73	91	random translation
192	94	106	rotation and
192	107	114	scaling
192	121	133	sampled from
192	134	154	normal distributions
194	36	46	consist of
194	47	57	two stages
195	0	8	Training
195	12	27	performed using
195	28	40	Theano 0.9.0
195	45	56	Lasagne 0.2
196	0	3	For
196	4	16	optimization
196	20	23	use
196	24	52	Adam stochastic optimization
196	53	57	with
196	61	78	initial step size
196	82	87	0.001
196	92	107	mini batch size
196	111	113	64
198	4	25	Python implementation
198	26	33	runs at
198	34	40	73 fps
198	41	44	for
198	45	51	images
198	52	64	processed in
198	81	87	45 fps
198	88	91	for
198	92	98	images
198	99	108	processed
198	109	121	sequentially
198	122	124	on
198	127	147	GeForce GTX 1070 GPU
206	0	3	For
206	4	17	each test set
206	21	31	initialize
206	32	42	our method
206	43	48	using
206	53	81	face detector bounding boxes
206	82	95	provided with
206	100	108	datasets
214	8	10	on
214	15	39	Menpo challenge test set
218	4	9	first
218	15	23	performs
218	24	38	face alignment
218	39	44	using
218	47	81	square initialization bounding box
218	82	95	placed in the
218	96	102	middle
218	110	115	image
218	116	120	with
218	123	127	size
218	128	134	set to
218	137	163	percentage of image height
224	4	10	chosen
224	11	28	bounding box size
224	29	32	was
224	33	37	46 %
224	38	40	of
224	45	57	image height
227	0	3	For
227	8	32	AUC and the failure rate
227	41	47	chosen
227	50	59	threshold
227	60	62	of
227	63	67	0.03
227	68	70	of
227	75	96	bounding box diagonal
234	4	15	addition of
234	20	32	second stage
234	33	42	increases
234	47	50	AUC
234	51	55	0.08
234	56	58	by
234	59	63	20 %
234	74	101	mean error and failure rate
234	106	116	reduced by
234	117	130	14 % and 56 %
235	4	15	addition of
235	18	29	third stage
235	30	44	does not bring
235	45	64	significant benefit
235	65	67	in
235	68	74	any of
