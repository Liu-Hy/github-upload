labels,text,predicates,subj/obj,triple_A,triple_B,triple_C,triple_D
research-problem,Recurrent Neural Network Grammars,[],"[('Recurrent Neural Network Grammars', (0, 4))]",[],[],[],[]
model,"In this paper , we introduce recurrent neural network grammars ( RNNGs ; 2 ) , a new generative probabilistic model of sentences that explicitly models nested , hierarchical relationships among words and phrases .","[('introduce', (5, 6)), ('of', (21, 22))]","[('recurrent neural network grammars ( RNNGs', (6, 12)), ('sentences', (22, 23)), ('nested , hierarchical relationships', (26, 30))]",[],[],[],[]
model,"RNNGs operate via a recursive syntactic process reminiscent of probabilistic context - free grammar generation , but decisions are parameterized using RNNs that condition on the entire syntactic derivation history , greatly relaxing context - free independence assumptions .","[('operate via', (1, 3)), ('parameterized using', (19, 21)), ('condition on', (23, 25))]","[('RNNGs', (0, 1)), ('recursive syntactic process', (4, 7)), ('probabilistic context - free grammar generation', (9, 15)), ('decisions', (17, 18)), ('RNNs', (21, 22)), ('entire syntactic derivation history', (26, 30))]",[],[],[],[]
model,"We give two variants of the algorithm , one for parsing ( given an observed sentence , transform it into a tree ) , and one for generation .","[('give', (1, 2)), ('of', (4, 5)), ('for', (9, 10))]","[('two variants', (2, 4)), ('algorithm', (6, 7)), ('parsing', (10, 11)), ('generation', (27, 28))]",[],[],[],[]
model,"The discriminative model also lets us use ancestor sampling to obtain samples of parse trees for sentences , and this is used to solve a second practical challenge with RNNGs : approximating the marginal likelihood and MAP tree of a sentence under the generative model .","[('to obtain', (9, 11)), ('of', (12, 13)), ('for', (15, 16)), ('approximating', (31, 32)), ('under', (41, 42))]","[('discriminative model', (1, 3)), ('ancestor sampling', (7, 9)), ('samples', (11, 12)), ('parse trees', (13, 15)), ('sentences', (16, 17)), ('RNNGs', (29, 30)), ('marginal likelihood and MAP tree', (33, 38)), ('generative model', (43, 45))]",[],[],[],[]
model,We present a simple importance sampling algorithm which uses samples from the discriminative parser to solve inference problems in the generative model ( 5 ) .,"[('present', (1, 2)), ('uses', (8, 9)), ('from', (10, 11)), ('to solve', (14, 16)), ('in', (18, 19))]","[('simple importance sampling algorithm', (3, 7)), ('samples', (9, 10)), ('discriminative parser', (12, 14)), ('inference problems', (16, 18)), ('generative model', (20, 22))]",[],[],[],[]
hyperparameters,"For the discriminative model , we used hidden dimensions of 128 and 2 - layer LSTMs ( larger numbers of dimensions reduced validation set performance ) .","[('For', (0, 1)), ('used', (6, 7)), ('of', (9, 10))]","[('discriminative model', (2, 4)), ('hidden dimensions', (7, 9)), ('128 and 2 - layer LSTMs', (10, 16))]",[],[],[],[]
hyperparameters,"For the generative model , we used 256 dimensions and 2 layer LSTMs .","[('For', (0, 1)), ('used', (6, 7))]","[('generative model', (2, 4)), ('256 dimensions', (7, 9)), ('2 layer LSTMs', (10, 13))]",[],[],[],[]
hyperparameters,"For both models , we tuned the dropout rate to maximize validation set likelihood , obtaining optimal rates of 0.2 ( discriminative ) and 0.3 ( generative ) .","[('tuned', (5, 6)), ('to maximize', (9, 11)), ('obtaining', (15, 16)), ('of', (18, 19))]","[('dropout rate', (7, 9)), ('validation set likelihood', (11, 14)), ('optimal rates', (16, 18))]",[],[],[],[]
hyperparameters,"For the sequential LSTM baseline for the language model , we also found an optimal dropout rate of 0.3 .","[('For', (0, 1)), ('for', (5, 6)), ('found', (12, 13)), ('of', (17, 18))]","[('sequential LSTM baseline', (2, 5)), ('language model', (7, 9)), ('optimal dropout rate', (14, 17)), ('0.3', (18, 19))]",[],[],[],[]
hyperparameters,For training we used stochastic gradient descent with a learning rate of 0.1 .,"[('For', (0, 1)), ('used', (3, 4)), ('with', (7, 8)), ('of', (11, 12))]","[('training', (1, 2)), ('stochastic gradient descent', (4, 7)), ('learning rate', (9, 11)), ('0.1', (12, 13))]",[],[],[],[]
research-problem,Cloze - driven Pretraining of Self - attention Networks,[],[],[],[],[],[]
research-problem,We present a new approach for pretraining a bi-directional transformer model that provides significant performance gains across a variety of language understanding problems .,"[('provides', (12, 13)), ('across', (16, 17))]","[('pretraining', (6, 7)), ('bi-directional transformer model', (8, 11)), ('significant performance gains', (13, 16))]",[],[],[],[]
research-problem,Language model pretraining has recently been shown to provide significant performance gains for a range of challenging language understanding problems .,[],"[('Language model pretraining', (0, 3))]",[],[],[],[]
model,"In this paper , we show that even larger performance gains are possible by jointly pretraining both directions of a large language - model - inspired self - attention cloze model .","[('show', (5, 6)), ('possible by', (12, 14)), ('jointly pretraining', (14, 16)), ('of', (18, 19))]","[('even larger performance gains', (7, 11)), ('both directions', (16, 18)), ('large language - model - inspired self - attention cloze model', (20, 31))]",[],[],[],[]
model,Our bi-directional transformer architecture predicts every token in the training data ( ) .,"[('in', (7, 8))]","[('bi-directional transformer architecture', (1, 4)), ('predicts', (4, 5)), ('every token', (5, 7)), ('training data', (9, 11))]",[],[],[],[]
model,We achieve this by introducing a cloze - style training objective where the model must predict the center word given left - to - right and right - to - left context representations .,"[('introducing', (4, 5)), ('where', (11, 12)), ('given', (19, 20))]","[('cloze - style training objective', (6, 11)), ('model', (13, 14)), ('center word', (17, 19)), ('left - to - right and right - to - left context representations', (20, 33))]",[],[],[],[]
model,Our model separately computes both forward and backward states with * Equal contribution . :,"[('separately computes', (2, 4))]","[('forward and backward states', (5, 9))]",[],[],[],[]
experiments,Experimental setup,[],[],[],[],[],[]
experimental-setup,"CNN models use an adaptive softmax in the output : the headband contains the 60K most frequent types with dimensionality 1024 , followed by a 160 K band with dimensionality 256 . with a momentum of 0.99 and we renormalize gradients if their norm exceeds 0.1 .","[('use', (2, 3)), ('in', (6, 7)), ('contains', (12, 13)), ('with', (18, 19)), ('followed by', (22, 24)), ('with', (28, 29)), ('with', (32, 33)), ('of', (35, 36)), ('renormalize', (39, 40)), ('if', (41, 42)), ('exceeds', (44, 45))]","[('CNN models', (0, 2)), ('adaptive softmax', (4, 6)), ('output', (8, 9)), ('headband', (11, 12)), ('60K most frequent types', (14, 18)), ('dimensionality', (19, 20)), ('1024', (20, 21)), ('160 K band', (25, 28)), ('dimensionality', (29, 30)), ('256', (30, 31)), ('momentum', (34, 35)), ('0.99', (36, 37)), ('gradients', (40, 41)), ('norm', (43, 44)), ('0.1', (45, 46))]",[],[],[],[]
experimental-setup,The learning rate is linearly warmed up from 10 ? 7 to 1 for 16 K steps and then annealed using a cosine learning rate schedule with a single phase to 0.0001 .,"[('from', (7, 8)), ('for', (13, 14)), ('annealed using', (19, 21)), ('with', (26, 27)), ('to', (30, 31))]","[('learning rate', (1, 3)), ('linearly warmed up', (4, 7)), ('10 ? 7 to 1', (8, 13)), ('16 K steps', (14, 17)), ('cosine learning rate schedule', (22, 26)), ('single phase', (28, 30)), ('0.0001', (31, 32))]",[],[],[],[]
experimental-setup,We run experiments on DGX - 1 machines with 8 NVIDIA V100 GPUs and machines are interconnected by Infiniband .,"[('run', (1, 2)), ('on', (3, 4)), ('with', (8, 9)), ('interconnected by', (16, 18))]","[('experiments', (2, 3)), ('DGX - 1 machines', (4, 8)), ('8 NVIDIA V100 GPUs', (9, 13)), ('Infiniband', (18, 19))]",[],[],[],[]
experimental-setup,We also use the NCCL2 library and the torch .,"[('use', (2, 3))]","[('NCCL2 library', (4, 6)), ('torch', (8, 9))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
experiments,GLUE,[],"[('GLUE', (0, 1))]",[],[],[],[]
results,"All our models outperform the uni-directional transformer ( OpenAI GPT ) of , however , our model is about 50 % larger than their model .","[('outperform', (3, 4))]","[('uni-directional transformer ( OpenAI GPT )', (5, 11))]",[],[],[],[]
results,"Our CNN base model performs as well as STILTs in aggregate , however , on some tasks involving sentence - pairs , STILTs performs much better ( MRPC , RTE ) ; there is a similar trend for BERT .","[('performs', (4, 5)), ('as well as', (5, 8)), ('in', (9, 10)), ('on', (14, 15)), ('performs', (23, 24))]","[('Our CNN base model', (0, 4)), ('STILTs', (8, 9)), ('aggregate', (10, 11)), ('STILTs', (22, 23)), ('much better', (24, 26)), ('MRPC', (27, 28))]",[],[],[],[]
results,Named Entity Recognition,[],"[('Named Entity Recognition', (0, 3))]",[],[],[],[]
results,"shows the results , with comparison to previous published ELMo BASE results the art , but fine tuning gives the biggest gain .","[('with comparison to', (4, 7)), ('gives', (18, 19))]","[('fine tuning', (16, 18)), ('biggest gain', (20, 22))]",[],[],[],[]
experiments,Constituency Parsing,[],"[('Constituency Parsing', (0, 2))]",[],[],[],[]
ablation-analysis,This results in the bilm loss dominating the triplet loss and we found that scaling the bilm term by a factor of 0.15 results in better performance .,"[('results in', (1, 3)), ('dominating', (6, 7)), ('by', (18, 19)), ('of', (21, 22)), ('results in', (23, 25))]","[('bilm loss', (4, 6)), ('triplet loss', (8, 10)), ('scaling', (14, 15)), ('bilm term', (16, 18)), ('factor', (20, 21)), ('0.15', (22, 23)), ('better performance', (25, 27))]",[],[],[],[]
results,shows that the cloze loss performs significantly better than the bilm loss and that combining the two loss types does not improve over the cloze loss by itself .,"[('shows', (0, 1)), ('performs', (5, 6)), ('than', (8, 9)), ('combining', (14, 15)), ('over', (22, 23))]","[('cloze loss', (3, 5)), ('significantly better', (6, 8)), ('bilm loss', (10, 12)), ('two loss types', (16, 19)), ('cloze loss', (24, 26))]",[],[],[],[]
research-problem,An Empirical Study of Building a Strong Baseline for Constituency Parsing,[],"[('Constituency Parsing', (9, 11))]",[],[],[],[]
model,Our aim is to update the Seq2seq approach proposed in as a stronger baseline of constituency parsing .,"[('update', (4, 5)), ('as', (10, 11)), ('of', (14, 15))]","[('Seq2seq approach', (6, 8)), ('stronger baseline', (12, 14)), ('constituency parsing', (15, 17))]",[],[],[],[]
results,( 1 ) Smaller mini-batch size M and gradient clipping G provided the better performance .,"[('provided', (11, 12))]","[('Smaller mini-batch size M', (3, 7)), ('gradient clipping G', (8, 11)), ('better performance', (13, 15))]",[],[],[],[]
results,"( 2 ) Larger layer size , hidden state dimension , and beam size have little impact on the performance ; our setting , L = 2 , H = 200 , and B = 5 looks adequate in terms of speed / performance trade - off .","[('have', (14, 15)), ('on', (17, 18)), ('looks', (36, 37)), ('in terms of', (38, 41))]","[('beam size', (12, 14)), ('little impact', (15, 17)), ('performance', (19, 20)), ('L = 2 , H = 200 , and B = 5', (24, 36)), ('adequate', (37, 38)), ('speed / performance trade - off', (41, 47))]",[],[],[],[]
results,"As often demonstrated in the NMT literature , using subword split as input token unit instead of standard tokenized word unit has potential to improve the performance .","[('using', (8, 9)), ('as', (11, 12)), ('instead of', (15, 17))]","[('subword split', (9, 11)), ('input token unit', (12, 15)), ('standard tokenized word unit', (17, 21))]",[],[],[],[]
baselines,"Thus , using subword information as features is one promising approach for leveraging subword information into constituency parsing .","[('using', (2, 3)), ('as', (5, 6)), ('into', (15, 16))]","[('subword information', (3, 5)), ('features', (6, 7)), ('constituency parsing', (16, 18))]",[],[],[],[]
results,Our Seq2seq approach successfully achieved the competitive level as the current top - notch methods : RNNG and its variants .,"[('successfully achieved', (3, 5)), ('as', (8, 9))]","[('Seq2seq approach', (1, 3)), ('competitive level', (6, 8)), ('current top - notch methods', (10, 15)), ('RNNG', (16, 17))]",[],[],[],[]
research-problem,Syntactic constituency parsing is a fundamental problem in natural language processing and has been the subject of intensive research and engineering for decades .,[],"[('Syntactic constituency parsing', (0, 3))]",[],[],[],[]
model,"We found this model to work poorly when we trained it on standard human - annotated parsing datasets ( 1M tokens ) , so we constructed an artificial dataset by labelling a large corpus with the BerkeleyParser .","[('work', (5, 6)), ('constructed', (25, 26)), ('by labelling', (29, 31)), ('with', (34, 35))]","[('poorly', (6, 7)), ('artificial dataset', (27, 29)), ('large corpus', (32, 34)), ('BerkeleyParser', (36, 37))]",[],[],[],[]
experiments,"We trained a sequence - to - sequence model with attention on the small human - annotated parsing dataset and were able to achieve an F 1 score of 88.3 on section 23 of the WSJ without the use of an ensemble and 90.5 with an ensemble , which matches the performance of the BerkeleyParser ( 90.4 ) when trained on the same data .","[('trained', (1, 2)), ('with', (9, 10)), ('on', (11, 12)), ('able to achieve', (21, 24)), ('of', (28, 29)), ('on', (30, 31)), ('without', (36, 37)), ('with', (44, 45)), ('matches', (49, 50))]","[('sequence - to - sequence model', (3, 9)), ('attention', (10, 11)), ('small human - annotated parsing dataset', (13, 19)), ('F 1 score', (25, 28)), ('88.3', (29, 30)), ('WSJ', (35, 36)), ('ensemble', (41, 42)), ('90.5', (43, 44)), ('ensemble', (46, 47)), ('performance', (51, 52))]",[],[],[],[]
experiments,"Finally , we constructed a second artificial dataset consisting of only high - confidence parse trees , as measured by the agreement of two parsers .","[('constructed', (3, 4)), ('consisting of', (8, 10)), ('measured by', (18, 20)), ('of', (22, 23))]","[('second artificial dataset', (5, 8)), ('high - confidence parse trees', (11, 16)), ('agreement', (21, 22)), ('two parsers', (23, 25))]",[],[],[],[]
experiments,We trained a sequence - to - sequence model with attention on this data and achieved an F 1 score of 92.5 on section 23 of the WSJ - a new state - of - the - art .,"[('trained', (1, 2)), ('with', (9, 10)), ('achieved', (15, 16)), ('of', (20, 21)), ('on', (22, 23))]","[('sequence - to - sequence model', (3, 9)), ('attention', (10, 11)), ('F 1 score', (17, 20)), ('92.5', (21, 22)), ('WSJ', (27, 28))]",[],[],[],[]
model,"In our experiments we used a model with 3 LSTM layers and 256 units in each layer , which we call LSTM + A .","[('used', (4, 5)), ('with', (7, 8)), ('in', (14, 15)), ('call', (20, 21))]","[('model', (6, 7)), ('3 LSTM layers', (8, 11)), ('256 units', (12, 14)), ('each layer', (15, 17)), ('LSTM + A', (21, 24))]",[],[],[],[]
hyperparameters,"Training on a small dataset we additionally used 2 dropout layers , one between LSTM 1 and LSTM 2 , and one between LSTM 2 and LSTM 3 .","[('Training on', (0, 2)), ('between', (13, 14)), ('between', (22, 23))]","[('small dataset', (3, 5)), ('2 dropout layers', (8, 11)), ('LSTM 1 and LSTM 2', (14, 19)), ('LSTM 2 and LSTM 3', (23, 28))]",[],[],[],[]
hyperparameters,The embedding layer for our 90K vocabulary can be initialized randomly or using pre-trained word - vector embeddings .,"[('for', (3, 4)), ('can be', (7, 9)), ('using', (12, 13))]","[('embedding layer', (1, 3)), ('90K vocabulary', (5, 7)), ('initialized randomly', (9, 11)), ('pre-trained word - vector embeddings', (13, 18))]",[],[],[],[]
hyperparameters,We pre-trained skip - gram embeddings of size 512 using word2vec [ 6 ] on a 10B - word corpus .,"[('pre-trained', (1, 2)), ('of size', (6, 8)), ('using', (9, 10)), ('on', (14, 15))]","[('skip - gram embeddings', (2, 6)), ('512', (8, 9)), ('word2vec', (10, 11)), ('10B - word corpus', (16, 20))]",[],[],[],[]
results,But a single attention model gets to 88.3 and an ensemble of 5 LSTM + A+D models achieves 90.5 matching a single - model BerkeleyParser on WSJ 23 .,"[('gets to', (5, 7)), ('achieves', (17, 18)), ('matching', (19, 20)), ('on', (25, 26))]","[('single attention model', (2, 5)), ('88.3', (7, 8)), ('ensemble of 5 LSTM + A+D models', (10, 17)), ('90.5', (18, 19)), ('single - model BerkeleyParser', (21, 25)), ('WSJ', (26, 27))]",[],[],[],[]
results,"When trained on the large high - confidence corpus , a single LSTM + A model achieves 92.5 and so outperforms not only the best single model , but also the best ensemble result reported previously .","[('trained on', (1, 3)), ('achieves', (16, 17))]","[('large high - confidence corpus', (4, 9)), ('single LSTM + A model', (11, 16)), ('92.5', (17, 18)), ('outperforms', (20, 21)), ('best single model', (24, 27)), ('best ensemble result', (31, 34))]",[],[],[],[]
results,An ensemble of 5 LSTM+ A models further improves this score to 92.8 .,"[('of', (2, 3)), ('improves', (8, 9)), ('to', (11, 12))]","[('ensemble', (1, 2)), ('5 LSTM+ A models', (3, 7)), ('score', (10, 11)), ('92.8', (12, 13))]",[],[],[],[]
results,"The LSTM + A model trained on WSJ dataset only produced malformed trees for 25 of the 1700 sentences in our development set ( 1.5 % of all cases ) , and the model trained on full high - confidence dataset did this for 14 sentences ( 0.8 % ) .","[('trained on', (5, 7)), ('produced', (10, 11)), ('for', (13, 14)), ('in', (19, 20)), ('trained on', (34, 36)), ('for', (43, 44))]","[('LSTM + A model', (1, 5)), ('WSJ dataset', (7, 9)), ('malformed trees', (11, 13)), ('25 of the 1700 sentences', (14, 19)), ('our development set', (20, 23)), ('full high - confidence dataset', (36, 41)), ('14 sentences ( 0.8 % )', (44, 50))]",[],[],[],[]
results,"The difference between the F 1 score on sentences of length upto 30 and that upto 70 is 1.3 for the BerkeleyParser , 1.7 for the baseline LSTM , and 0.7 for LSTM + A .","[('between', (2, 3)), ('on', (7, 8)), ('of length', (9, 11)), ('is', (17, 18)), ('for', (19, 20)), ('for', (24, 25)), ('for', (31, 32))]","[('difference', (1, 2)), ('F 1 score', (4, 7)), ('sentences', (8, 9)), ('1.3', (18, 19)), ('BerkeleyParser', (21, 22)), ('1.7', (23, 24)), ('baseline LSTM', (26, 28)), ('0.7', (30, 31)), ('LSTM + A', (32, 35))]",[],[],[],[]
results,LSTM + A trained on the high - confidence corpus ( which only includes text from news ) achieved an F 1 score of 95.7 on QTB and 84.6 on WEB .,"[('trained on', (3, 5)), ('achieved', (18, 19)), ('of', (23, 24)), ('on', (25, 26)), ('on', (29, 30))]","[('LSTM + A', (0, 3)), ('high - confidence corpus', (6, 10)), ('F 1 score', (20, 23)), ('95.7', (24, 25)), ('QTB', (26, 27)), ('84.6', (28, 29)), ('WEB', (30, 31))]",[],[],[],[]
research-problem,Recent work has proposed several generative neural models for constituency parsing that achieve state - of - the - art results .,[],"[('constituency parsing', (9, 11))]",[],[],[],[]
research-problem,Recent work on neural constituency parsing has found multiple cases where generative scoring models for which inference is complex outperform base models for which inference is simpler .,[],"[('neural constituency parsing', (3, 6))]",[],[],[],[]
ablation-analysis,"In this paper , we present experiments to isolate the degree to which each gain occurs for each of two state - of - the - art generative neural parsing models : the Recurrent Neural Network Grammar generative parser ( RG ) of , and the LSTM language modeling generative parser ( LM ) of .",[],"[('two state - of - the - art generative neural parsing models', (19, 31)), ('Recurrent Neural Network Grammar generative parser ( RG )', (33, 42)), ('LSTM language modeling generative parser ( LM )', (46, 54))]",[],[],[],[]
approach,"In particular , we present and use a beam - based search procedure with an augmented state space that can search directly in the generative models , allowing us to explore A ?","[('present', (4, 5)), ('use', (6, 7)), ('with', (13, 14)), ('search directly in', (20, 23))]","[('beam - based search procedure', (8, 13)), ('augmented state space', (15, 18)), ('generative models', (24, 26))]",[],[],[],[]
results,"We find that this is indeed the case : simply taking a weighted average of the scores of both models when selecting a parse from the base parser 's candidate list improves over using only the score of the generative model , in many cases substantially ( Section 3.2 ) .","[('taking', (10, 11)), ('of', (14, 15)), ('of', (17, 18)), ('when selecting', (20, 22)), ('from', (24, 25)), ('of', (37, 38))]","[('weighted average', (12, 14)), ('scores', (16, 17)), ('both models', (18, 20)), ('parse', (23, 24)), (""base parser 's candidate list"", (26, 31)), ('improves', (31, 32)), ('score', (36, 37)), ('generative model', (39, 41))]",[],[],[],[]
experiments,Augmenting the candidate set,"[('Augmenting', (0, 1))]","[('candidate set', (2, 4))]",[],[],[],[]
ablation-analysis,RG decreases performance from 93.45 F1 to 92.78 F1 on the development set .,"[('from', (3, 4)), ('to', (6, 7)), ('on', (9, 10))]","[('RG', (0, 1)), ('decreases', (1, 2)), ('performance', (2, 3)), ('93.45 F1', (4, 6)), ('92.78 F1', (7, 9)), ('development set', (11, 13))]",[],[],[],[]
experiments,Score combination,[],"[('Score combination', (0, 2))]",[],[],[],[]
results,"We find that combining the scores of both models improves on using the score of either model alone , regardless of the source of candidates .","[('combining', (3, 4)), ('of', (6, 7)), ('improves on', (9, 11)), ('using', (11, 12)), ('of', (14, 15))]","[('scores', (5, 6)), ('both models', (7, 9)), ('score', (13, 14)), ('either model alone', (15, 18))]",[],[],[],[]
experiments,Strengthening model combination,[],"[('Strengthening model combination', (0, 3))]",[],[],[],[]
ablation-analysis,"2 Combining candidates and scores from all three models ( row 9 ) , we obtain 93.94 F1 . :","[('Combining', (1, 2)), ('from', (5, 6)), ('obtain', (15, 16))]","[('candidates and scores', (2, 5)), ('all three models', (6, 9)), ('93.94 F1 .', (16, 19)), ('93.94 F1', (16, 18))]",[],[],[],[]
baselines,"Ensembling Finally , we compare to another commonly used model combination method : ensembling multiple instances of the same model type trained from different random initializations .","[('compare to', (4, 6)), ('ensembling', (13, 14)), ('trained from', (21, 23))]","[('Ensembling', (0, 1)), ('multiple instances', (14, 16)), ('same model type', (18, 21)), ('different random initializations', (23, 26))]",[],[],[],[]
ablation-analysis,"Performance when using only the ensembled RD models ( row 10 ) is lower than rescoring a single RD model with score combinations of single models , either RD + RG ( row 3 ) or RD + LM ( row 6 ) .","[('when using', (1, 3)), ('is', (12, 13)), ('than', (14, 15)), ('rescoring', (15, 16)), ('with', (20, 21))]","[('Performance', (0, 1)), ('ensembled RD models', (5, 8)), ('lower', (13, 14)), ('single RD model', (17, 20)), ('score combinations', (21, 23)), ('single models', (24, 26)), ('RD + RG', (28, 31)), ('RD + LM', (36, 39))]",[],[],[],[]
results,"In the PTB setting , ensembling with score combination achieves the best over all result of 94.25 ( row 13 ) .","[('In', (0, 1)), ('with', (6, 7)), ('achieves', (9, 10)), ('of', (15, 16))]","[('PTB setting', (2, 4)), ('ensembling', (5, 6)), ('score combination', (7, 9)), ('best over all result', (11, 15)), ('94.25', (16, 17))]",[],[],[],[]
research-problem,In- Order Transition - based Constituent Parsing,[],[],[],[],[],[]
research-problem,Both bottom - up and top - down strategies have been used for neural transition - based constituent parsing .,[],"[('neural transition - based constituent parsing', (13, 19))]",[],[],[],[]
model,"In this paper , we propose a novel transition system for constituent parsing , mitigating issues of both bottom - up and top - down systems by finding a compromise between bottom - up constituent information and top - down lookahead information .","[('propose', (5, 6)), ('for', (10, 11)), ('mitigating', (14, 15))]","[('novel transition system', (7, 10)), ('constituent parsing', (11, 13)), ('bottom - up constituent information', (31, 36)), ('top - down lookahead information', (37, 42))]",[],[],[],[]
code,We release our code at https://github.com/LeonCrashCode/InOrderParser .,[],"[('https://github.com/LeonCrashCode/InOrderParser', (5, 6))]",[],[],[],[]
experiments,Reranking experiments,[],"[('Reranking experiments', (0, 2))]",[],[],[],[]
results,The bottom - up system performs slightly better than the top - down system .,"[('performs', (5, 6)), ('than', (8, 9))]","[('bottom - up system', (1, 5)), ('slightly better', (6, 8)), ('top - down system', (10, 14))]",[],[],[],[]
results,The inorder system outperforms both the bottom - up and the top - down system .,"[('outperforms', (3, 4))]","[('inorder system', (1, 3)), ('bottom - up and the top - down system', (6, 15))]",[],[],[],[]
results,"We find that the bottom - up parser and the top - down parser have similar results under the greedy setting , and the in - order parser outperforms both of them .","[('find that', (1, 3)), ('have', (14, 15)), ('under', (17, 18))]","[('bottom - up parser and the top - down parser', (4, 14)), ('similar results', (15, 17)), ('greedy setting', (19, 21)), ('in - order parser', (24, 28)), ('outperforms', (28, 29))]",[],[],[],[]
results,English constituent results,[],"[('English constituent results', (0, 3))]",[],[],[],[]
results,"With the fully - supervise setting 5 , the inorder parser outperforms the state - of - the - art discrete parser , the state - of - the - art neural parsers","[('With', (0, 1)), ('outperforms', (11, 12))]","[('fully - supervise setting', (2, 6)), ('inorder parser', (9, 11)), ('state - of - the - art discrete parser', (13, 22)), ('state - of - the - art neural parsers', (24, 33))]",[],[],[],[]
results,Chinese dependency results,[],"[('Chinese dependency results', (0, 3))]",[],[],[],[]
results,"As shown in , by converting the results to dependencies 6 , our final model achieves the best results among transitionbased parsing , and obtains comparable results to the state - of - the - art graph - based models . 85.5 84.0 87.7 86.2","[('achieves', (15, 16)), ('among', (19, 20)), ('obtains', (24, 25)), ('to', (27, 28))]","[('our final model', (12, 15)), ('best results', (17, 19)), ('transitionbased parsing', (20, 22)), ('comparable results', (25, 27)), ('state - of - the - art graph - based models', (29, 40))]",[],[],[],[]
experiments,Parsing as Language Modeling,[],"[('Parsing', (0, 1))]",[],[],[],[]
research-problem,"We recast syntactic parsing as a language modeling problem and use recent advances in neural network language modeling to achieve a new state of the art for constituency Penn Treebank parsing - 93.8 F 1 on section 23 , using 2 - 21 as training , 24 as development , plus tri-training .","[('using', (39, 40)), ('as', (43, 44))]","[('syntactic parsing', (2, 4)), ('constituency Penn Treebank parsing', (27, 31)), ('2 - 21', (40, 43)), ('training', (44, 45)), ('development', (48, 49)), ('tri-training', (51, 52))]",[],[],[],[]
research-problem,"Recent work on deep learning syntactic parsing models has achieved notably good results , e.g. , with 92.4 F 1 on Penn Treebank constituency parsing and with 92.8 F 1 .",[],[],[],[],[],[]
model,"In this paper we borrow from the approaches of both of these works and present a neural - net parse reranker that achieves very good results , 93.8 F 1 , with a comparatively simple architecture .","[('present', (14, 15)), ('achieves', (22, 23)), ('with', (31, 32))]","[('neural - net parse reranker', (16, 21)), ('very good results', (23, 26)), ('93.8 F 1', (27, 30)), ('comparatively simple architecture', (33, 36))]",[],[],[],[]
hyperparameters,"The model has three LSTM layers with 1,500 units and gets trained with truncated backpropagation through time with mini-batch size 20 and step size 50 .","[('with', (6, 7)), ('gets', (10, 11)), ('trained with', (11, 13)), ('through', (15, 16)), ('with', (17, 18))]","[('three LSTM layers', (3, 6)), ('1,500 units', (7, 9)), ('truncated backpropagation', (13, 15)), ('time', (16, 17)), ('mini-batch size 20', (18, 21)), ('step size 50', (22, 25))]",[],[],[],[]
hyperparameters,We initialize starting states with previous minibatch 's last hidden states .,"[('initialize', (1, 2)), ('with', (4, 5))]","[('starting states', (2, 4)), (""previous minibatch 's last hidden states"", (5, 11))]",[],[],[],[]
hyperparameters,"The forget gate bias is initialized to be one and the rest of model parameters are sampled from U ( ? 0.05 , 0.05 ) .","[('initialized to be', (5, 8)), ('sampled from', (16, 18))]","[('forget gate bias', (1, 4)), ('one', (8, 9)), ('rest of model parameters', (11, 15)), ('U ( ? 0.05 , 0.05 )', (18, 25))]",[],[],[],[]
hyperparameters,Dropout is applied to non-recurrent connections and gradients are clipped when their norm is bigger than 20 .,"[('applied to', (2, 4)), ('when', (10, 11)), ('bigger than', (14, 16))]","[('Dropout', (0, 1)), ('non-recurrent connections', (4, 6)), ('gradients', (7, 8)), ('clipped', (9, 10)), ('norm', (12, 13)), ('20', (16, 17))]",[],[],[],[]
hyperparameters,The learning rate is 0.25 0.85 max where is an epoch number .,"[('is', (3, 4))]","[('learning rate', (1, 3)), ('0.25 0.85 max', (4, 7)), ('epoch number', (10, 12))]",[],[],[],[]
hyperparameters,"For simplicity , we use vanilla softmax over an entire vocabulary as opposed to hierarchical softmax or noise contrastive estimation ( Gutmann and Hyvrinen , 2012 ) .","[('use', (4, 5)), ('over', (7, 8))]","[('vanilla softmax', (5, 7)), ('entire vocabulary', (9, 11)), ('hierarchical softmax', (14, 16)), ('noise contrastive estimation', (17, 20))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"A single LSTM - LM ( GS ) together with Charniak ( GS ) reaches 93.6 and an ensemble of eight LSTM - LMs ( GS ) with Charniak ( GS ) achieves a new state of the art , 93.8 F 1 .","[('together with', (8, 10)), ('reaches', (14, 15)), ('with', (27, 28)), ('achieves', (32, 33))]","[('single LSTM - LM ( GS )', (1, 8)), ('Charniak ( GS )', (10, 14)), ('93.6', (15, 16)), ('Charniak ( GS )', (28, 32)), ('new state of the art', (34, 39)), ('93.8 F 1', (40, 43))]",[],[],[],[]
results,"When trees are converted to Stanford dependencies , 5 UAS and LAS are 95.9 % and 94.1 % , 6 more than 1 % higher than those of the state of the art dependency parser .","[('converted to', (3, 5)), ('are', (12, 13))]","[('trees', (1, 2)), ('Stanford dependencies', (5, 7)), ('UAS and LAS', (9, 12)), ('95.9 % and 94.1 %', (13, 18)), ('state of the art dependency parser', (29, 35))]",[],[],[],[]
research-problem,What Do Recurrent Neural Network Grammars Learn About Syntax ?,[],[],[],[],[],[]
research-problem,Recurrent neural network grammars ( RNNG ) area recently proposed probabilistic generative modeling family for natural language .,[],"[('Recurrent neural network grammars ( RNNG )', (0, 7))]",[],[],[],[]
approach,"We focus on RNNGs as generative probabilistic models over trees , as summarized in 2 .","[('focus on', (1, 3)), ('as', (4, 5)), ('over', (8, 9))]","[('RNNGs', (3, 4)), ('generative probabilistic models', (5, 8)), ('trees', (9, 10))]",[],[],[],[]
approach,This paper manipulates the inductive bias of RNNGs to test linguistic hypotheses .,"[('manipulates', (2, 3)), ('of', (6, 7)), ('to test', (8, 10))]","[('inductive bias', (4, 6)), ('RNNGs', (7, 8)), ('linguistic hypotheses', (10, 12))]",[],[],[],[]
approach,We begin with an ablation study to discover the importance of the composition function in 3 .,"[('begin with', (1, 3)), ('to discover', (6, 8)), ('of', (10, 11))]","[('importance', (9, 10)), ('composition function', (12, 14))]",[],[],[],[]
approach,"Based on the findings , we augment the RNNG composition function with a novel gated attention mechanism ( leading to the GA - RNNG ) to incorporate more interpretability into the model in 4 .","[('augment', (6, 7)), ('with', (11, 12)), ('leading to', (18, 20)), ('to incorporate', (25, 27)), ('into', (29, 30))]","[('RNNG composition function', (8, 11)), ('novel gated attention mechanism', (13, 17)), ('GA - RNNG', (21, 24)), ('more interpretability', (27, 29)), ('model', (31, 32))]",[],[],[],[]
approach,"Using the GA - RNNG , we proceed by investigating the role that individual heads play in phrasal representation ( 5 ) and the role that nonterminal category labels play ( 6 ) .","[('Using', (0, 1)), ('investigating', (9, 10)), ('play', (15, 16)), ('in', (16, 17)), ('play', (29, 30))]","[('GA - RNNG', (2, 5)), ('role', (11, 12)), ('individual heads', (13, 15)), ('phrasal representation', (17, 19)), ('nonterminal category labels', (26, 29))]",[],[],[],[]
results,"The RNNG with only a stack is the strongest of the ablations , and it even outperforms the "" full "" RNNG with all three data structures .","[('with', (2, 3)), ('is', (6, 7)), ('outperforms', (16, 17)), ('with', (22, 23))]","[('RNNG', (1, 2)), ('only a stack', (3, 6)), ('ablations', (11, 12)), ('"" full "" RNNG', (18, 22)), ('all three data structures', (23, 27))]",[],[],[],[]
results,Ablating the stack gives the worst among the new results .,"[('Ablating', (0, 1)), ('gives', (3, 4)), ('among', (6, 7))]","[('stack', (2, 3)), ('worst', (5, 6)), ('new results', (8, 10))]",[],[],[],[]
results,"A similar performance degradation is seen in language modeling : the stack - only RNNG achieves the best performance , and ablating the stack is most harmful .","[('achieves', (15, 16)), ('ablating', (21, 22)), ('is', (24, 25))]","[('language modeling', (7, 9)), ('stack - only RNNG', (11, 15)), ('best performance', (17, 19)), ('stack', (23, 24)), ('most harmful', (25, 27))]",[],[],[],[]
results,"Indeed , modeling syntax without explicit composition ( the stackablated RNNG ) provides little benefit over a sequential LSTM language model .","[('modeling', (2, 3)), ('without', (4, 5)), ('provides', (12, 13)), ('over', (15, 16))]","[('syntax', (3, 4)), ('explicit composition', (5, 7)), ('little benefit', (13, 15)), ('sequential LSTM language model', (17, 21))]",[],[],[],[]
results,We remark that the stack - only results are the best published PTB results for both phrasestructure and dependency parsing among supervised models .,"[('remark', (1, 2)), ('are', (8, 9)), ('for', (14, 15)), ('among', (20, 21))]","[('stack - only results', (4, 8)), ('best published PTB results', (10, 14)), ('phrasestructure and dependency parsing', (16, 20)), ('supervised models', (21, 23))]",[],[],[],[]
baselines,Gated Attention RNNG,[],"[('Gated Attention RNNG', (0, 3))]",[],[],[],[]
results,"It is clear that the model outperforms the baseline RNNG with all three structures present and achieves competitive performance with the strongest , stack - only , RNNG variant .","[('outperforms', (6, 7)), ('with', (10, 11)), ('achieves', (16, 17)), ('with', (19, 20))]","[('model', (5, 6)), ('baseline RNNG', (8, 10)), ('all three structures', (11, 14)), ('competitive performance', (17, 19)), ('strongest , stack - only , RNNG variant', (21, 29))]",[],[],[],[]
results,Headedness in Phrases,[],"[('Headedness in Phrases', (0, 3))]",[],[],[],[]
results,The model has a higher overlap with the conversion using Collins head rules ( 49.8 UAS ) rather than the Stanford head rules ( 40.4 UAS ) .,"[('with', (6, 7)), ('using', (9, 10)), ('rather than', (17, 19))]","[('higher overlap', (4, 6)), ('conversion', (8, 9)), ('Collins head rules ( 49.8 UAS )', (10, 17)), ('40.4 UAS )', (24, 27))]",[],[],[],[]
results,"In general , the attention - based tree output has a high error rate ( ? 90 % ) when the dependent is a verb , since the constituent with the highest attention weight in a verb phrase is often the noun phrase instead of the verb , as discussed above .","[('when', (19, 20)), ('is', (22, 23))]","[('attention - based tree output', (4, 9)), ('high error rate ( ? 90 % )', (11, 19)), ('dependent', (21, 22)), ('verb', (24, 25))]",[],[],[],[]
results,"The conversion accuracy is better for nouns ( ? 50 % error ) , and much better for determiners ( 30 % ) and particles ( 6 % ) with respect to the Collins head rules .","[('better for', (4, 6)), ('much better for', (15, 18)), ('for', (17, 18)), ('with respect to', (29, 32))]","[('conversion accuracy', (1, 3)), ('nouns ( ? 50 % error )', (6, 13)), ('much better', (15, 17)), ('determiners ( 30 % ) and particles ( 6 % )', (18, 29)), ('Collins head rules', (33, 36))]",[],[],[],[]
ablation-analysis,The Role of Nonterminal Labels,[],[],[],[],[],[]
results,"On test data ( with the usual split ) , the GA - RNNG achieves 94.2 % , while the U - GA - RNNG achieves 93.5 % .","[('On', (0, 1)), ('with', (4, 5)), ('achieves', (14, 15)), ('achieves', (25, 26))]","[('test data', (1, 3)), ('usual split', (6, 8)), ('GA - RNNG', (11, 14)), ('94.2 %', (15, 17)), ('U - GA - RNNG', (20, 25)), ('93.5 %', (26, 28))]",[],[],[],[]
research-problem,Constituency Parsing with a Self - Attentive Encoder,[],"[('Constituency Parsing', (0, 2))]",[],[],[],[]
model,"In this paper , we introduce a parser that combines an encoder built using this kind of self - attentive architecture with a decoder customized for parsing ( ) .","[('introduce', (5, 6)), ('combines', (9, 10)), ('built using', (12, 14)), ('with', (21, 22)), ('customized for', (24, 26))]","[('parser', (7, 8)), ('encoder', (11, 12)), ('decoder', (23, 24)), ('parsing', (26, 27))]",[],[],[],[]
model,"We also present a version of our model that uses a character LSTM , which performs better than other lexical representationseven if word embeddings are removed from the model .","[('present', (2, 3)), ('uses', (9, 10)), ('performs', (15, 16)), ('than', (17, 18)), ('removed from', (25, 27))]","[('character LSTM', (11, 13)), ('better', (16, 17)), ('other lexical representationseven', (18, 21))]",[],[],[],[]
experiments,6 Results,[],[],[],[],[],[]
experiments,English ( WSJ ),[],"[('English ( WSJ )', (0, 4))]",[],[],[],[]
experiments,"The test score of 93.55 F1 for our CharLSTM parser exceeds the previous best numbers for single - system parsers trained on the Penn Treebank ( without the use of any external data , such as pre-trained word embeddings ) .","[('of', (3, 4)), ('for', (6, 7)), ('exceeds', (10, 11)), ('for', (15, 16)), ('trained on', (20, 22))]","[('test score', (1, 3)), ('93.55 F1', (4, 6)), ('our CharLSTM parser', (7, 10)), ('previous best numbers', (12, 15)), ('single - system parsers', (16, 20)), ('Penn Treebank', (23, 25))]",[],[],[],[]
experiments,"When our parser is augmented with ELMo word representations , it achieves a new state - of - the - art score of 95.13 F1 on the WSJ test set .","[('augmented with', (4, 6)), ('achieves', (11, 12)), ('of', (22, 23)), ('on', (25, 26))]","[('our parser', (1, 3)), ('ELMo word representations', (6, 9)), ('new state - of - the - art score', (13, 22)), ('95.13 F1', (23, 25)), ('WSJ test set', (27, 30))]",[],[],[],[]
experiments,Multilingual ( SPMRL ),[],"[('Multilingual ( SPMRL )', (0, 4))]",[],[],[],[]
experiments,"Development set results show that the addition of word embeddings to a model that uses a character LSTM has a mixed effect : it improves performance for some languages , but hurts for others .","[('show', (3, 4)), ('addition of', (6, 8)), ('to', (10, 11)), ('that uses', (13, 15)), ('for', (26, 27)), ('for', (32, 33))]","[('Development set results', (0, 3)), ('word embeddings', (8, 10)), ('model', (12, 13)), ('character LSTM', (16, 18)), ('mixed effect', (20, 22)), ('improves', (24, 25)), ('performance', (25, 26)), ('some languages', (27, 29)), ('hurts', (31, 32)), ('others', (33, 34))]",[],[],[],[]
experiments,"On 8 of the 9 languages , our test set result exceeds the previous best - published numbers from any system we are aware of .","[('On', (0, 1)), ('exceeds', (11, 12))]","[('8 of the 9 languages', (1, 6)), ('test set result', (8, 11)), ('previous best - published numbers', (13, 18))]",[],[],[],[]
research-problem,Improving Coreference Resolution by Learning Entity - Level Distributed Representations,[],"[('Coreference Resolution', (1, 3))]",[],[],[],[]
model,"In this work , we instead train a deep neural network to build distributed representations of pairs of coreference clusters .","[('train', (6, 7)), ('to build', (11, 13)), ('of', (15, 16))]","[('deep neural network', (8, 11)), ('distributed representations', (13, 15)), ('pairs', (16, 17))]",[],[],[],[]
model,"This captures entity - level information with a large number of learned , continuous features instead of a small number of hand - crafted categorical ones .","[('captures', (1, 2)), ('with', (6, 7)), ('instead of', (15, 17))]","[('entity - level information', (2, 6)), ('large number of learned , continuous features', (8, 15)), ('small number of hand - crafted categorical ones', (18, 26))]",[],[],[],[]
model,"Using the cluster - pair representations , our network learns when combining two coreference clusters is desirable .","[('Using', (0, 1)), ('learns', (9, 10)), ('is', (15, 16))]","[('cluster - pair representations', (2, 6)), ('our network', (7, 9)), ('two coreference clusters', (12, 15)), ('desirable', (16, 17))]",[],[],[],[]
model,"At test time it builds up coreference clusters incrementally , starting with each mention in its own cluster and then merging a pair of clusters each step .","[('At', (0, 1)), ('builds up', (4, 6)), ('starting with', (10, 12)), ('in', (14, 15)), ('merging', (20, 21))]","[('test time', (1, 3)), ('coreference clusters', (6, 8)), ('incrementally', (8, 9)), ('each mention', (12, 14)), ('own cluster', (16, 18)), ('pair of clusters', (22, 25))]",[],[],[],[]
model,It makes these decisions with a novel easy - first cluster - ranking procedure that combines the strengths of cluster - ranking ( Rahman and and easy - first coreference algorithms .,"[('makes', (1, 2)), ('with', (4, 5)), ('combines', (15, 16)), ('of', (18, 19))]","[('novel easy - first cluster - ranking procedure', (6, 14)), ('strengths', (17, 18))]",[],[],[],[]
model,We address this by using a learning - to - search algorithm inspired by SEARN to train our neural network .,"[('using', (4, 5)), ('inspired by', (12, 14)), ('to train', (15, 17))]","[('learning - to - search algorithm', (6, 12)), ('SEARN', (14, 15)), ('neural network', (18, 20))]",[],[],[],[]
model,This approach allows the model to learn which action ( a cluster merge ) available from the current state ( a partially completed coreference clustering ) will eventually lead to a high - scoring coreference partition .,"[('allows', (2, 3)), ('to learn', (5, 7)), ('available from', (14, 16))]","[('model', (4, 5)), ('current state', (17, 19)), ('partially completed coreference clustering', (21, 25)), ('high - scoring coreference partition', (31, 36))]",[],[],[],[]
results,Our mention - ranking model surpasses all previous systems .,"[('surpasses', (5, 6))]","[('mention - ranking model', (1, 5)), ('all previous systems', (6, 9))]",[],[],[],[]
results,"The cluster - ranking model improves results further across both languages and all evaluation metrics , demonstrating the utility of incorporating entity - level information .","[('improves', (5, 6)), ('across', (8, 9))]","[('cluster - ranking model', (1, 5)), ('results', (6, 7)), ('further', (7, 8)), ('both languages and all evaluation metrics', (9, 15))]",[],[],[],[]
research-problem,End - to - end Deep Reinforcement Learning Based Coreference Resolution,[],[],[],[],[],[]
model,"In this paper , we propose a goal - directed endto - end deep reinforcement learning framework to resolve coreference as shown in .","[('propose', (5, 6)), ('to resolve', (17, 19))]","[('goal - directed endto - end deep reinforcement learning framework', (7, 17)), ('coreference', (19, 20))]",[],[],[],[]
model,"Specifically , we leverage the neural architecture in as our policy network , which includes learning span representation , scoring potential entity mentions , and generating a probability distribution over all possible coreference linking actions from the current mention to its antecedents .","[('leverage', (3, 4)), ('in', (7, 8)), ('includes', (14, 15)), ('scoring', (19, 20)), ('generating', (25, 26)), ('over', (29, 30)), ('from', (35, 36)), ('to', (39, 40))]","[('neural architecture', (5, 7)), ('policy network', (10, 12)), ('learning', (15, 16)), ('span representation', (16, 18)), ('potential entity mentions', (20, 23)), ('probability distribution', (27, 29)), ('actions', (34, 35)), ('current mention', (37, 39)), ('antecedents', (41, 42))]",[],[],[],[]
model,"Once a sequence of linking actions are made , our reward function is used to measure how good the generated coreference clusters are , which is directly related to coreference evaluation metrics .","[('Once', (0, 1)), ('made', (7, 8)), ('to measure', (14, 16)), ('are', (22, 23))]","[('sequence of linking actions', (2, 6)), ('linking actions', (4, 6)), ('reward function', (10, 12)), ('how good', (16, 18)), ('generated coreference clusters', (19, 22))]",[],[],[],[]
model,"Besides , we introduce an entropy regularization term to encourage exploration and prevent the policy from prematurely converging to a bad local optimum .","[('introduce', (3, 4)), ('to encourage', (8, 10)), ('prevent', (12, 13)), ('from', (15, 16)), ('prematurely converging to', (16, 19))]","[('entropy regularization term', (5, 8)), ('exploration', (10, 11)), ('policy', (14, 15)), ('bad local optimum', (20, 23))]",[],[],[],[]
model,"Finally , we update the regularized policy network parameters based on the rewards associated with sequences of sampled actions , which are computed on the whole input document .","[('update', (3, 4)), ('based on', (9, 11)), ('associated with', (13, 15)), ('computed on', (22, 24))]","[('regularized policy network parameters', (5, 9)), ('rewards', (12, 13)), ('sequences of sampled actions', (15, 19)), ('whole input document', (25, 28))]",[],[],[],[]
experiments,Experiments,[],"[('Experiments', (0, 1))]",[],[],[],[]
hyperparameters,"First , we pretrain our model using Eq. ( 4 ) for around 200 K steps and use the learned parameters for initialization .","[('pretrain', (3, 4)), ('using', (6, 7)), ('for', (11, 12)), ('use', (17, 18)), ('for', (21, 22))]","[('our model', (4, 6)), ('around 200 K steps', (12, 16)), ('learned parameters', (19, 21)), ('initialization', (22, 23))]",[],[],[],[]
hyperparameters,"Besides , we set the number of sampled trajectories N s = 100 , tune the regularization parameter ? expr in { 10 ?5 , 10 ?4 , 0.001 , 0.01 , 0.1 , 1 } and set it to 10 ? 4 based on the development set .","[('set', (3, 4)), ('=', (11, 12)), ('tune', (14, 15)), ('in', (20, 21)), ('set it to', (37, 40)), ('based on', (43, 45))]","[('number of sampled trajectories N s', (5, 11)), ('100', (12, 13)), ('regularization parameter', (16, 18)), ('{ 10 ?5 , 10 ?4 , 0.001 , 0.01 , 0.1 , 1 }', (21, 36)), ('10 ? 4', (40, 43))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"Built on top of the model in but excluding ELMo , our base reinforced model improves the average F 1 score around 2 points ( statistical significant t- test with p < 0.05 ) compared with .","[('Built on top of', (0, 4)), ('in', (6, 7)), ('excluding', (8, 9)), ('improves', (15, 16)), ('around', (21, 22))]","[('model', (5, 6)), ('ELMo', (9, 10)), ('our base reinforced model', (11, 15)), ('average F 1 score', (17, 21)), ('2 points', (22, 24))]",[],[],[],[]
results,"Regarding our model , using entropy regularization to encourage exploration can improve the result by 1 point .","[('using', (4, 5)), ('to encourage', (7, 9)), ('improve', (11, 12)), ('by', (14, 15))]","[('entropy regularization', (5, 7)), ('exploration', (9, 10)), ('result', (13, 14)), ('1 point', (15, 17))]",[],[],[],[]
results,"Moreover , introducing the context - dependent ELMo embedding to our base model can further boosts the performance , which is consistent with the results in .","[('introducing', (2, 3)), ('to', (9, 10)), ('further boosts', (14, 16))]","[('context - dependent ELMo embedding', (4, 9)), ('our base model', (10, 13)), ('performance', (17, 18))]",[],[],[],[]
results,"Overall , our full model achieves the state - of the - art performance of 73.8 % F1 - score when using ELMo and entropy regularization ( compared to models marked with * in , and our approach simultaneously obtains the best F1 -score of 70.5 % when using fixed word embedding only .","[('achieves', (5, 6)), ('of', (14, 15)), ('when using', (20, 22)), ('of', (44, 45)), ('when using', (47, 49))]","[('our full model', (2, 5)), ('state - of the - art performance', (7, 14)), ('73.8 % F1 - score', (15, 20)), ('ELMo and entropy regularization', (22, 26)), ('our approach', (36, 38)), ('best F1 -score', (41, 44)), ('70.5 %', (45, 47)), ('fixed word embedding only', (49, 53))]",[],[],[],[]
research-problem,Coreference resolution systems are typically trained with heuristic loss functions that require careful tuning .,"[('trained with', (5, 7))]","[('Coreference resolution systems', (0, 3)), ('Coreference resolution', (0, 2))]",[],[],[],[]
approach,"To address this , we explore using two variants of reinforcement learning to directly optimize a coreference system for coreference evaluation metrics .","[('to directly optimize', (12, 15)), ('for', (18, 19))]","[('two variants of reinforcement learning', (7, 12)), ('coreference system', (16, 18)), ('coreference evaluation metrics', (19, 22))]",[],[],[],[]
approach,"In particular , we modify the max-margin coreference objective proposed by by incorporating the reward associated with each coreference decision into the loss 's slack rescaling .","[('modify', (4, 5)), ('by incorporating', (11, 13)), ('associated with', (15, 17)), ('into', (20, 21))]","[('max-margin coreference objective', (6, 9)), ('reward', (14, 15)), ('each coreference decision', (17, 20)), (""loss 's slack rescaling"", (22, 26))]",[],[],[],[]
experiments,We also test the REINFORCE policy gradient algorithm .,"[('test', (2, 3))]","[('REINFORCE policy gradient algorithm', (4, 8))]",[],[],[],[]
approach,Our model is a neural mention - ranking model .,"[('is', (2, 3))]","[('neural mention - ranking model', (4, 9))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"We find that REINFORCE does slightly better than the heuristic loss , but reward rescaling performs significantly better than both on both languages .","[('find', (1, 2)), ('does', (4, 5)), ('than', (7, 8)), ('performs', (15, 16)), ('than', (18, 19)), ('on', (20, 21))]","[('REINFORCE', (3, 4)), ('slightly better', (5, 7)), ('heuristic loss', (9, 11)), ('reward rescaling', (13, 15)), ('significantly better', (16, 18)), ('both', (19, 20)), ('both languages', (21, 23))]",[],[],[],[]
results,"The reward - rescaled max - margin loss combines the best of both worlds , resulting in superior performance .","[('combines', (8, 9)), ('resulting in', (15, 17))]","[('reward - rescaled max - margin loss', (1, 8)), ('best of both worlds', (10, 14)), ('superior performance', (17, 19))]",[],[],[],[]
research-problem,Higher - order Coreference Resolution with Coarse - to - fine Inference,[],"[('Higher - order Coreference Resolution', (0, 5))]",[],[],[],[]
approach,We introduce an approximation of higher - order inference that uses the span - ranking architecture from in an iterative manner .,"[('introduce', (1, 2)), ('of', (4, 5)), ('uses', (10, 11)), ('in', (17, 18))]","[('approximation', (3, 4)), ('higher - order inference', (5, 9)), ('span - ranking architecture', (12, 16)), ('iterative manner', (19, 21))]",[],[],[],[]
approach,"At each iteration , the antecedent distribution is used as an attention mechanism to optionally update existing span representations , enabling later corefer - Speaker 1 : U m and think that is what 's - Go ahead Linda .","[('At', (0, 1)), ('used as', (8, 10)), ('to optionally update', (13, 16)), ('enabling', (20, 21))]","[('each iteration', (1, 3)), ('antecedent distribution', (5, 7)), ('attention mechanism', (11, 13)), ('existing span representations', (16, 19)), ('later corefer', (21, 23))]",[],[],[],[]
approach,"To alleviate computational challenges from this higher - order inference , we also propose a coarseto - fine approach that is learned with a single endto - end objective .","[('propose', (13, 14)), ('learned with', (21, 23))]","[('coarseto - fine approach', (15, 19)), ('single endto - end objective', (24, 29))]",[],[],[],[]
approach,We introduce a less accurate but more efficient coarse factor in the pairwise scoring function .,"[('introduce', (1, 2)), ('in', (10, 11))]","[('less accurate but more efficient coarse factor', (3, 10)), ('pairwise scoring function', (12, 15))]",[],[],[],[]
approach,This additional factor enables an extra pruning step during inference that reduces the number of antecedents considered by the more accurate but inefficient fine factor .,"[('enables', (3, 4)), ('during', (8, 9)), ('reduces', (11, 12)), ('considered by', (16, 18))]","[('extra pruning step', (5, 8)), ('inference', (9, 10)), ('number of antecedents', (13, 16)), ('more accurate but inefficient fine factor', (19, 25))]",[],[],[],[]
approach,"Intuitively , the model cheaply computes a rough sketch of likely antecedents before applying a more expensive scoring function .","[('cheaply computes', (4, 6)), ('of', (9, 10)), ('before applying', (12, 14))]","[('rough sketch', (7, 9)), ('likely antecedents', (10, 12)), ('more expensive scoring function', (15, 19))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"The baseline relative to our contributions is the span - ranking model from augmented with both ELMo and hyperparameter tuning , which achieves 72.3 F1 .","[('is', (6, 7)), ('augmented with', (13, 15)), ('achieves', (22, 23))]","[('span - ranking model', (8, 12)), ('ELMo and hyperparameter tuning', (16, 20)), ('72.3 F1', (23, 25))]",[],[],[],[]
results,"Our full approach achieves 73.0 F1 , setting a new state of the art for coreference resolution .","[('achieves', (3, 4)), ('setting', (7, 8)), ('for', (14, 15))]","[('Our full approach', (0, 3)), ('73.0 F1', (4, 6)), ('coreference resolution', (15, 17))]",[],[],[],[]
results,"Despite using far less computation , it outperforms the baseline because the coarse scores s c ( i , j ) can be computed for all antecedents , enabling the model to potentially predict a coreference link between any two spans in the document .","[('outperforms', (7, 8))]","[('baseline', (9, 10))]",[],[],[],[]
results,"As a result , we observe a much higher recall when adopting the coarse - to - fine approach .","[('observe', (5, 6)), ('when adopting', (10, 12))]","[('much higher recall', (7, 10)), ('coarse - to - fine approach', (13, 19))]",[],[],[],[]
results,We also observe further improvement by including the second - order inference ( Section 3 ) .,"[('observe', (2, 3)), ('by', (5, 6)), ('including', (6, 7))]","[('further improvement', (3, 5)), ('second - order inference', (8, 12))]",[],[],[],[]
research-problem,A Mention - Ranking Model for Abstract Anaphora Resolution,[],"[('Abstract Anaphora Resolution', (6, 9))]",[],[],[],[]
research-problem,"Current research in anaphora ( or coreference ) resolution is focused on resolving noun phrases referring to concrete objects or entities in the real Leo Born , Juri Opitz and Anette Frank contributed equally to this work .",[],"[('anaphora ( or coreference ) resolution', (3, 9))]",[],[],[],[]
model,"Our model is inspired by the mention - ranking model for coreference resolution and combines it with a Siamese Net , for learning similarity between sentences .","[('inspired by', (3, 5)), ('for', (10, 11)), ('combines it with', (14, 17)), ('for learning', (21, 23))]","[('mention - ranking model', (6, 10)), ('coreference resolution', (11, 13)), ('Siamese Net', (18, 20)), ('similarity', (23, 24)), ('sentences', (25, 26))]",[],[],[],[]
model,"Given an anaphoric sentence ( AntecS in ( 1 ) ) and a candidate antecedent ( any constituent in a given context , e.g. being obsoleted by microprocessor - based machines in ( 1 ) ) , the LSTM - Siamese Net learns representations for the candidate and the anaphoric sentence in a shared space .","[('Given', (0, 1)), ('learns', (42, 43)), ('for', (44, 45)), ('in', (51, 52))]","[('anaphoric sentence', (2, 4)), ('candidate antecedent', (13, 15)), ('given context', (20, 22)), ('LSTM - Siamese Net', (38, 42)), ('representations', (43, 44)), ('candidate and the anaphoric sentence', (46, 51)), ('shared space', (53, 55))]",[],[],[],[]
model,These representations are combined into a joint representation used to calculate a score that characterizes the relation between them .,"[('combined into', (3, 5)), ('used to calculate', (8, 11)), ('characterizes', (14, 15))]","[('representations', (1, 2)), ('joint representation', (6, 8)), ('score', (12, 13)), ('relation', (16, 17))]",[],[],[],[]
model,The learned score is used to select the highest - scoring antecedent candidate for the given anaphoric sentence and hence its anaphor .,"[('for', (13, 14))]","[('learned score', (1, 3)), ('highest - scoring antecedent candidate', (8, 13)), ('given anaphoric sentence', (15, 18))]",[],[],[],[]
model,We consider one anaphor at a time and provide the embedding of the context of the anaphor and the embedding of the head of the anaphoric phrase to the input to characterize each individual anaphorsimilar to the encoding proposed by for individuating multiply occurring predicates in SRL .,"[('consider', (1, 2)), ('provide', (8, 9)), ('of', (11, 12)), ('of', (14, 15)), ('of', (20, 21)), ('to', (27, 28)), ('to characterize', (30, 32))]","[('one anaphor at a time', (2, 7)), ('embedding', (10, 11)), ('context', (13, 14)), ('anaphor', (16, 17)), ('embedding', (19, 20)), ('head of the anaphoric phrase', (22, 27)), ('input', (29, 30)), ('each individual anaphorsimilar', (32, 35)), ('SRL', (46, 47))]",[],[],[],[]
model,With deeper inspection we show that the model learns a relation between the anaphor in the anaphoric sentence and its antecedent .,"[('show', (4, 5)), ('learns', (8, 9)), ('between', (11, 12)), ('in', (14, 15))]","[('model', (7, 8)), ('relation', (10, 11)), ('anaphor', (13, 14)), ('anaphoric sentence', (16, 18)), ('antecedent', (20, 21))]",[],[],[],[]
model,It produces large amounts of instances and is easily adaptable to other languages .,"[('produces', (1, 2)), ('easily adaptable to', (8, 11))]","[('large amounts of instances', (2, 6)), ('other languages', (11, 13))]",[],[],[],[]
code,Our Tensor Flow 2 implementation of the model and scripts for data extraction are available at : https://github.com/amarasovic / neural-abstract-anaphora.,[],"[('https://github.com/amarasovic / neural-abstract-anaphora.', (17, 20))]",[],[],[],[]
experiments,Baselines and evaluation metrics,[],"[('Baselines and evaluation metrics', (0, 4))]",[],[],[],[]
baselines,"Additionally , we report the preceding sentence baseline ( PS BL ) that chooses the previous sentence for the antecedent and TAGbaseline ( TAG BL ) that randomly chooses a candidate with the constituent tag label in {S , VP , ROOT , SBAR } .","[('report', (3, 4)), ('chooses', (13, 14)), ('for', (17, 18)), ('randomly chooses', (27, 29)), ('with', (31, 32)), ('in', (36, 37))]","[('preceding sentence baseline ( PS BL )', (5, 12)), ('previous sentence', (15, 17)), ('antecedent', (19, 20)), ('TAGbaseline ( TAG BL )', (21, 26)), ('candidate', (30, 31)), ('constituent tag label', (33, 36)), ('{S , VP , ROOT , SBAR }', (37, 45))]",[],[],[],[]
hyperparameters,"Glo Ve word embeddings pre-trained on the Gigaword and Wikipedia , and did not fine - tune them .","[('pre-trained on', (4, 6))]","[('Glo Ve word embeddings', (0, 4)), ('Gigaword and Wikipedia', (7, 10))]",[],[],[],[]
hyperparameters,"Vocabulary was built from the words in the training data with frequency in { 3 , U ( 1 , 10 ) } , and OOV words were replaced with an UNK token .","[('built from', (2, 4)), ('in', (6, 7)), ('with', (10, 11)), ('in', (12, 13)), ('replaced with', (28, 30))]","[('Vocabulary', (0, 1)), ('words', (5, 6)), ('training data', (8, 10)), ('frequency', (11, 12)), ('{ 3 , U ( 1 , 10 ) }', (13, 23)), ('OOV words', (25, 27)), ('UNK token', (31, 33))]",[],[],[],[]
hyperparameters,"The size of the LSTMs hidden states was set to { 100 , qlog - U ( 30 , 150 ) } .","[('of', (2, 3)), ('set to', (8, 10))]","[('size', (1, 2)), ('LSTMs hidden states', (4, 7)), ('{ 100 , qlog - U ( 30 , 150 ) }', (10, 22))]",[],[],[],[]
hyperparameters,"We initialized the weight matrices of the LSTMs with random orthogonal matrices , all other weight matrices with the initialization proposed in .","[('initialized', (1, 2)), ('of', (5, 6)), ('with', (8, 9))]","[('weight matrices', (3, 5)), ('LSTMs', (7, 8)), ('random orthogonal matrices', (9, 12))]",[],[],[],[]
hyperparameters,The first feed - forward layer size is set to a value in Optimization .,"[('set to', (8, 10)), ('in', (12, 13))]","[('first feed - forward layer size', (1, 7)), ('value', (11, 12)), ('Optimization', (13, 14))]",[],[],[],[]
hyperparameters,"We trained our model in minibatches using Adam ( Kingma and Ba , 2015 ) with the learning rate of 10 ? 4 and maximal batch size 64 .","[('trained', (1, 2)), ('in', (4, 5)), ('using', (6, 7)), ('with', (15, 16)), ('of', (19, 20))]","[('our model', (2, 4)), ('minibatches', (5, 6)), ('Adam ( Kingma and Ba , 2015 )', (7, 15)), ('learning rate', (17, 19)), ('10 ? 4', (20, 23)), ('maximal batch size', (24, 27)), ('64', (27, 28))]",[],[],[],[]
hyperparameters,"We clip gradients by global norm , with a clipping value in { 1.0 , U ( 1 , 100 ) } .","[('clip', (1, 2)), ('by', (3, 4)), ('with', (7, 8)), ('in', (11, 12))]","[('gradients', (2, 3)), ('global norm', (4, 6)), ('clipping value', (9, 11)), ('{ 1.0 , U ( 1 , 100 ) }', (12, 22))]",[],[],[],[]
hyperparameters,We train for 10 epochs and choose the model that performs best on the devset .,"[('train for', (1, 3)), ('choose', (6, 7)), ('performs', (10, 11)), ('on', (12, 13))]","[('10 epochs', (3, 5)), ('model', (8, 9)), ('best', (11, 12)), ('devset', (14, 15))]",[],[],[],[]
hyperparameters,"We used the l 2 - regularization with ? ? { 10 ?5 , log - U (10 ?7 , 10 ?2 ) }.","[('used', (1, 2)), ('with', (7, 8))]","[('l 2 - regularization', (3, 7))]",[],[],[],[]
hyperparameters,"Dropout with a keep probability k p ? { 0.8 , U( 0.5 , 1.0 ) } was applied to the outputs of the LSTMs , both feed - forward layers and optionally to the input with k p ? U (0.8 , 1.0 ) .","[('with', (1, 2)), ('applied to', (18, 20)), ('of', (22, 23)), ('optionally to', (32, 34)), ('with', (36, 37))]","[('Dropout', (0, 1)), ('outputs', (21, 22)), ('LSTMs', (24, 25)), ('feed - forward layers', (27, 31)), ('input', (35, 36)), ('k p ? U (0.8 , 1.0 )', (37, 45))]",[],[],[],[]
results,"In terms of s@1 score , MR - LSTM outperforms both KZH13 's results and TAG BL without even necessitating HP tuning .","[('In terms of', (0, 3))]","[('s@1 score', (3, 5)), ('MR - LSTM', (6, 9)), ('outperforms', (9, 10)), (""KZH13 's results"", (11, 14)), ('TAG BL', (15, 17)), ('HP tuning', (20, 22))]",[],[],[],[]
results,"From we observe : ( 1 ) with HPs tuned on ARRAU - AA , we obtain results well beyond KZH13 , ( 2 ) all ablated model variants perform worse than the full model , ( 3 ) a large performance drop when omitting syntactic information ( tag , cut ) suggests that the model makes good use of it .","[('with', (7, 8)), ('tuned on', (9, 11)), ('obtain', (16, 17)), ('well beyond', (18, 20)), ('perform', (29, 30)), ('than', (31, 32)), ('when omitting', (43, 45))]","[('HPs', (8, 9)), ('ARRAU - AA', (11, 14)), ('results', (17, 18)), ('KZH13', (20, 21)), ('all ablated model variants', (25, 29)), ('worse', (30, 31)), ('full model', (33, 35)), ('large performance drop', (40, 43))]",[],[],[],[]
results,"Performance of 68.10 s@1 score indicates that the model is able to learn without syntactic guidance , contrary to the 19.68 s@1 score before tuning .","[('of', (1, 2)), ('indicates', (5, 6)), ('without', (13, 14))]","[('Performance', (0, 1)), ('68.10 s@1 score', (2, 5)), ('model', (8, 9)), ('syntactic guidance', (14, 16))]",[],[],[],[]
results,Results on the ARRAU corpus,[],"[('ARRAU corpus', (3, 5))]",[],[],[],[]
results,"The MR - LSTM is more successful in resolving nominal than pronominal anaphors , although the training data provides only pronominal ones .","[('in resolving', (7, 9))]","[('MR - LSTM', (1, 4)), ('more successful', (5, 7)), ('nominal', (9, 10))]",[],[],[],[]
results,"Moreover , for shell noun resolution in KZH13 's dataset , the MR - LSTM achieved s@1 scores in the range 76.09-93.14 , while the best variant of the model achieves 51.89 s@1 score for nominal anaphors in ARRAU - AA .","[('for', (2, 3)), ('in', (6, 7)), ('achieved', (15, 16)), ('in', (18, 19)), ('achieves', (30, 31)), ('for', (34, 35)), ('in', (37, 38))]","[('shell noun resolution', (3, 6)), (""KZH13 's dataset"", (7, 10)), ('MR - LSTM', (12, 15)), ('s@1 scores', (16, 18)), ('range', (20, 21)), ('76.09-93.14', (21, 22)), ('51.89 s@1 score', (31, 34)), ('nominal anaphors', (35, 37)), ('ARRAU - AA', (38, 41))]",[],[],[],[]
results,"This is what we can observe from row 2 vs. row 6 in Table 5 : the MR - LSTM without context embedding ( ctx ) achieves a comparable s@ 2 score with the variant that omits syntactic information , but better s@3 - 4 scores .","[('achieves', (26, 27)), ('with', (32, 33)), ('that omits', (35, 37))]","[('MR - LSTM without context embedding ( ctx )', (17, 26)), ('comparable s@ 2 score', (28, 32)), ('variant', (34, 35)), ('syntactic information', (37, 39)), ('better s@3 - 4 scores', (41, 46))]",[],[],[],[]
research-problem,Learning Global Features for Coreference Resolution,[],"[('Coreference Resolution', (4, 6))]",[],[],[],[]
research-problem,There is compelling evidence that coreference prediction would benefit from modeling global information about entity - clusters .,"[('benefit from', (8, 10)), ('about', (13, 14))]","[('coreference prediction', (5, 7)), ('modeling', (10, 11)), ('global information', (11, 13)), ('entity - clusters', (14, 17))]",[],[],[],[]
approach,"In this work , we posit that global context is indeed necessary for further improvements in coreference resolution , but argue that informative cluster , rather than mention , level features are very difficult to devise , limiting their effectiveness .","[('posit', (5, 6)), ('necessary for', (11, 13)), ('in', (15, 16))]","[('global context', (7, 9)), ('further improvements', (13, 15)), ('coreference resolution', (16, 18))]",[],[],[],[]
approach,"Accordingly , we instead propose to learn representations of mention clusters by embedding them sequentially using a recurrent neural network ( shown in Section 4 ) .","[('of', (8, 9)), ('by embedding them', (11, 14)), ('using', (15, 16))]","[('representations', (7, 8)), ('mention clusters', (9, 11)), ('sequentially', (14, 15)), ('recurrent neural network', (17, 20))]",[],[],[],[]
approach,"Our model has no manually defined cluster features , but instead learns a global representation from the individual mentions present in each cluster .","[('no', (3, 4)), ('learns', (11, 12)), ('from', (15, 16)), ('present in', (19, 21))]","[('manually defined cluster features', (4, 8)), ('global representation', (13, 15)), ('individual mentions', (17, 19)), ('each cluster', (21, 23))]",[],[],[],[]
approach,We incorporate these representations into a mention - ranking style coreference system .,"[('incorporate', (1, 2)), ('into', (4, 5))]","[('mention - ranking style coreference system', (6, 12))]",[],[],[],[]
approach,"The entire model , including the recurrent neural network and the mention - ranking sub-system , is trained end - to - end on the coreference task .","[('including', (4, 5)), ('trained', (17, 18)), ('on', (23, 24))]","[('recurrent neural network', (6, 9)), ('mention - ranking sub-system', (11, 15)), ('end - to - end', (18, 23)), ('coreference task', (25, 27))]",[],[],[],[]
approach,"We train the model as a local classifier with fixed context ( that is , as a history - based model ) .","[('train', (1, 2)), ('as', (4, 5)), ('with', (8, 9))]","[('model', (3, 4)), ('local classifier', (6, 8)), ('fixed context', (9, 11))]",[],[],[],[]
experimental-setup,"For training , we use document - size minibatches , which allows for efficient pre-computation of RNN states , and we minimize the loss described in Section 5 with AdaGrad ( after clipping LSTM gradients to lie ( elementwise ) in ( ?10 , 10 ) ) .","[('For', (0, 1)), ('use', (4, 5)), ('allows for', (11, 13)), ('of', (15, 16)), ('minimize', (21, 22)), ('with', (28, 29)), ('after clipping', (31, 33))]","[('training', (1, 2)), ('document - size minibatches', (5, 9)), ('efficient pre-computation', (13, 15)), ('RNN states', (16, 18)), ('loss', (23, 24)), ('AdaGrad', (29, 30)), ('LSTM gradients', (33, 35))]",[],[],[],[]
experimental-setup,"We find that the initial learning rate chosen for AdaGrad has a significant impact on results , and we choose learning rates for each layer out of { 0.1 , 0.02 , 0.01 , 0.002 , 0.001 } .","[('find', (1, 2)), ('chosen for', (7, 9)), ('on', (14, 15)), ('choose', (19, 20)), ('for', (22, 23)), ('out of', (25, 27))]","[('initial learning rate', (4, 7)), ('AdaGrad', (9, 10)), ('significant impact', (12, 14)), ('results', (15, 16)), ('learning rates', (20, 22)), ('each layer', (23, 25)), ('{ 0.1 , 0.02 , 0.01 , 0.002 , 0.001 }', (27, 38))]",[],[],[],[]
experimental-setup,"In experiments , we set ha ( x n ) , h c ( x n ) , and h ( m ) to be ? R 200 , and hp ( x n , y) ? R 700 .","[('set', (4, 5)), ('to be', (23, 25))]","[('ha ( x n ) , h c ( x n ) , and h ( m )', (5, 23)), ('? R 200', (25, 28)), ('hp ( x n , y)', (30, 36))]",[],[],[],[]
experimental-setup,"We use a single - layer LSTM ( without "" peep - hole "" connections ) , as implemented in the element - rnn library .","[('use', (1, 2)), ('without', (8, 9)), ('implemented in', (18, 20))]","[('single - layer LSTM', (3, 7)), ('element - rnn library', (21, 25))]",[],[],[],[]
experimental-setup,"For regularization , we apply Dropout with a rate of 0.4 before applying the linear weights u , and we also apply Dropout with a rate of 0.3 to the LSTM states before forming the dot -product scores .","[('For', (0, 1)), ('apply', (4, 5)), ('with', (6, 7)), ('of', (9, 10)), ('before applying', (11, 13)), ('apply', (21, 22)), ('with', (23, 24)), ('of', (26, 27)), ('to', (28, 29)), ('before forming', (32, 34))]","[('regularization', (1, 2)), ('Dropout', (5, 6)), ('rate', (8, 9)), ('0.4', (10, 11)), ('linear weights u', (14, 17)), ('Dropout', (22, 23)), ('rate', (25, 26)), ('0.3', (27, 28)), ('LSTM states', (30, 32)), ('dot -product scores', (35, 38))]",[],[],[],[]
code,Code for our system is available at https : //github.com/swiseman/nn_coref .,[],"[('https : //github.com/swiseman/nn_coref', (7, 10))]",[],[],[],[]
experimental-setup,"The system makes use of a GPU for training , and trains in about two hours .","[('makes use of', (2, 5)), ('for', (7, 8)), ('trains in', (11, 13))]","[('GPU', (6, 7)), ('training', (8, 9)), ('about two hours', (13, 16))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"We see a statistically significant improvement of over 0.8 Co NLL points over the previous state of the art , and the highest F 1 scores to date on all three CoNLL metrics .","[('see', (1, 2)), ('of', (6, 7)), ('over', (12, 13))]","[('statistically significant improvement', (3, 6)), ('over 0.8 Co NLL points', (7, 12)), ('previous state of the art', (14, 19))]",[],[],[],[]
results,"In we see that the RNN improves performance over all , with the most dramatic improve - ments on non-anaphoric pronouns , though errors are also decreased significantly for non-anaphoric nominal and proper mentions that follow at least one mention with the same head .","[('over all', (8, 10)), ('with', (11, 12)), ('on', (18, 19))]","[('RNN', (5, 6)), ('improves', (6, 7)), ('performance', (7, 8)), ('most dramatic improve - ments', (13, 18)), ('non-anaphoric pronouns', (19, 21))]",[],[],[],[]
results,"Importantly , the RNN performance is significantly better than that of the Avg baseline , which barely improves over mention - ranking , even with oracle history .","[('is', (5, 6)), ('than', (8, 9)), ('barely improves over', (16, 19))]","[('RNN performance', (3, 5)), ('significantly better', (6, 8)), ('Avg baseline', (12, 14)), ('mention - ranking', (19, 22)), ('oracle history', (25, 27))]",[],[],[],[]
research-problem,Learning Word Representations with Cross - Sentence Dependency for End - to - End Co -reference Resolution,[],"[('End - to - End Co -reference Resolution', (9, 17))]",[],[],[],[]
research-problem,"In this work , we present a word embedding model that learns cross - sentence dependency for improving end - to - end co-reference resolution ( E2E - CR ) .","[('present', (5, 6)), ('learns', (11, 12)), ('for improving', (16, 18))]","[('word embedding model', (7, 10)), ('cross - sentence dependency', (12, 16)), ('end - to - end co-reference resolution ( E2E - CR )', (18, 30))]",[],[],[],[]
research-problem,"While the traditional E2E - CR model generates word representations by running long short - term memory ( LSTM ) recurrent neural networks on each sentence of an input article or conversation separately , we propose linear sentence linking and attentional sentence linking models to learn crosssentence dependency .","[('by running', (10, 12)), ('propose', (35, 36)), ('to learn', (44, 46))]","[('attentional sentence linking models', (40, 44)), ('crosssentence dependency', (46, 48))]",[],[],[],[]
model,Co-reference resolution requires models to cluster mentions that refer to the same physical entities .,[],"[('Co-reference resolution', (0, 2))]",[],[],[],[]
model,"To solve the problem that traditional LSTM encoders , which treat the input sentences as a batch , lack an ability to capture cross - sentence dependency , and to avoid the time complexity and difficulties of training the model concatenating all input sentences , we propose a cross - sentence encoder for end - to - end co-reference ( E2E - CR ) .","[('propose', (46, 47)), ('for', (52, 53))]","[('cross - sentence encoder', (48, 52)), ('end - to - end co-reference ( E2E - CR )', (53, 64))]",[],[],[],[]
model,"Borrowing the idea of an external memory module from , an external memory block containing syntactic and semantic information from context sentences is added to the standard LSTM model .","[('containing', (14, 15)), ('from', (19, 20)), ('added to', (23, 25))]","[('external memory block', (11, 14)), ('syntactic and semantic information', (15, 19)), ('context sentences', (20, 22)), ('standard LSTM model', (26, 29))]",[],[],[],[]
model,"With this context memory block , the proposed model is able to encode input sentences as a batch , and also calculate the representations of input words by taking both target sentences and context sentences into consideration .","[('With', (0, 1)), ('able to encode', (10, 13)), ('as', (15, 16)), ('calculate', (21, 22)), ('of', (24, 25)), ('by taking', (27, 29))]","[('context memory block', (2, 5)), ('proposed model', (7, 9)), ('input sentences', (13, 15)), ('batch', (17, 18)), ('representations', (23, 24)), ('input words', (25, 27)), ('target sentences and context sentences', (30, 35)), ('into consideration', (35, 37))]",[],[],[],[]
hyperparameters,"In practice , the LSTM modules applied in our model have 200 output units .","[('applied in', (6, 8)), ('have', (10, 11))]","[('LSTM modules', (4, 6)), ('200 output units', (11, 14))]",[],[],[],[]
hyperparameters,"In ASL , we calculate cross - sentence dependency using a multilayer perceptron with one hidden layer consisting of 150 hidden units .","[('In', (0, 1)), ('calculate', (4, 5)), ('using', (9, 10)), ('with', (13, 14)), ('consisting of', (17, 19))]","[('ASL', (1, 2)), ('cross - sentence dependency', (5, 9)), ('multilayer perceptron', (11, 13)), ('one hidden layer', (14, 17)), ('150 hidden units', (19, 22))]",[],[],[],[]
hyperparameters,The initial learning rate is set as 0.001 and decays 0.001 % every 100 steps .,"[('set as', (5, 7)), ('decays', (9, 10)), ('every', (12, 13))]","[('initial learning rate', (1, 4)), ('0.001', (7, 8)), ('0.001 %', (10, 12)), ('100 steps', (13, 15))]",[],[],[],[]
hyperparameters,"The model is optimized with the Adam algorithm ( Kingma and Ba , 2014 ) .","[('optimized with', (3, 5))]","[('model', (1, 2)), ('Adam algorithm', (6, 8))]",[],[],[],[]
hyperparameters,We randomly select up to 40 continuous sentences for training if the input is too long .,"[('randomly select', (1, 3)), ('for', (8, 9)), ('if', (10, 11)), ('is', (13, 14))]","[('up to 40 continuous sentences', (3, 8)), ('training', (9, 10)), ('input', (12, 13)), ('too long', (14, 16))]",[],[],[],[]
results,Experiment Results and Discussion,[],[],[],[],[],[]
results,"Comparing with the baseline model that achieved 67.2 % F1 score , the ASL model improved the performance by 0.6 % and achieved 67.8 % average F1 .","[('Comparing with', (0, 2)), ('achieved', (6, 7)), ('improved', (15, 16)), ('by', (18, 19)), ('achieved', (22, 23))]","[('baseline model', (3, 5)), ('67.2 % F1 score', (7, 11)), ('ASL model', (13, 15)), ('performance', (17, 18)), ('0.6 %', (19, 21)), ('67.8 % average F1', (23, 27))]",[],[],[],[]
results,"show that the models that consider cross - sentence dependency significantly outperform the baseline model , which encodes each sentence from the input document separately .","[('show', (0, 1)), ('consider', (5, 6)), ('significantly outperform', (10, 12)), ('encodes', (17, 18)), ('from', (20, 21))]","[('models', (3, 4)), ('cross - sentence dependency', (6, 10)), ('baseline model', (13, 15)), ('each sentence', (18, 20)), ('input document', (22, 24))]",[],[],[],[]
results,"Experiments also indicated that the ASL model has better performance than the LSL model , since it summarizes extracts context information with an attention mechanism instead of simply viewing sentence - level embeddings .","[('indicated', (2, 3)), ('than', (10, 11))]","[('ASL model', (5, 7)), ('better performance', (8, 10)), ('LSL model', (12, 14))]",[],[],[],[]
research-problem,Coreference Resolution with Entity Equalization,[],"[('Coreference Resolution', (0, 2))]",[],[],[],[]
approach,"Here we propose an approach that provides an entity - level representation in a simple and intuitive manner , and also facilitates end - to - end optimization .","[('propose', (2, 3)), ('provides', (6, 7)), ('in', (12, 13)), ('facilitates', (21, 22))]","[('entity - level representation', (8, 12)), ('simple and intuitive manner', (14, 18)), ('end - to - end optimization', (22, 28))]",[],[],[],[]
approach,"Our "" Entity Equalization "" approach posits that each entity should be represented via the sum of its corresponding mention representations .","[('represented via', (12, 14))]","[('posits', (6, 7)), ('each entity', (8, 10)), ('corresponding mention representations', (18, 21))]",[],[],[],[]
approach,"Similar to recent coreference models , our approach uses contextual embeddings as input mention representations .","[('uses', (8, 9)), ('as', (11, 12))]","[('contextual embeddings', (9, 11)), ('input mention representations', (12, 15))]",[],[],[],[]
approach,"While previous approaches employed the ELMo model , we propose to use BERT embeddings , motivated by the impressive empirical performance of BERT on other tasks .",[],"[('BERT embeddings', (12, 14))]",[],[],[],[]
approach,We show that this can be done by using BERT in a fully convolutional manner .,"[('done by using', (6, 9)), ('in', (10, 11))]","[('BERT', (9, 10)), ('fully convolutional manner', (12, 15))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"Our baseline is the span - ranking model from with ELMo input features and second - order span representations , which achieves 73.0 % Avg.","[('is', (2, 3)), ('from with', (8, 10)), ('achieves', (21, 22))]","[('span - ranking model', (4, 8)), ('ELMo input features', (10, 13)), ('second - order span representations', (14, 19)), ('73.0 % Avg.', (22, 25))]",[],[],[],[]
results,F1 . Replacing the ELMo features with BERT features achieves 76. 25 % average F1 .,"[('Replacing', (2, 3)), ('with', (6, 7)), ('achieves', (9, 10))]","[('ELMo features', (4, 6)), ('BERT features', (7, 9)), ('76. 25 % average F1', (10, 15))]",[],[],[],[]
results,"Removing the second - order span - representations while using BERT features achieves 76.37 % F1 , achieving higher recall and lower precision on all evaluation metrics , while somewhat surprisingly being better over all .","[('Removing', (0, 1)), ('while using', (8, 10)), ('achieves', (12, 13)), ('achieving', (17, 18)), ('on', (23, 24))]","[('second - order span - representations', (2, 8)), ('BERT features', (10, 12)), ('76.37 % F1', (13, 16)), ('higher recall and lower precision', (18, 23)), ('all evaluation metrics', (24, 27))]",[],[],[],[]
results,"Replacing secondorder span representations with Entity Equalization achieves 76. 64 % average F1 , while also consistently achieving the highest F 1 score on all three evaluation metrics .","[('Replacing', (0, 1)), ('with', (4, 5)), ('achieves', (7, 8)), ('consistently achieving', (16, 18))]","[('secondorder span representations', (1, 4)), ('Entity Equalization', (5, 7)), ('76. 64 % average F1', (8, 13)), ('highest F 1 score', (19, 23))]",[],[],[],[]
results,"Our results set a new state of the art for coreference resolution , improving the previous state of the art by 3.6 % average F1 .","[('set', (2, 3)), ('for', (9, 10)), ('improving', (13, 14)), ('by', (20, 21))]","[('new state of the art', (4, 9)), ('coreference resolution', (10, 12)), ('previous state of the art', (15, 20)), ('3.6 % average F1', (21, 25))]",[],[],[],[]
research-problem,End - to - end Neural Coreference Resolution,"[('End - to - end', (0, 5))]","[('Neural Coreference Resolution', (5, 8))]",[],[],[],[]
research-problem,We introduce the first end - to - end coreference resolution model and show that it significantly outperforms all previous work without using a syntactic parser or handengineered mention detector .,"[('introduce', (1, 2)), ('show', (13, 14)), ('without using', (21, 23))]","[('first end - to - end coreference resolution model', (3, 12)), ('significantly outperforms', (16, 18))]",[],[],[],[]
model,We present the first state - of - the - art neural coreference resolution model that is learned end - toend given only gold mention clusters .,"[('present', (1, 2)), ('learned', (17, 18)), ('given', (21, 22))]","[('end - toend', (18, 21)), ('gold mention clusters', (23, 26))]",[],[],[],[]
model,"We demonstrate for the first time that these resources are not required , and in fact performance can be improved significantly without them , by training an end - to - end neural model that jointly learns which spans are entity mentions and how to best cluster them .","[('demonstrate', (1, 2)), ('improved', (19, 20)), ('by training', (24, 26))]","[('performance', (16, 17)), ('end - to - end neural model', (27, 34)), ('jointly learns', (35, 37)), ('entity mentions', (40, 42))]",[],[],[],[]
model,Our model reasons over the space of all spans up to a maximum length and directly optimizes the marginal likelihood of antecedent spans from gold coreference clusters .,"[('of', (6, 7)), ('up to', (9, 11)), ('directly optimizes', (15, 17)), ('of', (20, 21)), ('from', (23, 24))]","[('reasons', (2, 3)), ('space', (5, 6)), ('all spans', (7, 9)), ('maximum length', (12, 14)), ('marginal likelihood', (18, 20)), ('antecedent spans', (21, 23)), ('gold coreference clusters', (24, 27))]",[],[],[],[]
model,"It includes a span - ranking model that decides , for each span , which of the previous spans ( if any ) is a good antecedent .","[('includes', (1, 2)), ('decides', (8, 9)), ('for', (10, 11)), ('is', (23, 24))]","[('span - ranking model', (3, 7)), ('each span', (11, 13)), ('good antecedent', (25, 27))]",[],[],[],[]
model,"At the core of our model are vector embeddings representing spans of text in the document , which combine context - dependent boundary representations with a head - finding attention mechanism over the span .","[('are', (6, 7)), ('representing', (9, 10)), ('in', (13, 14)), ('combine', (18, 19)), ('with', (24, 25)), ('over', (31, 32))]","[('vector embeddings', (7, 9)), ('spans', (10, 11)), ('document', (15, 16)), ('context - dependent boundary representations', (19, 24)), ('head - finding attention mechanism', (26, 31)), ('span', (33, 34))]",[],[],[],[]
model,"The attention component is inspired by parser - derived head - word matching features from previous systems , but is less susceptible to cascading errors .","[('inspired by', (4, 6)), ('from', (14, 15)), ('less susceptible to', (20, 23))]","[('attention component', (1, 3)), ('parser - derived head - word matching features', (6, 14)), ('previous systems', (15, 17)), ('cascading errors', (23, 25))]",[],[],[],[]
experiments,Hyperparameters,[],"[('Hyperparameters', (0, 1))]",[],[],[],[]
hyperparameters,"The word embeddings area fixed concatenation of 300 - dimensional GloVe embeddings and 50 - dimensional embeddings from , both normalized to be unit vectors .","[('area', (3, 4)), ('of', (6, 7)), ('to be', (21, 23))]","[('word embeddings', (1, 3)), ('fixed concatenation', (4, 6)), ('300 - dimensional GloVe embeddings', (7, 12)), ('50 - dimensional embeddings', (13, 17)), ('normalized', (20, 21)), ('unit vectors', (23, 25))]",[],[],[],[]
hyperparameters,Outof - vocabulary words are represented by a vector of zeros .,"[('represented by', (5, 7)), ('of', (9, 10))]","[('Outof - vocabulary words', (0, 4)), ('vector', (8, 9)), ('zeros', (10, 11))]",[],[],[],[]
hyperparameters,"In the character CNN , characters are represented as learned 8 - dimensional embeddings .","[('In', (0, 1)), ('represented as', (7, 9))]","[('character CNN', (2, 4)), ('characters', (5, 6)), ('learned 8 - dimensional embeddings', (9, 14))]",[],[],[],[]
hyperparameters,"The convolutions have window sizes of 3 , 4 , and 5 characters , each consisting of 50 filters .","[('have', (2, 3)), ('of', (5, 6)), ('consisting of', (15, 17))]","[('convolutions', (1, 2)), ('window sizes', (3, 5)), ('3 , 4 , and 5 characters', (6, 13)), ('50 filters', (17, 19))]",[],[],[],[]
hyperparameters,The hidden states in the LSTMs have 200 dimensions .,"[('in', (3, 4)), ('have', (6, 7))]","[('hidden states', (1, 3)), ('LSTMs', (5, 6)), ('200 dimensions', (7, 9))]",[],[],[],[]
hyperparameters,Each feedforward neural network consists of two hidden layers with 150 dimensions and rectified linear units .,"[('consists of', (4, 6)), ('with', (9, 10))]","[('feedforward neural network', (1, 4)), ('two hidden layers', (6, 9)), ('150 dimensions', (10, 12)), ('rectified linear units', (13, 16))]",[],[],[],[]
hyperparameters,We use ADAM for learning with a minibatch size of 1 .,"[('use', (1, 2)), ('for', (3, 4)), ('with', (5, 6)), ('of', (9, 10))]","[('ADAM', (2, 3)), ('learning', (4, 5)), ('minibatch size', (7, 9)), ('1', (10, 11))]",[],[],[],[]
hyperparameters,The LSTM weights are initialized with random orthonormal matrices as described in .,"[('initialized with', (4, 6))]","[('LSTM weights', (1, 3)), ('random orthonormal matrices', (6, 9))]",[],[],[],[]
hyperparameters,We apply 0.5 dropout to the word embeddings and character CNN outputs .,"[('apply', (1, 2)), ('to', (4, 5))]","[('0.5 dropout', (2, 4)), ('word embeddings and character CNN outputs', (6, 12))]",[],[],[],[]
hyperparameters,We apply 0.2 dropout to all hidden layers and feature embeddings .,"[('apply', (1, 2)), ('to', (4, 5))]","[('0.2 dropout', (2, 4)), ('all hidden layers and feature embeddings', (5, 11))]",[],[],[],[]
hyperparameters,Dropout masks are shared across timesteps to preserve long - distance information as described in .,"[('shared across', (3, 5)), ('to preserve', (6, 8))]","[('Dropout masks', (0, 2)), ('timesteps', (5, 6)), ('long - distance information', (8, 12))]",[],[],[],[]
hyperparameters,The learning rate is decayed by 0.1 % every 100 steps .,"[('decayed by', (4, 6)), ('every', (8, 9))]","[('learning rate', (1, 3)), ('0.1 %', (6, 8)), ('100 steps', (9, 11))]",[],[],[],[]
hyperparameters,"The model is trained for up to 150 epochs , with early stopping based on the development set .","[('trained for', (3, 5)), ('with', (10, 11)), ('based on', (13, 15))]","[('up to 150 epochs', (5, 9)), ('early stopping', (11, 13)), ('development set', (16, 18))]",[],[],[],[]
hyperparameters,All code is implemented in Tensor - Flow and is publicly available .,"[('implemented in', (3, 5))]","[('Tensor - Flow', (5, 8))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,Coreference Results,[],"[('Coreference Results', (0, 2))]",[],[],[],[]
results,We outperform previous systems in all metrics .,"[('outperform', (1, 2)), ('in', (4, 5))]","[('previous systems', (2, 4)), ('all metrics', (5, 7))]",[],[],[],[]
results,"In particular , our single model improves the state - of - the - art average F1 by 1.5 , and our 5 - model ensemble improves it by 3.1 .","[('improves', (6, 7)), ('by', (17, 18)), ('by', (28, 29))]","[('our single model', (3, 6)), ('state - of - the - art average F1', (8, 17)), ('1.5', (18, 19)), ('our 5 - model ensemble', (21, 26)), ('improves', (26, 27)), ('3.1', (29, 30))]",[],[],[],[]
results,"The most significant gains come from improvements in recall , which is likely due to our end - toend setup .","[('come from', (4, 6)), ('in', (7, 8))]","[('most significant gains', (1, 4)), ('improvements', (6, 7)), ('recall', (8, 9))]",[],[],[],[]
ablation-analysis,"The distance between spans and the width of spans are crucial signals for coreference resolution , consistent with previous findings from other coreference models .","[('distance between', (1, 3)), ('are', (9, 10)), ('for', (12, 13))]","[('spans and the width of spans', (3, 9)), ('crucial signals', (10, 12)), ('coreference resolution', (13, 15))]",[],[],[],[]
ablation-analysis,They contribute 3.8 F1 to the final result .,"[('contribute', (1, 2)), ('to', (4, 5))]","[('3.8 F1', (2, 4)), ('final result', (6, 8))]",[],[],[],[]
ablation-analysis,"Since coreference decisions often involve rare named entities , we see a contribution of 0.9 F1 from character - level modeling .","[('see', (10, 11)), ('of', (13, 14)), ('from', (16, 17))]","[('contribution', (12, 13)), ('0.9 F1', (14, 16)), ('character - level modeling', (17, 21))]",[],[],[],[]
ablation-analysis,Ablations also show a 1.3 F1 degradation in performance without the attention mechanism for finding task - specific heads .,"[('show', (2, 3)), ('in', (7, 8)), ('without', (9, 10)), ('for finding', (13, 15))]","[('1.3 F1 degradation', (4, 7)), ('performance', (8, 9)), ('attention mechanism', (11, 13)), ('task - specific heads', (15, 19))]",[],[],[],[]
ablation-analysis,"As shown in , keeping mention candidates detected by the rule - based system over predicted parse trees ( Raghunathan et al. , 2010 ) degrades performance by 1 F1 .","[('keeping', (4, 5)), ('detected by', (7, 9)), ('over', (14, 15)), ('degrades', (25, 26)), ('by', (27, 28))]","[('mention candidates', (5, 7)), ('rule - based system', (10, 14)), ('predicted parse trees', (15, 18)), ('performance', (26, 27)), ('1 F1', (28, 30))]",[],[],[],[]
ablation-analysis,"With oracle mentions , we see an improvement of 17.5 F1 , suggesting an enormous room for improvement if our model can produce better mention scores and anaphoricity decisions .","[('With', (0, 1)), ('see', (5, 6)), ('of', (8, 9))]","[('oracle mentions', (1, 3)), ('improvement', (7, 8)), ('17.5 F1', (9, 11))]",[],[],[],[]
research-problem,BERT for Coreference Resolution : Baselines and Analysis,[],"[('Coreference Resolution', (2, 4))]",[],[],[],[]
model,"We fine - tune BERT to coreference resolution , achieving strong improvements on the GAP and benchmarks .","[('fine - tune', (1, 4)), ('to', (5, 6)), ('achieving', (9, 10))]","[('BERT', (4, 5)), ('coreference resolution', (6, 8)), ('strong improvements', (10, 12))]",[],[],[],[]
model,We present two ways of extending the c 2f - coref model in .,"[('extending', (5, 6))]","[('c 2f - coref model', (7, 12))]",[],[],[],[]
code,1 https://github.com/mandarjoshi90/coref,[],"[('https://github.com/mandarjoshi90/coref', (1, 2))]",[],[],[],[]
baselines,We extend the original Tensorflow implementations of c 2f - coref 3 and BERT .,"[('extend', (1, 2)), ('of', (6, 7))]","[('original Tensorflow implementations', (3, 6)), ('c 2f - coref', (7, 11)), ('BERT', (13, 14))]",[],[],[],[]
hyperparameters,"We fine tune all models on the OntoNotes English data for 20 epochs using a dropout of 0.3 , and learning rates of 1 10 ?5 and 2 10 ? 4 with linear decay for the BERT parameters and the task parameters respectively .","[('fine tune', (1, 3)), ('on', (5, 6)), ('for', (10, 11)), ('using', (13, 14)), ('of', (16, 17)), ('of', (22, 23)), ('with', (31, 32)), ('for', (34, 35))]","[('all models', (3, 5)), ('OntoNotes English data', (7, 10)), ('20 epochs', (11, 13)), ('dropout', (15, 16)), ('0.3', (17, 18)), ('learning rates', (20, 22)), ('1 10 ?5 and 2 10 ? 4', (23, 31)), ('linear decay', (32, 34)), ('BERT parameters', (36, 38))]",[],[],[],[]
hyperparameters,"We trained separate models with max segment len of 128 , 256 , 384 , and 512 ; the models trained on 128 and 384 word pieces performed the best for BERT - base and BERT - large respectively .","[('trained', (1, 2)), ('with', (4, 5)), ('of', (8, 9)), ('trained on', (20, 22)), ('performed', (27, 28)), ('for', (30, 31))]","[('separate models', (2, 4)), ('max segment len', (5, 8)), ('128 , 256 , 384 , and 512', (9, 17)), ('models', (19, 20)), ('128 and 384 word pieces', (22, 27)), ('best', (29, 30)), ('BERT - base and BERT - large', (31, 38))]",[],[],[],[]
results,Paragraph Level : GAP,[],"[('Paragraph Level : GAP', (0, 4))]",[],[],[],[]
results,Table 2 shows that BERT improves c 2 f - coref by 9 % and 11.5 % for the base and large models respectively .,"[('shows', (2, 3)), ('improves', (5, 6)), ('by', (11, 12)), ('for', (17, 18))]","[('BERT', (4, 5)), ('c 2 f - coref', (6, 11)), ('9 % and 11.5 %', (12, 17)), ('base and large models', (19, 23))]",[],[],[],[]
experiments,Document Level : OntoNotes,[],"[('OntoNotes', (3, 4))]",[],[],[],[]
results,shows that BERT - base offers an improvement of 0.9 % over the ELMo - based c2 fcoref model .,"[('shows', (0, 1)), ('offers', (5, 6)), ('of', (8, 9)), ('over', (11, 12))]","[('BERT - base', (2, 5)), ('improvement', (7, 8)), ('0.9 %', (9, 11)), ('ELMo - based c2 fcoref model', (13, 19))]",[],[],[],[]
results,"BERT - large , however , improves c 2 f - coref by the much larger margin of 3.9 % .","[('improves', (6, 7)), ('by', (12, 13)), ('of', (17, 18))]","[('BERT - large', (0, 3)), ('c 2 f - coref', (7, 12)), ('much larger margin', (14, 17)), ('3.9 %', (18, 20))]",[],[],[],[]
results,We also observe that the overlap variant offers no improvement over independent .,"[('observe', (2, 3)), ('offers', (7, 8)), ('over', (10, 11))]","[('overlap variant', (5, 7)), ('no improvement', (8, 10)), ('independent', (11, 12))]",[],[],[],[]
research-problem,A Hierarchical Model for Data - to - Text Generation,[],"[('Data - to - Text Generation', (4, 10))]",[],[],[],[]
research-problem,"Transcribing structured data into natural language descriptions has emerged as a challenging task , referred to as "" data - to - text "" .",[],"[('Transcribing structured data into natural language descriptions', (0, 7))]",[],[],[],[]
model,"To address these shortcomings , we propose a new structured - data encoder assuming that structures should be hierarchically captured .","[('propose', (6, 7)), ('assuming', (13, 14)), ('assuming that', (13, 15)), ('should be', (16, 18))]","[('new structured - data encoder', (8, 13)), ('structures', (15, 16)), ('hierarchically captured', (18, 20))]",[],[],[],[]
model,"Our contribution focuses on the encoding of the data - structure , thus the decoder is chosen to be a classical module as used in .","[('focuses on', (2, 4)), ('of', (6, 7)), ('chosen to be', (16, 19))]","[('encoding', (5, 6)), ('data - structure', (8, 11)), ('decoder', (14, 15)), ('classical module', (20, 22))]",[],[],[],[]
model,"- We model the general structure of the data using a two - level architecture , first encoding all entities on the basis of their elements , then encoding the data structure on the basis of its entities ; - We introduce the Transformer encoder in data - to - text models to ensure robust encoding of each element / entities in comparison to all others , no matter their initial positioning ; - We integrate a hierarchical attention mechanism to compute the hierarchical context fed into the decoder .","[('model', (2, 3)), ('of', (6, 7)), ('using', (9, 10)), ('first encoding', (16, 18)), ('on the basis of', (20, 24)), ('encoding', (28, 29)), ('on the basis of', (32, 36)), ('introduce', (41, 42)), ('in', (45, 46)), ('to ensure', (52, 54)), ('of', (56, 57)), ('in comparison to', (61, 64)), ('integrate', (75, 76)), ('to compute', (80, 82)), ('fed into', (85, 87))]","[('general structure', (4, 6)), ('data', (8, 9)), ('two - level architecture', (11, 15)), ('all entities', (18, 20)), ('elements', (25, 26)), ('data structure', (30, 32)), ('entities', (37, 38)), ('Transformer encoder', (43, 45)), ('data - to - text models', (46, 52)), ('robust encoding', (54, 56)), ('each element / entities', (57, 61)), ('all others', (64, 66)), ('hierarchical attention mechanism', (77, 80)), ('hierarchical context', (83, 85)), ('decoder', (88, 89))]",[],[],[],[]
experiments,Baselines,[],"[('Baselines', (0, 1))]",[],[],[],[]
baselines,Wiseman is a standard encoder - decoder system with copy mechanism .,"[('is', (1, 2)), ('with', (8, 9))]","[('Wiseman', (0, 1)), ('standard encoder - decoder system', (3, 8)), ('copy mechanism', (9, 11))]",[],[],[],[]
baselines,"Li is a standard encoder - decoder with a delayed copy mechanism : text is first generated with placeholders , which are replaced by salient records extracted from the table by a pointer network .","[('is', (1, 2)), ('with', (7, 8)), ('first generated with', (15, 18)), ('replaced by', (22, 24)), ('extracted from', (26, 28)), ('by', (30, 31))]","[('Li', (0, 1)), ('standard encoder - decoder', (3, 7)), ('delayed copy mechanism', (9, 12)), ('text', (13, 14)), ('placeholders', (18, 19)), ('salient records', (24, 26)), ('table', (29, 30)), ('pointer network', (32, 34))]",[],[],[],[]
baselines,"Puduppully - plan acts in two steps : a first standard encoder - decoder generates a plan , i.e. a list of salient records from the table ; a second standard encoder - decoder generates text from this plan .","[('acts in', (3, 5)), ('generates', (14, 15)), ('generates', (34, 35)), ('from', (36, 37))]","[('Puduppully - plan', (0, 3)), ('two steps', (5, 7)), ('first standard encoder - decoder', (9, 14)), ('plan', (16, 17)), ('salient records', (22, 24)), ('table', (26, 27)), ('second standard encoder - decoder', (29, 34)), ('text', (35, 36)), ('plan', (38, 39))]",[],[],[],[]
baselines,Puduppully - updt .,[],"[('Puduppully - updt', (0, 3))]",[],[],[],[]
baselines,"It consists in a standard encoder - decoder , with an added module aimed at updating record representations during the generation process .","[('consists in', (1, 3)), ('with', (9, 10)), ('aimed at updating', (13, 16)), ('during', (18, 19))]","[('standard encoder - decoder', (4, 8)), ('added module', (11, 13)), ('record representations', (16, 18)), ('generation process', (20, 22))]",[],[],[],[]
baselines,"At each decoding step , a gated recurrent network computes which records should be updated and what should be their new representation .","[('At', (0, 1)), ('should be', (12, 14))]","[('each decoding step', (1, 4)), ('gated recurrent network', (6, 9)), ('computes', (9, 10)), ('records', (11, 12)), ('updated', (14, 15)), ('new representation', (20, 22))]",[],[],[],[]
hyperparameters,The size of the record value embeddings and hidden layers of the Transformer encoders are both set to 300 .,"[('of', (2, 3)), ('of', (10, 11)), ('set to', (16, 18))]","[('size', (1, 2)), ('record value embeddings and hidden layers', (4, 10)), ('Transformer encoders', (12, 14)), ('300', (18, 19))]",[],[],[],[]
hyperparameters,We use dropout at rate 0.5 .,"[('use', (1, 2)), ('at', (3, 4))]","[('dropout', (2, 3)), ('rate 0.5', (4, 6))]",[],[],[],[]
hyperparameters,The models are trained with a batch size of 64 .,"[('trained with', (3, 5)), ('of', (8, 9))]","[('batch size', (6, 8)), ('64', (9, 10))]",[],[],[],[]
hyperparameters,"We follow the training procedure in and train the model for a fixed number of 25 K updates , and average the weights of the last 5 checkpoints ( at every 1 K updates ) to ensure more stability across runs .","[('follow', (1, 2)), ('train', (7, 8)), ('for', (10, 11)), ('average', (20, 21)), ('of', (23, 24)), ('to ensure', (35, 37)), ('across', (39, 40))]","[('training procedure', (3, 5)), ('model', (9, 10)), ('fixed number of 25 K updates', (12, 18)), ('weights', (22, 23)), ('last 5 checkpoints', (25, 28)), ('more stability', (37, 39)), ('runs', (40, 41))]",[],[],[],[]
hyperparameters,"All models were trained with the Adam optimizer ; the initial learning rate is 0.001 , and is reduced by half every 10 K steps .","[('trained with', (3, 5)), ('is', (13, 14)), ('reduced by', (18, 20)), ('every', (21, 22))]","[('Adam optimizer', (6, 8)), ('initial learning rate', (10, 13)), ('0.001', (14, 15)), ('half', (20, 21)), ('10 K steps', (22, 25))]",[],[],[],[]
hyperparameters,We used beam search with beam size of 5 during inference .,"[('used', (1, 2)), ('with', (4, 5)), ('of', (7, 8)), ('during', (9, 10))]","[('beam search', (2, 4)), ('beam size', (5, 7)), ('5', (8, 9)), ('inference', (10, 11))]",[],[],[],[]
hyperparameters,All the models are implemented in Open NMT - py .,"[('implemented in', (4, 6))]","[('Open NMT - py', (6, 10))]",[],[],[],[]
code,All code is available at https://github.com/KaijuML/data-to-text-hierarchical,[],"[('https://github.com/KaijuML/data-to-text-hierarchical', (5, 6))]",[],[],[],[]
ablation-analysis,"As shown in , we can see the lower results obtained by the Flat scenario compared to the other scenarios ( e.g. BLEU 16.7 vs. 17.5 for resp .","[('see', (6, 7)), ('obtained by', (10, 12)), ('compared to', (15, 17))]","[('lower results', (8, 10)), ('Flat scenario', (13, 15)), ('other scenarios', (18, 20))]",[],[],[],[]
ablation-analysis,"Second , the comparison between scenario Hierarchical - kv and Hierarchical -k shows that omitting entirely the influence of the record values in the attention mechanism is more effective : this last variant performs slightly better in all metrics excepted CS - R% , reinforcing our intuition that focusing on the structure modeling is an important part of data encoding as well as confirming the intuition explained in Section 3.3 : once an entity is selected , facts about this entity are relevant based on their key , not value which might add noise .","[('shows', (12, 13)), ('omitting', (14, 15)), ('entirely', (15, 16)), ('of', (18, 19)), ('in', (22, 23)), ('is', (26, 27)), ('performs', (33, 34)), ('in', (36, 37)), ('excepted', (39, 40))]","[('scenario Hierarchical - kv and Hierarchical -k', (5, 12)), ('influence', (17, 18)), ('record values', (20, 22)), ('attention mechanism', (24, 26)), ('more effective', (27, 29)), ('slightly better', (34, 36)), ('all metrics', (37, 39)), ('CS - R%', (40, 43))]",[],[],[],[]
ablation-analysis,"Our hierarchical models achieve significantly better scores on all metrics when compared to the flat architecture Wiseman , reinforcing the crucial role of structure in data semantics and saliency .","[('achieve', (3, 4)), ('on', (7, 8)), ('compared to', (11, 13))]","[('Our hierarchical models', (0, 3)), ('significantly better scores', (4, 7)), ('all metrics', (8, 10)), ('flat architecture Wiseman', (14, 17))]",[],[],[],[]
ablation-analysis,Results shows that our Flat scenario obtains a significant higher BLEU score ( 16.7 vs. 14.5 ) and generates fluent descriptions with accurate mentions ( RG - P % ) thatare also included in the gold descriptions ( CS - R% ) .,"[('shows', (1, 2)), ('obtains', (6, 7)), ('generates', (18, 19)), ('with', (21, 22)), ('included in', (32, 34))]","[('Flat scenario', (4, 6)), ('significant higher BLEU score (', (8, 13)), ('16.7 vs. 14.5 )', (13, 17)), ('fluent descriptions', (19, 21)), ('accurate mentions ( RG - P % )', (22, 30)), ('gold descriptions ( CS - R% )', (35, 42))]",[],[],[],[]
ablation-analysis,"Our hierarchical models outperform the two - step decoders of Li and Puduppully - plan on both BLEU and all qualitative metrics , showing that capturing structure in the encoding process is more effective that predicting a structure in the decoder ( i.e. , planning or templating ) .","[('outperform', (3, 4)), ('of', (9, 10)), ('on', (15, 16))]","[('Our hierarchical models', (0, 3)), ('two - step decoders', (5, 9)), ('Li and Puduppully - plan', (10, 15)), ('BLEU and all qualitative metrics', (17, 22))]",[],[],[],[]
research-problem,A Deep Ensemble Model with Slot Alignment for Sequence - to - Sequence Natural Language Generation,[],"[('Sequence - to - Sequence Natural Language Generation', (8, 16))]",[],[],[],[]
research-problem,Natural language generation lies at the core of generative dialogue systems and conversational agents .,[],"[('Natural language generation', (0, 3))]",[],[],[],[]
model,"Here we present a neural ensemble natural language generator , which we train and test on three large unaligned datasets in the restaurant , television , and laptop domains .","[('present', (2, 3)), ('train and test on', (12, 16)), ('in', (20, 21))]","[('neural ensemble natural language generator', (4, 9)), ('three large unaligned datasets', (16, 20)), ('restaurant , television , and laptop domains', (22, 29))]",[],[],[],[]
model,"We explore novel ways to represent the MR inputs , including novel methods for delexicalizing slots and their values , automatic slot alignment , as well as the use of a semantic reranker .","[('explore', (1, 2)), ('to represent', (4, 6)), ('including', (10, 11)), ('for delexicalizing', (13, 15))]","[('novel ways', (2, 4)), ('MR inputs', (7, 9)), ('novel methods', (11, 13)), ('automatic slot alignment', (20, 23)), ('semantic reranker', (31, 33))]",[],[],[],[]
experimental-setup,We built our ensemble model using the seq2seq framework for TensorFlow .,"[('built', (1, 2)), ('using', (5, 6)), ('for', (9, 10))]","[('ensemble model', (3, 5)), ('seq2seq framework', (7, 9)), ('TensorFlow', (10, 11))]",[],[],[],[]
experimental-setup,"Our individual LSTM models use a bidirectional LSTM encoder with 512 cells per layer , and the CNN models use a pooling encoder as in .","[('use', (4, 5)), ('with', (9, 10)), ('use', (19, 20))]","[('individual LSTM models', (1, 4)), ('bidirectional LSTM encoder', (6, 9)), ('512 cells per layer', (10, 14)), ('CNN models', (17, 19)), ('pooling encoder', (21, 23))]",[],[],[],[]
experimental-setup,The decoder in all models was a 4 - layer RNN decoder with 512 LSTM cells per layer and with attention .,"[('in', (2, 3)), ('was', (5, 6)), ('with', (12, 13)), ('with', (19, 20))]","[('decoder', (1, 2)), ('all models', (3, 5)), ('4 - layer RNN decoder', (7, 12)), ('512 LSTM cells per layer', (13, 18)), ('attention', (20, 21))]",[],[],[],[]
experiments,Experiments on the E2E Dataset,[],"[('E2E Dataset', (3, 5))]",[],[],[],[]
experiments,Automatic Metric Evaluation,[],"[('Automatic Metric Evaluation', (0, 3))]",[],[],[],[]
results,The results in show that both the LSTM and the CNN models clearly benefit from additional pseudo - samples in the training set .,"[('show', (3, 4)), ('benefit from', (13, 15)), ('in', (19, 20))]","[('LSTM and the CNN models', (7, 12)), ('additional pseudo - samples', (15, 19)), ('training set', (21, 23))]",[],[],[],[]
results,"On the official E2E test set , our ensemble model performs comparably to the baseline model , TGen , in terms of automatic metrics ) .","[('On', (0, 1)), ('performs', (10, 11)), ('to', (12, 13)), ('in terms of', (19, 22))]","[('official E2E test set', (2, 6)), ('our ensemble model', (7, 10)), ('comparably', (11, 12)), ('baseline model', (14, 16)), ('TGen', (17, 18)), ('automatic metrics', (22, 24))]",[],[],[],[]
experiments,Experiments on TV and Laptop Datasets,[],"[('TV and Laptop Datasets', (2, 6))]",[],[],[],[]
results,"As shows , our ensemble model performs competitively with the baseline on the TV dataset , and it outperforms it on the Laptop dataset by a wide margin .","[('performs', (6, 7)), ('with', (8, 9)), ('on', (11, 12)), ('on', (20, 21)), ('by', (24, 25))]","[('our ensemble model', (3, 6)), ('competitively', (7, 8)), ('baseline', (10, 11)), ('TV dataset', (13, 15)), ('outperforms', (18, 19)), ('Laptop dataset', (22, 24)), ('wide margin', (26, 28))]",[],[],[],[]
research-problem,Deep Graph Convolutional Encoders for Structured Data to Text Generation,[],"[('Structured Data to Text Generation', (5, 10))]",[],[],[],[]
research-problem,Most previous work on neural text generation from graph - structured data relies on standard sequence - to - sequence methods .,[],[],[],[],[],[]
research-problem,Most previous work casts the graph structured data to text generation task as a sequenceto - sequence problem .,"[('as', (12, 13))]","[('text generation', (9, 11)), ('sequenceto - sequence problem', (14, 18))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,WebNLG task,[],"[('WebNLG task', (0, 2))]",[],[],[],[]
results,"In this setting , the model with GCN encoder outperforms a strong baseline that employs the LSTM encoder , with .009 BLEU points .","[('with', (6, 7)), ('outperforms', (9, 10)), ('employs', (14, 15)), ('with', (19, 20))]","[('model', (5, 6)), ('GCN encoder', (7, 9)), ('strong baseline', (11, 13)), ('LSTM encoder', (16, 18)), ('.009 BLEU points', (20, 23))]",[],[],[],[]
results,The GCN model is also more stable than the baseline with a standard deviation of .004 vs . 010 .,"[('is', (3, 4)), ('than', (7, 8)), ('with', (10, 11)), ('of', (14, 15))]","[('GCN model', (1, 3)), ('more stable', (5, 7)), ('baseline', (9, 10)), ('standard deviation', (12, 14))]",[],[],[],[]
results,The GCN EC model outperforms PKUWRITER that uses an ensemble of 7 models and a further reinforcement learning step by .047 BLEU points ; and MELBOURNE by .014 BLEU points .,"[('outperforms', (4, 5)), ('uses', (7, 8)), ('by', (19, 20)), ('by', (26, 27))]","[('GCN EC model', (1, 4)), ('PKUWRITER', (5, 6)), ('ensemble of 7 models', (9, 13)), ('further reinforcement learning step', (15, 19)), ('.047 BLEU points', (20, 23)), ('MELBOURNE', (25, 26)), ('.014 BLEU points', (27, 30))]",[],[],[],[]
results,SR11 Deep task,[],"[('SR11 Deep task', (0, 3))]",[],[],[],[]
results,"We also compare the neural models with upper bound results on the same dataset by the pipeline model of The STUMBA - D and TBDIL model obtains respectively .794 and . 805 BLUE , outperforming the GCN - based model .","[('compare', (2, 3)), ('with', (6, 7)), ('on', (10, 11)), ('by', (14, 15)), ('obtains', (26, 27)), ('outperforming', (34, 35))]","[('neural models', (4, 6)), ('upper bound results', (7, 10)), ('same dataset', (12, 14)), ('pipeline model', (16, 18)), ('STUMBA - D and TBDIL model', (20, 26)), ('GCN - based model', (36, 40))]",[],[],[],[]
ablation-analysis,The first thing we notice is the importance of skip connections between GCN layers .,"[('of', (8, 9)), ('between', (11, 12))]","[('importance', (7, 8)), ('skip connections', (9, 11)), ('GCN layers', (12, 14))]",[],[],[],[]
ablation-analysis,Residual and dense connections lead to similar results .,"[('lead to', (4, 6))]","[('Residual and dense connections', (0, 4)), ('similar results', (6, 8))]",[],[],[],[]
ablation-analysis,"Dense connections ( Table 4 ( SIZE ) ) produce models bigger , but slightly less accurate , than residual connections .","[('produce', (9, 10)), ('than', (18, 19))]","[('Dense connections', (0, 2)), ('models', (10, 11)), ('residual connections', (19, 21))]",[],[],[],[]
research-problem,Pragmatically Informative Text Generation,[],"[('Pragmatically Informative Text Generation', (0, 4))]",[],[],[],[]
research-problem,Computational approaches to pragmatics cast language generation and interpretation as gametheoretic or Bayesian inference procedures .,"[('cast', (4, 5)), ('as', (9, 10))]","[('language generation and interpretation', (5, 9))]",[],[],[],[]
approach,"Our work builds on a line of learned Rational Speech Acts ( RSA ) models , in which generated strings are selected to optimize the behav - Human - written A cheap coffee shop in riverside with a 5 out of 5 customer rating is Fitzbillies .","[('builds on', (2, 4)), ('with', (36, 37))]","[('learned Rational Speech Acts ( RSA ) models', (7, 15)), ('generated strings', (18, 20)), ('selected', (21, 22)), ('behav', (25, 26)), ('5 out of 5 customer rating', (38, 44)), ('Fitzbillies', (45, 46))]",[],[],[],[]
approach,"The canonical presentation of the RSA framework ( Frank and Goodman , 2012 ) is grounded in reference resolution : models of speakers attempt to describe referents in the presence of distractors , and models of listeners attempt to resolve descriptors to referents .","[('of', (3, 4)), ('grounded in', (15, 17))]","[('canonical presentation', (1, 3)), ('RSA framework', (5, 7)), ('reference resolution', (17, 19)), ('referents', (26, 27)), ('distractors', (31, 32)), ('descriptors', (40, 41)), ('referents', (42, 43))]",[],[],[],[]
experiments,Abstractive Summarization,[],"[('Abstractive Summarization', (0, 2))]",[],[],[],[]
experiments,"The pragmatic methods obtain improvements of 0.2-0.5 in ROUGE scores and 0.2-1.8 METEOR over the base S 0 model , with the distractor - based approach SD 1 outperforming the reconstructorbased approach S R 1 .","[('obtain', (3, 4)), ('of', (5, 6)), ('in', (7, 8)), ('over', (13, 14)), ('with', (20, 21)), ('outperforming', (28, 29))]","[('pragmatic methods', (1, 3)), ('improvements', (4, 5)), ('0.2-0.5', (6, 7)), ('ROUGE scores', (8, 10)), ('0.2-1.8 METEOR', (11, 13)), ('base S 0 model', (15, 19)), ('distractor - based approach SD 1', (22, 28)), ('reconstructorbased approach S R 1', (30, 35))]",[],[],[],[]
experiments,"SD 1 is strong across all metrics , obtaining results competitive to the best previous abstractive systems . ( b ) Coverage ratios by attribute type ( columns ) for the base model S0 , and for the pragmatic system SD 1 when constructing the distractor by masking the specified attribute ( rows ) .","[('is', (2, 3)), ('across', (4, 5)), ('obtaining', (8, 9)), ('competitive to', (10, 12)), ('for', (29, 30)), ('for', (36, 37)), ('when constructing', (42, 44)), ('by masking', (46, 48))]","[('SD 1', (0, 2)), ('strong', (3, 4)), ('all metrics', (5, 7)), ('results', (9, 10)), ('best previous abstractive systems', (13, 17)), ('Coverage ratios', (21, 23)), ('attribute type', (24, 26)), ('base model S0', (31, 34)), ('pragmatic system SD 1', (38, 42)), ('distractor', (45, 46)), ('specified attribute', (49, 51))]",[],[],[],[]
research-problem,Data - to - Text Generation with Content Selection and Planning,[],"[('Data - to - Text Generation', (0, 6))]",[],[],[],[]
model,Our model learns a content plan from the input and conditions on the content plan in order to generate the output document ( see for an illustration ) .,"[('learns', (2, 3)), ('from', (6, 7)), ('on', (11, 12)), ('to generate', (17, 19))]","[('content plan', (4, 6)), ('input and conditions', (8, 11)), ('content plan', (13, 15)), ('output document', (20, 22))]",[],[],[],[]
model,"We train our model end - to - end using neural networks and evaluate its performance on ROTOWIRE , a recently released dataset which contains statistics of NBA basketball games paired with human - written summaries ( see ) .","[('train', (1, 2)), ('using', (9, 10)), ('evaluate', (13, 14))]","[('end - to - end', (4, 9)), ('neural networks', (10, 12)), ('ROTOWIRE', (17, 18))]",[],[],[],[]
hyperparameters,"We used one - layer pointer networks during content planning , and two - layer LSTMs during text generation .","[('used', (1, 2)), ('during', (7, 8)), ('during', (16, 17))]","[('one - layer pointer networks', (2, 7)), ('content planning', (8, 10)), ('two - layer LSTMs', (12, 16)), ('text generation', (17, 19))]",[],[],[],[]
hyperparameters,Input feeding was employed for the text decoder .,"[('employed for', (3, 5))]","[('Input feeding', (0, 2)), ('text decoder', (6, 8))]",[],[],[],[]
hyperparameters,We applied dropout ) at a rate of 0.3 .,"[('applied', (1, 2)), ('at', (4, 5)), ('of', (7, 8))]","[('dropout', (2, 3)), ('rate', (6, 7)), ('0.3', (8, 9))]",[],[],[],[]
hyperparameters,"Models were trained for 25 epochs with the Adagrad optimizer ; the initial learning rate was 0.15 , learning rate decay was selected from { 0.5 , 0.97 } , and batch size was 5 .","[('trained for', (2, 4)), ('with', (6, 7)), ('was', (15, 16)), ('selected from', (22, 24))]","[('Models', (0, 1)), ('25 epochs', (4, 6)), ('Adagrad optimizer', (8, 10)), ('initial learning rate', (12, 15)), ('0.15', (16, 17)), ('learning rate decay', (18, 21)), ('{ 0.5 , 0.97 }', (24, 29)), ('batch size', (31, 33)), ('5', (34, 35))]",[],[],[],[]
hyperparameters,"For text decoding , we made use of BPTT ) and set the truncation size to 100 .","[('For', (0, 1)), ('made use of', (5, 8)), ('set', (11, 12)), ('to', (15, 16))]","[('text decoding', (1, 3)), ('BPTT', (8, 9)), ('truncation size', (13, 15)), ('100', (16, 17))]",[],[],[],[]
hyperparameters,We set the beam size to 5 during inference .,"[('set', (1, 2)), ('to', (5, 6)), ('during', (7, 8))]","[('beam size', (3, 5)), ('5', (6, 7)), ('inference', (8, 9))]",[],[],[],[]
hyperparameters,All models are implemented in Open NMT - py .,"[('implemented in', (3, 5))]","[('Open NMT - py', (5, 9))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"As can be seen , NCP improves upon vanilla encoderdecoder models ( ED + JC , ED + CC ) , irrespective of the copy mechanism being employed .","[('improves upon', (6, 8))]","[('NCP', (5, 6)), ('vanilla encoderdecoder models ( ED + JC , ED + CC )', (8, 20))]",[],[],[],[]
results,"In fact , NCP achieves comparable scores with either joint or conditional copy mechanism which indicates that it is the content planner which brings performance improvements .","[('achieves', (4, 5)), ('with', (7, 8))]","[('NCP', (3, 4)), ('comparable scores', (5, 7)), ('joint or conditional copy mechanism', (9, 14))]",[],[],[],[]
results,"Overall , NCP + CC achieves best content selection and content ordering scores in terms of BLEU .","[('achieves', (5, 6)), ('in terms of', (13, 16))]","[('NCP + CC', (2, 5)), ('best content selection and content ordering scores', (6, 13)), ('BLEU', (16, 17))]",[],[],[],[]
results,"Compared to the best reported system in Wiseman et al. , we achieve an absolute improvement of approximately 12 % in terms of relation generation ; content selection precision also improves by 5 % and recall by 15 % , content ordering increases by 3 % , and BLEU by 1.5 points .","[('Compared to', (0, 2)), ('achieve', (12, 13)), ('of', (16, 17)), ('in terms of', (20, 23)), ('improves by', (30, 32)), ('by', (31, 32)), ('by', (36, 37)), ('by', (49, 50))]","[('best reported system', (3, 6)), ('absolute improvement', (14, 16)), ('approximately 12 %', (17, 20)), ('12 %', (18, 20)), ('relation generation', (23, 25)), ('content selection precision', (26, 29)), ('improves', (30, 31)), ('5 %', (32, 34)), ('recall', (35, 36)), ('15 %', (37, 39)), ('content ordering', (40, 42)), ('increases', (42, 43)), ('3 %', (44, 46)), ('BLEU', (48, 49)), ('1.5 points', (50, 52))]",[],[],[],[]
results,"As far as the template - based system is concerned , we observe that it obtains low BLEU and CS precision but scores high on CS recall and RG metrics .","[('observe', (12, 13)), ('obtains', (15, 16)), ('on', (24, 25))]","[('low BLEU and CS precision', (16, 21)), ('scores', (22, 23)), ('CS recall and RG metrics', (25, 30))]",[],[],[],[]
research-problem,Step - by - Step : Separating Planning from Realization in Neural Data - to - Text Generation,[],"[('Neural Data - to - Text Generation', (11, 18))]",[],[],[],[]
research-problem,"Data - to - text generation can be conceptually divided into two parts : ordering and structuring the information ( planning ) , and generating fluent language describing the information ( realization ) .","[('ordering and structuring', (14, 17)), ('describing', (27, 28))]","[('Data - to - text generation', (0, 6)), ('planning', (20, 21)), ('generating', (24, 25)), ('fluent language', (25, 27)), ('information', (29, 30))]",[],[],[],[]
model,"Proposal we propose an explicit , symbolic , text planning stage , whose output is fed into a neural generation system .","[('propose', (2, 3)), ('fed into', (15, 17))]","[('explicit , symbolic , text planning stage', (4, 11)), ('output', (13, 14)), ('neural generation system', (18, 21))]",[],[],[],[]
model,The text planner determines the information structure and expresses it unambiguously - in our case as a sequence of ordered trees .,"[('determines', (3, 4)), ('expresses it', (8, 10))]","[('text planner', (1, 3)), ('information structure', (5, 7)), ('unambiguously', (10, 11)), ('sequence of ordered trees', (17, 21))]",[],[],[],[]
model,"Once the plan is determined , 2 a neural generation system is used to transform it into fluent , natural language text .","[('determined', (4, 5)), ('to transform', (13, 15))]","[('plan', (2, 3)), ('neural generation system', (8, 11)), ('fluent , natural language text', (17, 22))]",[],[],[],[]
code,We release our code and the corpus extended with matching plans in https://github.com/AmitMY/ chimera .,[],"[('https://github.com/AmitMY/ chimera', (12, 14))]",[],[],[],[]
baselines,"We compare to the best submissions in the WebNLG challenge : Melbourne , an end - to - end system that scored best on all categories in the automatic evaluation , and UPF - FORGe , a classic grammar - based NLG system that scored best in the human evaluation .","[('on', (23, 24)), ('in', (26, 27)), ('scored', (44, 45)), ('in', (46, 47))]","[('WebNLG challenge', (8, 10)), ('Melbourne', (11, 12)), ('end - to - end system', (14, 20)), ('scored', (21, 22)), ('best', (22, 23)), ('all categories', (24, 26)), ('automatic evaluation', (28, 30)), ('UPF - FORGe', (32, 35)), ('classic grammar - based NLG system', (37, 43)), ('best', (45, 46)), ('human evaluation', (48, 50))]",[],[],[],[]
baselines,"Additionally , we developed an end - to - end neural baseline which outperforms the WebNLG neural systems .","[('developed', (3, 4)), ('outperforms', (13, 14))]","[('end - to - end neural baseline', (5, 12)), ('WebNLG neural systems', (15, 18))]",[],[],[],[]
baselines,"It uses a set encoder , an LSTM decoder with attention , a copy - attention mechanism and a neural checklist model , as well as applying entity dropout .","[('uses', (1, 2)), ('with', (9, 10)), ('applying', (26, 27))]","[('set encoder', (3, 5)), ('LSTM decoder', (7, 9)), ('attention', (10, 11)), ('copy - attention mechanism', (13, 17)), ('neural checklist model', (19, 22)), ('entity dropout', (27, 29))]",[],[],[],[]
results,6 Experiments and Results,[],[],[],[],[],[]
results,Both the StrongNeural and BestPlan systems outperform all the WebNLG participating systems on all automatic metrics,"[('outperform', (6, 7)), ('on', (12, 13))]","[('StrongNeural and BestPlan systems', (2, 6)), ('all the WebNLG participating systems', (7, 12)), ('all automatic metrics', (13, 16))]",[],[],[],[]
research-problem,Copy Mechanism and Tailored Training for Character - based Data - to - text Generation,[],"[('Character - based Data - to - text Generation', (6, 15))]",[],[],[],[]
research-problem,"In the last few years , many different methods have been focusing on using deep recurrent neural networks for natural language generation .",[],"[('natural language generation', (19, 22))]",[],[],[],[]
model,"Moreover , since characters constitute the common "" building blocks "" of every text , it also allows a more general approach to text generation , enabling the possibility to exploit transfer learning for training .","[('constitute', (4, 5)), ('allows', (17, 18)), ('to', (22, 23))]","[('more general approach', (19, 22)), ('text generation', (23, 25))]",[],[],[],[]
model,"In order to give an original contribution to the field , in this paper we present a character - level sequence - to - sequence model with attention mechanism that results in a completely neural end - to - end architecture .","[('present', (15, 16)), ('with', (26, 27)), ('results in', (30, 32))]","[('character - level sequence - to - sequence model', (17, 26)), ('attention mechanism', (27, 29)), ('completely neural end - to - end architecture', (33, 41))]",[],[],[],[]
model,"In contrast to traditional word - based ones , it does not require delexicalization , tokenization nor lowercasing ; besides , according to our experiments it never hallucinates words , nor duplicates them .",[],"[('delexicalization', (13, 14)), ('tokenization', (15, 16)), ('lowercasing', (17, 18))]",[],[],[],[]
model,"As we will see , such an approach achieves rather interesting performance results and produces a vocabulary - free model that is inherently more general , as it does not depend on a specific domain 's set of terms , but rather on a general alphabet .","[('achieves', (8, 9)), ('produces', (14, 15)), ('inherently', (22, 23))]","[('rather interesting performance results', (9, 13)), ('vocabulary - free model', (16, 20)), ('more general', (23, 25))]",[],[],[],[]
model,"More specifically , our model shows two important features , with respect to the state - of - art architecture proposed by : ( i ) a character - wise copy mechanism , consisting in a soft switch between generation and copy mode , that disengages the model to learn rare and unhelpful self - correspondences , and ( ii ) a peculiar training procedure , which improves the internal representation capabilities , enhancing recall ; it consists in the exchange of encoder and decoder RNNs , ( GRUs As a further original contribution , we also introduce a new dataset , described in section 3.1 , whose particular structure allows to better highlight improvements in copying / recalling abilities with respect to character - based state - of - art approaches .","[('shows', (5, 6)), ('consisting in', (33, 35)), ('between', (38, 39)), ('to learn', (48, 50)), ('improves', (67, 68)), ('enhancing', (73, 74)), ('consists in', (77, 79))]","[('two important features', (6, 9)), ('state - of - art architecture', (14, 20)), ('character - wise copy mechanism', (27, 32)), ('soft switch', (36, 38)), ('generation and copy mode', (39, 43)), ('model', (47, 48)), ('rare and unhelpful self - correspondences', (50, 56)), ('peculiar training procedure', (62, 65)), ('internal representation capabilities', (69, 72)), ('recall', (74, 75)), ('exchange', (80, 81)), ('encoder and decoder RNNs', (82, 86))]",[],[],[],[]
experimental-setup,"We developed our system using the PyTorch framework 2 , release 0.4.1 3 .","[('developed', (1, 2)), ('using', (4, 5))]","[('our system', (2, 4)), ('PyTorch framework', (6, 8))]",[],[],[],[]
experimental-setup,"We minimize the negative log - likelihood loss using teacher forcing and Adam , the latter being an optimizer that computes individual adaptive learning rates .","[('minimize', (1, 2)), ('using', (8, 9))]","[('negative log - likelihood loss', (3, 8)), ('teacher forcing and Adam', (9, 13))]",[],[],[],[]
experiments,Results and Discussion,[],[],[],[],[],[]
results,"A first interesting result is that our model EDA_CS always obtains higher metric values with respect to TGen on the Hotel and Restaurant datasets , and three out of five higher metrics values on the E2E dataset .","[('with respect to', (14, 17)), ('on', (18, 19)), ('on', (33, 34))]","[('our model EDA_CS', (6, 9)), ('higher metric values', (11, 14)), ('TGen', (17, 18)), ('Hotel and Restaurant datasets', (20, 24)), ('three out of five higher metrics values', (26, 33)), ('E2E dataset', (35, 37))]",[],[],[],[]
results,"However , in the case of E2E + , TGen achieves three out of five higher metrics values .","[('in the case of', (2, 6)), ('achieves', (10, 11))]","[('E2E +', (6, 8)), ('TGen', (9, 10)), ('three out of five higher metrics values', (11, 18))]",[],[],[],[]
results,"A more surprising result is that the approach EDA_CS TL allows to obtain better performance with respect to training EDA_CS in the standard way on the Hotel and Restaurant datasets ( for the majority of metrics ) ; on E2E , EDA_CS TL outperforms EDA_CS only in one case ( i.e. meteor metric ) .","[('allows to obtain', (10, 13)), ('with respect to', (15, 18)), ('in', (20, 21)), ('on', (24, 25)), ('on', (38, 39))]","[('approach', (7, 8)), ('better performance', (13, 15)), ('training EDA_CS', (18, 20)), ('standard way', (22, 24)), ('Hotel and Restaurant datasets', (26, 30)), ('E2E', (39, 40)), ('outperforms', (43, 44)), ('EDA_CS', (44, 45))]",[],[],[],[]
results,"Moreover , EDA_CS TL shows a bleu increment of at least 14 % with respect to TGen 's score when compared to both Hotel and Restaurant datasets .","[('shows', (4, 5)), ('of', (8, 9)), ('with respect to', (13, 16)), ('compared to', (20, 22))]","[('EDA_CS TL', (2, 4)), ('bleu increment', (6, 8)), ('at least 14 %', (9, 13)), (""TGen 's score"", (16, 19)), ('Hotel and Restaurant datasets', (23, 27))]",[],[],[],[]
results,"Finally , the baseline model , EDA , is largely outperformed by all other examined methods .","[('largely outperformed by', (9, 12))]","[('baseline model', (3, 5)), ('EDA', (6, 7)), ('all other examined methods', (12, 16))]",[],[],[],[]
research-problem,An improved neural network model for joint POS tagging and dependency parsing,[],"[('joint POS tagging and dependency parsing', (6, 12))]",[],[],[],[]
research-problem,We propose a novel neural network model for joint part - of - speech ( POS ) tagging and dependency parsing .,"[('propose', (1, 2)), ('for', (7, 8))]","[('novel neural network model', (3, 7)), ('joint part - of - speech ( POS ) tagging and dependency parsing', (8, 21))]",[],[],[],[]
code,Our code is available together with all pretrained models at : https://github.com/datquocnguyen/jPTDP .,[],"[('https://github.com/datquocnguyen/jPTDP', (11, 12))]",[],[],[],[]
research-problem,"Dependency parsing - a key research topic in natural language processing ( NLP ) in the last decade ) - has also been demonstrated to be extremely useful in many applications such as relation extraction , semantic parsing and machine translation ) .",[],"[('Dependency parsing', (0, 2))]",[],[],[],[]
model,"In this paper , we present a novel neural network - based model for jointly learning POS tagging and dependency paring .","[('present', (5, 6)), ('for', (13, 14))]","[('novel neural network - based model', (7, 13)), ('jointly learning', (14, 16)), ('POS tagging and dependency paring', (16, 21))]",[],[],[],[]
model,Our joint model extends the well - known BIST graph - based dependency parser with an additional lower - level BiLSTM - based tagging component .,"[('extends', (3, 4)), ('with', (14, 15))]","[('joint model', (1, 3)), ('well - known BIST graph - based dependency parser', (5, 14)), ('additional lower - level BiLSTM - based tagging component', (16, 25))]",[],[],[],[]
experimental-setup,Our jPTDP v 2.0 is implemented using DYNET v2.0 with a fixed random seed .,"[('implemented using', (5, 7)), ('with', (9, 10))]","[('jPTDP v 2.0', (1, 4)), ('DYNET v2.0', (7, 9)), ('fixed random seed', (11, 14))]",[],[],[],[]
experimental-setup,"Word embeddings are initialized either randomly or by pre-trained word vectors , while character and POS tag embeddings are randomly initialized .",[],"[('Word embeddings', (0, 2)), ('pre-trained word vectors', (8, 11)), ('character and POS tag embeddings', (13, 18)), ('randomly initialized', (19, 21))]",[],[],[],[]
experimental-setup,We apply dropout with a 67 % keep probability to the inputs of BiLSTMs and MLPs .,"[('apply', (1, 2)), ('with', (3, 4)), ('to', (9, 10)), ('of', (12, 13))]","[('dropout', (2, 3)), ('67 % keep probability', (5, 9)), ('inputs', (11, 12)), ('BiLSTMs and MLPs', (13, 16))]",[],[],[],[]
experimental-setup,"Following and , we also apply word dropout to learn an embedding for unknown words : we replace each word token w appearing # ( w ) times in the training set with a special "" unk "" symbol with probability punk ( w ) = 0.25 0.25 + # ( w ) .","[('apply', (5, 6)), ('to learn', (8, 10)), ('for', (12, 13)), ('replace', (17, 18)), ('in', (28, 29)), ('with', (32, 33)), ('with', (39, 40))]","[('word dropout', (6, 8)), ('embedding', (11, 12)), ('unknown words', (13, 15)), ('each word token w', (18, 22)), ('training set', (30, 32)), ('special "" unk "" symbol', (34, 39)), ('probability punk ( w )', (40, 45))]",[],[],[],[]
experimental-setup,"We optimize the objective loss using Adam ( Kingma and Ba , 2014 ) with an initial learning rate at 0.001 and no mini-batches .","[('optimize', (1, 2)), ('using', (5, 6)), ('with', (14, 15)), ('at', (19, 20)), ('no', (22, 23))]","[('objective loss', (3, 5)), ('Adam ( Kingma and Ba , 2014 )', (6, 14)), ('initial learning rate', (16, 19)), ('0.001', (20, 21)), ('mini-batches', (23, 24))]",[],[],[],[]
experimental-setup,"For all experiments presented in this paper , we use 100 - dimensional word embeddings , 50 - dimensional character embeddings and 100 dimensional POS tag embeddings .","[('use', (9, 10))]","[('100 - dimensional word embeddings', (10, 15)), ('50 - dimensional character embeddings', (16, 21)), ('100 dimensional POS tag embeddings', (22, 27))]",[],[],[],[]
experimental-setup,We also fix the number of hidden nodes in MLPs at 100 .,"[('fix', (2, 3)), ('in', (8, 9)), ('at', (10, 11))]","[('number of hidden nodes', (4, 8)), ('MLPs', (9, 10)), ('100', (11, 12))]",[],[],[],[]
experiments,"Clearly , our model produces very competitive parsing results .","[('produces', (4, 5))]","[('our model', (2, 4)), ('very competitive parsing results', (5, 9))]",[],[],[],[]
experiments,"In particular , our model obtains a UAS score at 94.51 % and a LAS score at 92.87 % which are about 1.4 % and 1.9 % absolute higher than UAS and LAS scores of the BIST graph - based model , respectively .","[('obtains', (5, 6)), ('at', (9, 10)), ('at', (16, 17)), ('than', (29, 30)), ('of', (34, 35))]","[('UAS score', (7, 9)), ('94.51 %', (10, 12)), ('LAS score', (14, 16)), ('92.87 %', (17, 19)), ('UAS and LAS scores', (30, 34)), ('BIST graph - based model', (36, 41))]",[],[],[],[]
experiments,We achieve 0.9 % lower parsing scores than the state - of - the - art dependency parser of .,"[('achieve', (1, 2)), ('than', (7, 8))]","[('0.9 % lower parsing scores', (2, 7)), ('state - of - the - art dependency parser', (9, 18))]",[],[],[],[]
experiments,"We also obtain a state - of - the - art POS tagging accuracy at 97.97 % on the test Section 23 , which is about 0.4 + % higher than those by , and .","[('obtain', (2, 3)), ('at', (14, 15)), ('on', (17, 18))]","[('state - of - the - art POS tagging accuracy', (4, 14)), ('97.97 %', (15, 17))]",[],[],[],[]
research-problem,Simple and Accurate Dependency Parsing Using Bidirectional LSTM Feature Representations,[],"[('Dependency Parsing', (3, 5))]",[],[],[],[]
approach,"Our proposal ( Section 3 ) is centered around BiRNNs , and more specifically BiLSTMs , which are strong and trainable sequence models ( see Section 2.3 ) .","[('centered around', (7, 9)), ('more specifically', (12, 14)), ('are', (17, 18))]","[('BiRNNs', (9, 10)), ('BiLSTMs', (14, 15)), ('strong and trainable sequence models', (18, 23))]",[],[],[],[]
approach,"We represent each word by its BiLSTM encoding , and use a concatenation of a minimal set of such BiLSTM encodings as our feature function , which is then passed to a non-linear scoring function ( multi - layer perceptron ) .","[('represent', (1, 2)), ('by', (4, 5)), ('use', (10, 11)), ('of', (13, 14)), ('minimal set of', (15, 18)), ('as', (21, 22)), ('passed to', (29, 31))]","[('each word', (2, 4)), ('BiLSTM encoding', (6, 8)), ('concatenation', (12, 13)), ('feature function', (23, 25)), ('non-linear scoring function ( multi - layer perceptron )', (32, 41))]",[],[],[],[]
approach,"Crucially , the BiLSTM is trained with the rest of the parser in order to learn a good feature representation for the parsing problem .","[('trained with', (5, 7)), ('to learn', (14, 16)), ('for', (20, 21))]","[('BiLSTM', (3, 4)), ('rest of the parser', (8, 12)), ('good feature representation', (17, 20)), ('parsing problem', (22, 24))]",[],[],[],[]
approach,"We demonstrate the effectiveness of the approach by using the BiLSTM feature extractor in two parsing architectures , transition - based ( Section 4 ) as well as a graph - based ( Section 5 ) .","[('demonstrate', (1, 2)), ('in', (13, 14))]","[('effectiveness', (3, 4)), ('BiLSTM feature extractor', (10, 13)), ('two parsing architectures', (14, 17)), ('transition - based', (18, 21)), ('graph - based', (29, 32))]",[],[],[],[]
approach,"In the graphbased parser , we jointly train a structured - prediction model on top of a BiLSTM , propagating errors from the structured objective all the way back to the BiLSTM feature - encoder .","[('In', (0, 1)), ('jointly train', (6, 8)), ('on top of', (13, 16)), ('propagating', (19, 20)), ('from', (21, 22))]","[('graphbased parser', (2, 4)), ('structured - prediction model', (9, 13)), ('BiLSTM', (17, 18)), ('errors', (20, 21)), ('structured objective', (23, 25)), ('BiLSTM feature - encoder', (31, 35))]",[],[],[],[]
hyperparameters,"The parsers are implemented in python , using the PyCNN toolkit 11 for neural network training .","[('implemented in', (3, 5)), ('using', (7, 8)), ('for', (12, 13))]","[('parsers', (1, 2)), ('python', (5, 6)), ('PyCNN toolkit', (9, 11)), ('neural network training', (13, 16))]",[],[],[],[]
code,The code is available at the github repository https://github.com/elikip / bist -parser .,[],"[('https://github.com/elikip / bist -parser', (8, 12))]",[],[],[],[]
hyperparameters,"We use the LSTM variant implemented in PyCNN , and optimize using the Adam optimizer .","[('use', (1, 2)), ('implemented in', (5, 7)), ('optimize using', (10, 12)), ('using', (11, 12))]","[('LSTM variant', (3, 5)), ('PyCNN', (7, 8)), ('optimize', (10, 11)), ('Adam optimizer', (13, 15))]",[],[],[],[]
results,"It is clear that our parsers are very competitive , despite using very simple parsing architectures and minimal feature extractors .","[('clear that', (2, 4)), ('are', (6, 7))]","[('our parsers', (4, 6)), ('very competitive', (7, 9))]",[],[],[],[]
results,"When not using external embeddings , the first - order graph - based parser with 2 features outperforms all other systems thatare not using external resources , including the third - order TurboParser .","[('not using', (1, 3)), ('with', (14, 15)), ('thatare not using', (21, 24)), ('including', (27, 28))]","[('external embeddings', (3, 5)), ('first - order graph - based parser', (7, 14)), ('2 features', (15, 17)), ('outperforms', (17, 18)), ('all other systems', (18, 21)), ('external resources', (24, 26)), ('third - order TurboParser', (29, 33))]",[],[],[],[]
results,"The greedy transition based parser with 4 features also matches or outperforms most other parsers , including the beam - based transition parser with heavily engineered features of and the Stack - LSTM parser of , as well as the same parser when trained using a dynamic oracle .","[('with', (5, 6)), ('matches or outperforms', (9, 12)), ('including', (16, 17)), ('with', (23, 24)), ('trained using', (43, 45))]","[('greedy transition based parser', (1, 5)), ('4 features', (6, 8)), ('most other parsers', (12, 15)), ('beam - based transition parser', (18, 23)), ('heavily engineered features', (24, 27)), ('Stack - LSTM parser', (30, 34)), ('same parser', (40, 42)), ('dynamic oracle', (46, 48))]",[],[],[],[]
results,Moving from the simple ( 4 features ) to the extended ( 11 features ) feature set leads to some gains in accuracy for both English and Chinese .,"[('Moving from', (0, 2)), ('to', (8, 9)), ('leads to', (17, 19)), ('in', (21, 22)), ('for', (23, 24))]","[('simple ( 4 features )', (3, 8)), ('extended ( 11 features ) feature set', (10, 17)), ('some gains', (19, 21)), ('accuracy', (22, 23)), ('English and Chinese', (25, 28))]",[],[],[],[]
results,"Interestingly , when adding external word embeddings the accuracy of the graph - based parser degrades .","[('adding', (3, 4)), ('of', (9, 10))]","[('external word embeddings', (4, 7)), ('accuracy', (8, 9)), ('graph - based parser', (11, 15)), ('degrades', (15, 16))]",[],[],[],[]
model,"We give a probabilistic interpretation to the ensemble parser ( with a minor modification ) , viewing it as an instance of minimum Bayes risk inference .","[('give', (1, 2)), ('to', (5, 6)), ('viewing it as', (16, 19)), ('of', (21, 22))]","[('probabilistic interpretation', (3, 5)), ('ensemble parser', (7, 9)), ('instance', (20, 21)), ('minimum Bayes risk inference', (22, 26))]",[],[],[],[]
model,"We address this issue in 5 by distilling the ensemble into a single FOG parser with discriminative training by defining a new cost function , inspired by the notion of "" soft targets "" .","[('distilling', (7, 8)), ('into', (10, 11)), ('with', (15, 16)), ('by defining', (18, 20))]","[('ensemble', (9, 10)), ('single FOG parser', (12, 15)), ('discriminative training', (16, 18)), ('new cost function', (21, 24))]",[],[],[],[]
model,"The essential idea is to derive the cost of each possible attachment from the ensemble 's division of votes , and use this cost in discriminative learning .","[('derive', (5, 6)), ('of', (8, 9)), ('from', (12, 13)), ('use', (21, 22)), ('in', (24, 25))]","[('cost', (7, 8)), ('each possible attachment', (9, 12)), (""ensemble 's division of votes"", (14, 19)), ('cost', (23, 24)), ('discriminative learning', (25, 27))]",[],[],[],[]
research-problem,"It represents a new state of the art for graphbased dependency parsing for English , Chinese , and German .",[],"[('graphbased dependency parsing', (9, 12)), ('English , Chinese , and German', (13, 19))]",[],[],[],[]
ablation-analysis,"First , consider the neural FOG parser trained with Hamming cost ( C H in the second - to - last row ) .","[('consider', (2, 3)), ('trained with', (7, 9))]","[('neural FOG parser', (4, 7)), ('Hamming cost', (9, 11))]",[],[],[],[]
results,"This is a very strong benchmark , outperforming many higherorder graph - based and neural network models on all three datasets .","[('is', (1, 2)), ('outperforming', (7, 8))]","[('many higherorder graph - based and neural network models', (8, 17))]",[],[],[],[]
results,"Nonetheless , training the same model with distillation cost gives consistent improvements for all languages .","[('training', (2, 3)), ('with', (6, 7)), ('gives', (9, 10)), ('for', (12, 13))]","[('same model', (4, 6)), ('distillation cost', (7, 9)), ('consistent improvements', (10, 12)), ('all languages', (13, 15))]",[],[],[],[]
results,"For English , we see that this model comes close to the slower ensemble it was trained to simulate .","[('For', (0, 1)), ('see that', (4, 6)), ('comes close to', (8, 11))]","[('English', (1, 2)), ('slower ensemble', (12, 14)), ('trained to simulate', (16, 19))]",[],[],[],[]
results,"For Chinese , it achieves the best published scores , for German the best published UAS scores , and just after Bohnet and Nivre ( 2012 ) for LAS .","[('For', (0, 1)), ('achieves', (4, 5)), ('for', (10, 11)), ('for', (27, 28))]","[('Chinese', (1, 2)), ('best published scores', (6, 9)), ('German', (11, 12)), ('best published UAS scores', (13, 17)), ('LAS', (28, 29))]",[],[],[],[]
research-problem,From POS tagging to dependency parsing for biomedical event extraction,[],"[('biomedical event extraction', (7, 10))]",[],[],[],[]
code,We make the retrained models available at https://github.com/datquocnguyen/BioPosDep.,[],"[('https://github.com/datquocnguyen/BioPosDep.', (7, 8))]",[],[],[],[]
research-problem,"In this paper , we therefore investigate current stateof - the - art ( SOTA ) approaches to dependency parsing as applied to biomedical texts .",[],"[('dependency parsing', (18, 20))]",[],[],[],[]
model,"Finally , we study the impact of parser choice on biomedical event extraction , following the structure of the extrinsic parser evaluation shared task ( EPE 2017 ) for biomedical event extraction .","[('on', (9, 10))]","[('parser choice', (7, 9)), ('biomedical event extraction', (10, 13))]",[],[],[],[]
experimental-setup,"For the three BiLSTM - CRF - based models , Stanford - NNdep , jPTDP and Stanford - Biaffine which utilizes pre-trained word embeddings , we employ 200 dimensional pre-trained word vectors from .","[('For', (0, 1)), ('utilizes', (20, 21)), ('employ', (26, 27))]","[('three BiLSTM - CRF - based models', (2, 9)), ('Stanford - NNdep', (10, 13)), ('jPTDP', (14, 15)), ('Stanford - Biaffine', (16, 19)), ('pre-trained word embeddings', (21, 24)), ('200 dimensional pre-trained word vectors', (27, 32))]",[],[],[],[]
experimental-setup,"For the traditional feature - based models MarMoT , NLP4J - POS and NLP4J - dep , we use their original pure Java implementations with default hyperparameter settings .","[('For', (0, 1)), ('use', (18, 19)), ('with', (24, 25))]","[('traditional feature - based models', (2, 7)), ('MarMoT', (7, 8)), ('NLP4J - POS', (9, 12)), ('NLP4J - dep', (13, 16)), ('original pure Java implementations', (20, 24)), ('default hyperparameter settings', (25, 28))]",[],[],[],[]
experimental-setup,"For the BiLSTM - CRF - based models , we use default hyper - parameters provided in with the following exceptions : for training , we use Nadam and run for 50 epochs .","[('For', (0, 1)), ('use', (10, 11)), ('for', (22, 23)), ('use', (26, 27)), ('run for', (29, 31))]","[('BiLSTM - CRF - based models', (2, 8)), ('default hyper - parameters', (11, 15)), ('training', (23, 24)), ('Nadam', (27, 28)), ('50 epochs', (31, 33))]",[],[],[],[]
experimental-setup,"For Stanford - NNdep , we select the word CutOff from { 1 , 2 } and the size of the hidden layer from { 100 , 150 , 200 , 250 , 300 , 350 , 400 } and fix other hyperparameters with their default values .","[('For', (0, 1)), ('select', (6, 7)), ('from', (10, 11)), ('from', (23, 24)), ('fix', (40, 41)), ('with', (43, 44))]","[('Stanford - NNdep', (1, 4)), ('word CutOff', (8, 10)), ('{ 1 , 2 }', (11, 16)), ('hidden layer', (21, 23)), ('{ 100 , 150 , 200 , 250 , 300 , 350 , 400 }', (24, 39)), ('other hyperparameters', (41, 43)), ('default values', (45, 47))]",[],[],[],[]
experimental-setup,"For jPTDP , we use 50 - dimensional character embeddings and fix the initial learning rate at 0.0005 .","[('For', (0, 1)), ('use', (4, 5)), ('fix', (11, 12)), ('at', (16, 17))]","[('jPTDP', (1, 2)), ('50 - dimensional character embeddings', (5, 10)), ('initial learning rate', (13, 16)), ('0.0005', (17, 18))]",[],[],[],[]
experimental-setup,"We also fix the number of BiLSTM layers at 2 and select the number of LSTM units in each layer from { 100 , 150 , 200 , 250 , 300 } .","[('fix', (2, 3)), ('at', (8, 9)), ('select', (11, 12)), ('in', (17, 18)), ('from', (20, 21))]","[('number of BiLSTM layers', (4, 8)), ('2', (9, 10)), ('number of LSTM units', (13, 17)), ('each layer', (18, 20)), ('{ 100 , 150 , 200 , 250 , 300 }', (21, 32))]",[],[],[],[]
results,POS tagging results,[],"[('POS tagging results', (0, 3))]",[],[],[],[]
results,"BiLSTM - CRF and Mar - MoT obtain the lowest scores on GENIA and CRAFT , respectively .","[('obtain', (7, 8)), ('on', (11, 12))]","[('BiLSTM - CRF and Mar - MoT', (0, 7)), ('lowest scores', (9, 11)), ('GENIA and CRAFT', (12, 15))]",[],[],[],[]
results,jPTDP obtains a similar score to Mar - MoT on GENIA and similar score to BiLSTM - CRF on CRAFT .,"[('obtains', (1, 2)), ('to', (5, 6)), ('on', (9, 10)), ('to', (14, 15)), ('on', (18, 19))]","[('jPTDP', (0, 1)), ('similar score', (3, 5)), ('Mar - MoT', (6, 9)), ('GENIA', (10, 11)), ('similar score', (12, 14)), ('BiLSTM - CRF', (15, 18)), ('CRAFT', (19, 20))]",[],[],[],[]
results,"In particular , MarMoT obtains accuracy results at 98.61 % and 97.07 % on GENIA and CRAFT , which are about 0.2 % and 0.4 % absolute lower than NLP4J - POS , respectively .","[('obtains', (4, 5)), ('at', (7, 8)), ('on', (13, 14)), ('than', (28, 29))]","[('MarMoT', (3, 4)), ('accuracy results', (5, 7)), ('98.61 % and 97.07 %', (8, 13)), ('GENIA and CRAFT', (14, 17)), ('NLP4J - POS', (29, 32))]",[],[],[],[]
results,BiLSTM - CRF obtains accuracies of 98.44 % on GE - NIA and 97.25 % on CRAFT .,"[('obtains', (3, 4)), ('of', (5, 6)), ('on', (8, 9)), ('on', (15, 16))]","[('BiLSTM - CRF', (0, 3)), ('accuracies', (4, 5)), ('98.44 %', (6, 8)), ('GE - NIA', (9, 12)), ('97.25 %', (13, 15)), ('CRAFT', (16, 17))]",[],[],[],[]
results,"Note that for PTB , CNN - based character - level word embeddings only provided a 0.1 % improvement to BiLSTM - CRF .","[('for', (2, 3)), ('provided', (14, 15)), ('to', (19, 20))]","[('PTB', (3, 4)), ('CNN - based character - level word embeddings', (5, 13)), ('0.1 % improvement', (16, 19)), ('BiLSTM - CRF', (20, 23))]",[],[],[],[]
results,"On both GENIA and CRAFT , BiLSTM - CRF with character - level word embeddings obtains the highest accuracy scores .","[('On', (0, 1)), ('with', (9, 10)), ('obtains', (15, 16))]","[('GENIA and CRAFT', (2, 5)), ('BiLSTM - CRF', (6, 9)), ('character - level word embeddings', (10, 15)), ('highest accuracy scores', (17, 20))]",[],[],[],[]
results,Overall dependency parsing results,[],"[('Overall dependency parsing results', (0, 4))]",[],[],[],[]
results,"On GENIA , among pre-trained models , BLLIP obtains highest results .","[('On', (0, 1)), ('among', (3, 4)), ('obtains', (8, 9))]","[('GENIA', (1, 2)), ('pre-trained models', (4, 6)), ('BLLIP', (7, 8)), ('highest results', (9, 11))]",[],[],[],[]
results,The pre-trained Stanford - Biaffine ( v1 ) model produces lower scores than the pre-trained Stanford - NNdep model on GENIA .,"[('produces', (9, 10)), ('than', (12, 13)), ('on', (19, 20))]","[('pre-trained Stanford - Biaffine ( v1 ) model', (1, 9)), ('lower scores', (10, 12)), ('pre-trained Stanford - NNdep model', (14, 19)), ('GENIA', (20, 21))]",[],[],[],[]
results,Note that the pre-trained NNdep and Biaffine models result in no significant performance differences irrespective of the source of POS tags ( i.e. the pre-trained Stanford tagger at 98.37 % vs. the retrained NLP4J - POS model at 98.80 % ) .,"[('result in', (8, 10)), ('irrespective of', (14, 16)), ('at', (27, 28)), ('at', (37, 38))]","[('pre-trained NNdep and Biaffine models', (3, 8)), ('no significant performance differences', (10, 14)), ('source of POS tags', (17, 21)), ('pre-trained Stanford tagger', (24, 27)), ('98.37 %', (28, 30)), ('retrained NLP4J - POS model', (32, 37)), ('98.80 %', (38, 40))]",[],[],[],[]
research-problem,Stack - Pointer Networks for Dependency Parsing,[],"[('Dependency Parsing', (5, 7))]",[],[],[],[]
model,"In this paper , we propose a novel neural network architecture for dependency parsing , stackpointer networks ( STACKPTR ) .","[('propose', (5, 6)), ('for', (11, 12))]","[('novel neural network architecture', (7, 11)), ('dependency parsing', (12, 14)), ('stackpointer networks ( STACKPTR )', (15, 20))]",[],[],[],[]
model,"STACKPTR is a transition - based architecture , with the corresponding asymptotic efficiency , but still maintains a global view of the sentence that proves essential for achieving competitive accuracy .","[('is', (1, 2)), ('with', (8, 9)), ('maintains', (16, 17)), ('of', (20, 21))]","[('STACKPTR', (0, 1)), ('transition - based architecture', (3, 7)), ('asymptotic efficiency', (11, 13)), ('global view', (18, 20)), ('sentence', (22, 23)), ('competitive accuracy', (28, 30))]",[],[],[],[]
model,"Our STACKPTR parser has a pointer network as its backbone , and is equipped with an internal stack to maintain the order of head words in tree structures .","[('has', (3, 4)), ('as', (7, 8)), ('equipped with', (13, 15)), ('to maintain', (18, 20)), ('of', (22, 23)), ('in', (25, 26))]","[('STACKPTR parser', (1, 3)), ('pointer network', (5, 7)), ('backbone', (9, 10)), ('internal stack', (16, 18)), ('order', (21, 22)), ('head words', (23, 25)), ('tree structures', (26, 28))]",[],[],[],[]
model,"The STACKPTR parser performs parsing in an incremental , topdown , depth - first fashion ; at each step , it generates an arc by assigning a child for the headword at the top of the internal stack .","[('performs', (3, 4)), ('in', (5, 6)), ('at', (16, 17)), ('generates', (21, 22)), ('by assigning', (24, 26)), ('for', (28, 29)), ('at', (31, 32)), ('top of', (33, 35))]","[('STACKPTR parser', (1, 3)), ('parsing', (4, 5)), ('incremental , topdown , depth - first fashion', (7, 15)), ('each step', (17, 19)), ('arc', (23, 24)), ('child', (27, 28)), ('headword', (30, 31)), ('internal stack', (36, 38))]",[],[],[],[]
baselines,"For fair comparison of the parsing performance , we re-implemented the graph - based Deep Biaffine ( BIAF ) parser , which achieved state - of - the - art results on a wide range of languages .","[('re-implemented', (9, 10))]","[('graph - based Deep Biaffine ( BIAF ) parser', (11, 20))]",[],[],[],[]
experiments,Main Results,[],[],[],[],[],[]
results,"On UAS and LAS , the Full variation of STACKPTR with decoding beam size 10 outperforms BIAF on Chinese , and obtains competitive performance on English and German .","[('On', (0, 1)), ('with', (10, 11)), ('outperforms', (15, 16)), ('on', (17, 18)), ('obtains', (21, 22)), ('on', (24, 25))]","[('UAS and LAS', (1, 4)), ('Full variation of STACKPTR', (6, 10)), ('decoding beam size 10', (11, 15)), ('BIAF', (16, 17)), ('Chinese', (18, 19)), ('competitive performance', (22, 24)), ('English and German', (25, 28))]",[],[],[],[]
results,"An interesting observation is that the Full model achieves the best accuracy on English and Chinese , while performs slightly worse than + sib on German .","[('achieves', (8, 9)), ('on', (12, 13)), ('performs', (18, 19)), ('than', (21, 22)), ('on', (24, 25))]","[('Full model', (6, 8)), ('best accuracy', (10, 12)), ('English and Chinese', (13, 16)), ('slightly worse', (19, 21)), ('+ sib', (22, 24)), ('German', (25, 26))]",[],[],[],[]
results,"On LCM and UCM , STACKPTR significantly outperforms BIAF on all languages , showing the superiority of our parser on complete sentence parsing .","[('On', (0, 1)), ('significantly outperforms', (6, 8)), ('on', (9, 10)), ('showing', (13, 14)), ('on', (19, 20))]","[('LCM and UCM', (1, 4)), ('STACKPTR', (5, 6)), ('BIAF', (8, 9)), ('all languages', (10, 12)), ('superiority', (15, 16)), ('complete sentence parsing', (20, 23))]",[],[],[],[]
results,The results of our parser on RA are slightly worse than BIAF .,"[('of', (2, 3)), ('on', (5, 6)), ('are', (7, 8)), ('slightly worse than', (8, 11))]","[('results', (1, 2)), ('our parser', (3, 5)), ('RA', (6, 7)), ('BIAF', (11, 12))]",[],[],[],[]
results,"re-implementation of BIAF obtains better performance than the original one in , demonstrating the effectiveness of the character - level information .","[('re-implementation of', (0, 2)), ('obtains', (3, 4)), ('than', (6, 7))]","[('BIAF', (2, 3)), ('better performance', (4, 6)), ('original one', (8, 10))]",[],[],[],[]
results,"Our model achieves state - of - the - art performance on both UAS and LAS on Chinese , and best UAS on English .","[('achieves', (2, 3)), ('on', (11, 12)), ('on', (16, 17)), ('on', (22, 23))]","[('Our model', (0, 2)), ('state - of - the - art performance', (3, 11)), ('UAS and LAS', (13, 16)), ('Chinese', (17, 18)), ('best UAS', (20, 22)), ('English', (23, 24))]",[],[],[],[]
results,"On German , the performance is competitive with BIAF , and significantly better than other models .","[('On', (0, 1)), ('is', (5, 6)), ('competitive with', (6, 8)), ('than', (13, 14))]","[('German', (1, 2)), ('performance', (4, 5)), ('BIAF', (8, 9)), ('significantly better', (11, 13)), ('other models', (14, 16))]",[],[],[],[]
research-problem,Structured Training for Neural Network Transition - Based Parsing,[],"[('Neural Network Transition - Based Parsing', (3, 9))]",[],[],[],[]
research-problem,We present structured perceptron training for neural network transition - based dependency parsing .,[],"[('neural network transition - based dependency parsing', (6, 13))]",[],[],[],[]
research-problem,"Lately , dependency parsing has emerged as a popular approach to this problem due to the availability of dependency treebanks in many languages and the efficiency of dependency parsers .",[],"[('dependency parsing', (2, 4))]",[],[],[],[]
model,"In transition - based parsing , sentences are processed in a linear left to right pass ; at each position , the parser needs to choose from a set of possible actions defined by the transition strategy .","[('processed in', (8, 10)), ('defined by', (32, 34))]","[('transition - based parsing', (1, 5)), ('sentences', (6, 7)), ('linear left to right pass', (11, 16))]",[],[],[],[]
model,"In this work , we combine the representational power of neural networks with the superior search enabled by structured training and inference , making our parser one of the most accurate dependency parsers to date .","[('combine', (5, 6)), ('of', (9, 10)), ('with', (12, 13)), ('enabled by', (16, 18))]","[('representational power', (7, 9)), ('neural networks', (10, 12)), ('superior search', (14, 16)), ('structured training and inference', (18, 22))]",[],[],[],[]
model,"As in prior work , we train the neural network to model the probability of individual parse actions .","[('train', (6, 7)), ('to model', (10, 12)), ('of', (14, 15))]","[('neural network', (8, 10)), ('probability', (13, 14)), ('individual parse actions', (15, 18))]",[],[],[],[]
model,"Instead , we use the activations from all layers of the neural network as the representation in a structured perceptron model that is trained with beam search and early updates ( Section 3 ) .","[('use', (3, 4)), ('from', (6, 7)), ('of', (9, 10)), ('as', (13, 14)), ('in', (16, 17)), ('trained with', (23, 25))]","[('activations', (5, 6)), ('all layers', (7, 9)), ('neural network', (11, 13)), ('representation', (15, 16)), ('structured perceptron model', (18, 21)), ('beam search and early updates', (25, 30))]",[],[],[],[]
model,"To this end , we generate large quantities of high - confidence parse trees by parsing unlabeled data with two different parsers and selecting only the sentences for which the two parsers produced the same trees ( Section 3.3 ) .","[('generate', (5, 6)), ('by parsing', (14, 16)), ('with', (18, 19)), ('selecting', (23, 24)), ('produced', (32, 33))]","[('high - confidence parse trees', (9, 14)), ('unlabeled data', (16, 18)), ('two different parsers', (19, 22)), ('sentences', (26, 27)), ('two parsers', (30, 32)), ('same trees', (34, 36))]",[],[],[],[]
model,"This approach is known as "" tri-training "" and we show that it benefits our neural network parser significantly more than other approaches .","[('known', (3, 4)), ('benefits', (13, 14)), ('than', (20, 21))]","[('tri-training', (6, 7)), ('our neural network parser', (14, 18)), ('significantly more', (18, 20)), ('other approaches', (21, 23))]",[],[],[],[]
hyperparameters,We used the publicly available word2vec 2 tool to learn CBOW embeddings following the sample configuration provided with the tool .,"[('used', (1, 2)), ('to learn', (8, 10))]","[('publicly available word2vec 2 tool', (3, 8)), ('CBOW embeddings', (10, 12))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"The highest of these is , with a reported accuracy of 94.22 % UAS .","[('with', (6, 7)), ('of', (10, 11))]","[('reported accuracy', (8, 10)), ('94.22 % UAS', (11, 14))]",[],[],[],[]
results,"Even though the UAS is not directly comparable , it is typically similar , and this suggests that our model is competitive with some of the highest reported accuries for dependencies on WSJ .","[('with', (22, 23)), ('for', (29, 30)), ('dependencies on', (30, 32))]","[('our model', (18, 20)), ('competitive', (21, 22)), ('some of the highest reported accuries', (23, 29)), ('WSJ', (32, 33))]",[],[],[],[]
research-problem,DEEP BIAFFINE ATTENTION FOR NEURAL DEPENDENCY PARSING,[],"[('NEURAL DEPENDENCY PARSING', (4, 7))]",[],[],[],[]
model,"We modify the neural graphbased approach first proposed by in a few ways to achieve competitive performance : we build a network that 's larger but uses more regularization ; we replace the traditional MLP - based attention mechanism and affine label classifier with biaffine ones ; and rather than using the top recurrent states of the LSTM in the biaffine transformations , we first put them through MLP operations that reduce their dimensionality .","[('modify', (1, 2)), ('to achieve', (13, 15)), ('build', (19, 20)), ('that', (22, 23)), ('uses', (26, 27)), ('replace', (31, 32)), ('with', (43, 44)), ('put', (65, 66))]","[('neural graphbased approach', (3, 6)), ('competitive performance', (15, 17)), ('network', (21, 22)), ('larger', (24, 25)), ('more regularization', (27, 29)), ('traditional MLP - based attention mechanism', (33, 39)), ('affine label classifier', (40, 43)), ('biaffine ones', (44, 46)), ('MLP operations', (68, 70)), ('dimensionality', (73, 74))]",[],[],[],[]
hyperparameters,"We choose to optimize with Adam , which ( among other things ) keeps a moving average of the L 2 norm of the gradient for each parameter throughout training and divides the gradient for each parameter by this moving average , ensuring that the magnitude of the gradients will on average be close to one .","[('optimize with', (3, 5)), ('keeps', (13, 14)), ('of', (17, 18)), ('of', (22, 23)), ('for', (25, 26)), ('throughout', (28, 29)), ('divides', (31, 32)), ('for', (34, 35)), ('by', (37, 38)), ('ensuring', (42, 43))]","[('optimize', (3, 4)), ('Adam', (5, 6)), ('moving average', (15, 17)), ('L 2 norm', (19, 22)), ('gradient', (24, 25)), ('each parameter', (26, 28)), ('training', (29, 30)), ('gradient', (33, 34)), ('each parameter', (35, 37)), ('moving average', (39, 41)), ('magnitude', (45, 46))]",[],[],[],[]
results,"Our model gets nearly the same UAS performance on PTB - SD 3.3.0 as the current SOTA model from in spite of its substantially simpler architecture , and gets SOTA UAS performance on CTB 5.1 7 as well as SOTA performance on all CoNLL 09 languages .","[('gets', (2, 3)), ('on', (8, 9)), ('as', (13, 14)), ('gets', (28, 29)), ('on', (32, 33)), ('on', (41, 42))]","[('Our model', (0, 2)), ('nearly the same UAS performance', (3, 8)), ('PTB - SD 3.3.0', (9, 13)), ('current SOTA model', (15, 18)), ('SOTA UAS performance', (29, 32)), ('CTB 5.1 7', (33, 36)), ('SOTA performance', (39, 41)), ('all CoNLL 09 languages', (42, 46))]",[],[],[],[]
research-problem,"This form of training , which accounts for model predictions at training time , improves parsing accuracies .","[('accounts for', (6, 8)), ('at', (10, 11)), ('improves', (14, 15))]","[('parsing accuracies', (15, 17))]",[],[],[],[]
research-problem,"Natural language parsing can be formulated as a series of decisions that read words in sequence and incrementally combine them to form syntactic structures ; this formalization is known as transitionbased parsing , and is often coupled with a greedy search procedure .",[],"[('Natural language parsing', (0, 3))]",[],[],[],[]
research-problem,"The literature on transition - based parsing is vast , but all works share in common a classification component that takes into account features of the current parser state 1 and predicts the next action to take conditioned on the state .","[('takes into account', (20, 23)), ('of', (24, 25)), ('predicts', (31, 32)), ('conditioned on', (37, 39))]","[('transition - based parsing', (3, 7)), ('classification component', (17, 19)), ('features', (23, 24)), ('current parser state', (26, 29)), ('next action', (33, 35)), ('state', (40, 41))]",[],[],[],[]
model,"In this work , we adapt the training criterion so as to explore parser states drawn not only from the training data , but also from the model as it is being learned .","[('adapt', (5, 6)), ('to explore', (11, 13))]","[('training criterion', (7, 9)), ('parser states', (13, 15)), ('drawn', (15, 16)), ('training data', (20, 22)), ('model', (27, 28))]",[],[],[],[]
model,"To do so , we use the method of to dynamically chose an optimal ( relative to the final attachment accuracy ) action given an imperfect history .","[('use', (5, 6)), ('to dynamically chose', (9, 12)), ('given', (23, 24))]","[('method', (7, 8)), ('imperfect history', (25, 27))]",[],[],[],[]
model,"By interpolating between algorithm states sampled from the model and those sampled from the training data , more robust predictions at test time can be made .","[('between', (2, 3)), ('sampled from', (5, 7)), ('sampled from', (11, 13)), ('at', (20, 21)), ('made', (25, 26))]","[('interpolating', (1, 2)), ('algorithm states', (3, 5)), ('model', (8, 9)), ('training data', (14, 16)), ('more robust predictions', (17, 20)), ('test time', (21, 23))]",[],[],[],[]
experiments,Experiments,[],"[('Experiments', (0, 1))]",[],[],[],[]
results,The score achieved by the dynamic oracle for English is 93.56 UAS .,"[('achieved by', (2, 4)), ('for', (7, 8)), ('is', (9, 10))]","[('score', (1, 2)), ('dynamic oracle', (5, 7)), ('English', (8, 9)), ('93.56 UAS', (10, 12))]",[],[],[],[]
results,"Moreover , the Chinese score establishes the state - of - the - art , using the same settings as Chen and Manning ( 2014 ) .","[('establishes', (5, 6))]","[('Chinese score', (3, 5)), ('state - of - the - art', (7, 14))]",[],[],[],[]
research-problem,Globally Normalized Transition - Based Neural Networks,[],"[('Globally Normalized Transition - Based Neural Networks', (0, 7))]",[],[],[],[]
research-problem,"We introduce a globally normalized transition - based neural network model that achieves state - of - the - art part - ofspeech tagging , dependency parsing and sentence compression results .","[('introduce', (1, 2)), ('achieves', (12, 13))]","[('globally normalized transition - based neural network model', (3, 11)), ('state - of - the - art part - ofspeech tagging', (13, 24)), ('dependency parsing', (25, 27)), ('sentence compression results', (28, 31))]",[],[],[],[]
model,"In this work we demonstrate that simple feed - forward networks without any recurrence can achieve comparable or better accuracies than LSTMs , as long as they are globally normalized .","[('demonstrate', (4, 5)), ('demonstrate that', (4, 6)), ('without', (11, 12)), ('can achieve', (14, 16)), ('than', (20, 21))]","[('simple feed - forward networks', (6, 11)), ('any recurrence', (12, 14)), ('comparable or better accuracies', (16, 20)), ('LSTMs', (21, 22)), ('globally normalized', (28, 30))]",[],[],[],[]
model,"Our model , described in detail in Section 2 , uses a transition system and feature embeddings as introduced by * On leave from Columbia University ..","[('uses', (10, 11))]","[('transition system', (12, 14)), ('feature embeddings', (15, 17))]",[],[],[],[]
model,"We do not use any recurrence , but perform beam search for maintaining multiple hypotheses and introduce global normalization with a conditional random field ( CRF ) objective to overcome the label bias problem that locally normalized models suffer from .","[('perform', (8, 9)), ('for maintaining', (11, 13)), ('introduce', (16, 17)), ('with', (19, 20)), ('to overcome', (28, 30))]","[('beam search', (9, 11)), ('multiple hypotheses', (13, 15)), ('global normalization', (17, 19)), ('conditional random field ( CRF ) objective', (21, 28)), ('label bias problem', (31, 34)), ('locally normalized models', (35, 38))]",[],[],[],[]
model,"Since we use beam inference , we approximate the partition function by summing over the elements in the beam , and use early updates .","[('approximate', (7, 8)), ('by', (11, 12)), ('summing over', (12, 14)), ('in', (16, 17)), ('use', (21, 22))]","[('beam inference', (3, 5)), ('partition function', (9, 11)), ('elements', (15, 16)), ('beam', (18, 19)), ('early updates', (22, 24))]",[],[],[],[]
model,We compute gradients based on this approximate global normalization and perform full backpropagation training of all neural network parameters based on the CRF loss .,"[('compute', (1, 2)), ('based on', (3, 5)), ('perform', (10, 11)), ('of', (14, 15)), ('based on', (19, 21))]","[('gradients', (2, 3)), ('approximate global normalization', (6, 9)), ('full backpropagation training', (11, 14)), ('all neural network parameters', (15, 19)), ('CRF loss', (22, 24))]",[],[],[],[]
experiments,Experiments,[],"[('Experiments', (0, 1))]",[],[],[],[]
experiments,Part of Speech Tagging,[],"[('Part of Speech Tagging', (0, 4))]",[],[],[],[]
experiments,Results .,[],[],[],[],[],[]
results,Our globally normalized model again significantly outperforms the local model .,"[('significantly outperforms', (5, 7))]","[('globally normalized model', (1, 4)), ('local model', (8, 10))]",[],[],[],[]
ablation-analysis,Beam search with a locally normalized model suffers from severe label bias issues that we discuss on a concrete example in Section 5 .,"[('with', (2, 3)), ('suffers from', (7, 9))]","[('Beam search', (0, 2)), ('locally normalized model', (4, 7)), ('severe label bias issues', (9, 13))]",[],[],[],[]
results,"Using beam search with a locally normalized model does not help , but with global normalization it leads to a 7 % reduction in relative error , empirically demonstrating the effect of label bias .","[('Using', (0, 1)), ('with', (3, 4)), ('does', (8, 9)), ('with', (13, 14)), ('leads to', (17, 19)), ('in', (23, 24))]","[('beam search', (1, 3)), ('locally normalized model', (5, 8)), ('help', (10, 11)), ('global normalization', (14, 16)), ('7 % reduction', (20, 23)), ('relative error', (24, 26))]",[],[],[],[]
ablation-analysis,"The set of character ngrams feature is very important , increasing average accuracy on the CoNLL '09 datasets by about 0.5 % absolute .","[('set of', (1, 3)), ('is', (6, 7)), ('increasing', (10, 11)), ('on', (13, 14)), ('by', (18, 19))]","[('character ngrams feature', (3, 6)), ('very important', (7, 9)), ('average accuracy', (11, 13)), (""CoNLL '09 datasets"", (15, 18))]",[],[],[],[]
experiments,Dependency Parsing,[],"[('Dependency Parsing', (0, 2))]",[],[],[],[]
experiments,Results .,[],[],[],[],[],[]
results,"Even though we do not use tri-training , our model compares favorably to the 94.26 % LAS and 92.41 % UAS reported by with tri-training .","[('to', (12, 13)), ('with', (23, 24))]","[('our model', (8, 10)), ('94.26 % LAS and 92.41 % UAS', (14, 21)), ('tri-training', (24, 25))]",[],[],[],[]
results,Our results also significantly outperform the LSTM - based approaches of .,"[('significantly outperform', (3, 5))]","[('LSTM - based approaches', (6, 10))]",[],[],[],[]
research-problem,Bag of Tricks for Efficient Text Classification,[],"[('Efficient Text Classification', (4, 7))]",[],[],[],[]
model,"In this work , we explore ways to scale these baselines to very large corpus with a large output space , in the context of text classification .","[('explore', (5, 6)), ('scale', (8, 9)), ('to', (11, 12)), ('with', (15, 16))]","[('very large corpus', (12, 15)), ('large output space', (17, 20)), ('text classification', (25, 27))]",[],[],[],[]
research-problem,"Inspired by the recent work in efficient word representation learning , we show that linear models with a rank constraint and a fast loss approximation can train on a billion words within ten minutes , while achieving performance on par with the state - of - the - art .","[('show', (12, 13)), ('with', (16, 17)), ('train on', (26, 28)), ('within', (31, 32)), ('on par with', (38, 41))]","[('linear models', (14, 16)), ('rank constraint', (18, 20)), ('fast loss approximation', (22, 25)), ('billion words', (29, 31)), ('ten minutes', (32, 34)), ('achieving', (36, 37)), ('performance', (37, 38)), ('state - of - the - art', (42, 49))]",[],[],[],[]
experiments,Sentiment analysis,[],"[('Sentiment analysis', (0, 2))]",[],[],[],[]
experimental-setup,"We use 10 hidden units and run fastText for 5 epochs with a learning rate selected on a validation set from { 0.05 , 0.1 , 0.25 , 0.5 } .","[('use', (1, 2)), ('run', (6, 7)), ('for', (8, 9)), ('with', (11, 12)), ('selected on', (15, 17)), ('from', (20, 21))]","[('10 hidden units', (2, 5)), ('fastText', (7, 8)), ('5 epochs', (9, 11)), ('learning rate', (13, 15)), ('validation set', (18, 20)), ('{ 0.05 , 0.1 , 0.25 , 0.5 }', (21, 30))]",[],[],[],[]
results,"On this task , adding bigram information improves the performance by 1 - 4 % .","[('adding', (4, 5)), ('improves', (7, 8)), ('by', (10, 11))]","[('bigram information', (5, 7)), ('performance', (9, 10)), ('1 - 4 %', (11, 15))]",[],[],[],[]
results,"Overall our accuracy is slightly better than char - CNN and char - CRNN and , a bit worse than VDCNN .","[('slightly better than', (4, 7)), ('bit worse than', (17, 20))]","[('our accuracy', (1, 3)), ('char - CNN and char - CRNN', (7, 14)), ('VDCNN', (20, 21))]",[],[],[],[]
results,"Note that we can increase the accuracy slightly by using more n-grams , for example with trigrams , the performance on Sogou goes up to 97.1 % .","[('increase', (4, 5)), ('by using', (8, 10)), ('for example with', (13, 16)), ('on', (20, 21)), ('goes up to', (22, 25))]","[('accuracy', (6, 7)), ('slightly', (7, 8)), ('more n-grams', (10, 12)), ('trigrams', (16, 17)), ('performance', (19, 20)), ('Sogou', (21, 22)), ('97.1 %', (25, 27))]",[],[],[],[]
results,We tune the hyperparameters on the validation set and observe that using n-grams up to 5 leads to the best performance .,"[('tune', (1, 2)), ('on', (4, 5)), ('observe', (9, 10)), ('using', (11, 12)), ('up to', (13, 15)), ('leads to', (16, 18))]","[('hyperparameters', (3, 4)), ('validation set', (6, 8)), ('n-grams', (12, 13)), ('5', (15, 16)), ('best performance', (19, 21))]",[],[],[],[]
experiments,Tag prediction,[],"[('Tag prediction', (0, 2))]",[],[],[],[]
baselines,We consider a frequency - based baseline which predicts the most frequent tag .,"[('consider', (1, 2)), ('predicts', (8, 9))]","[('frequency - based baseline', (3, 7)), ('most frequent tag', (10, 13))]",[],[],[],[]
baselines,"We also compare with Tagspace ( Weston et al. , 2014 ) , which is a tag prediction model similar to ours , but based on the Wsabie model of .","[('compare with', (2, 4)), ('is', (14, 15)), ('based on', (24, 26))]","[('Tagspace', (4, 5)), ('tag prediction model', (16, 19)), ('Wsabie model', (27, 29))]",[],[],[],[]
experiments,Results and training time . and 200 .,[],[],[],[],[],[]
experiments,"Both models achieve a similar performance with a small hidden layer , but adding bigrams gives us a significant boost in accuracy .","[('achieve', (2, 3)), ('with', (6, 7)), ('adding', (13, 14)), ('gives us', (15, 17)), ('in', (20, 21))]","[('Both models', (0, 2)), ('similar performance', (4, 6)), ('small hidden layer', (8, 11)), ('bigrams', (14, 15)), ('significant boost', (18, 20)), ('accuracy', (21, 22))]",[],[],[],[]
research-problem,BRIDGING THE DOMAIN GAP IN CROSS - LINGUAL DOCUMENT CLASSIFICATION,[],"[('CROSS - LINGUAL DOCUMENT CLASSIFICATION', (5, 10))]",[],[],[],[]
research-problem,"Recent developments in cross - lingual understanding ( XLU ) has made progress in this area , trying to bridge the language barrier using language universal representations .",[],"[('cross - lingual understanding ( XLU )', (3, 10))]",[],[],[],[]
baselines,We combine state - of - the - art cross - lingual methods with recently proposed methods for weakly supervised learning such as unsupervised pre-training and unsupervised data augmentation to simultaneously close both the language gap and the domain gap in XLU .,"[('combine', (1, 2)), ('for', (17, 18)), ('such as', (21, 23)), ('in', (40, 41))]","[('state - of - the - art cross - lingual methods', (2, 13)), ('weakly supervised learning', (18, 21)), ('unsupervised pre-training', (23, 25)), ('unsupervised data augmentation', (26, 29)), ('language gap', (34, 36)), ('domain gap', (38, 40)), ('XLU', (41, 42))]",[],[],[],[]
model,"In particular , we focus on two approaches for domain adaptation .","[('for', (8, 9))]","[('domain adaptation', (9, 11))]",[],[],[],[]
model,The first method is based on masked language model ( MLM ) pre-training ( as in ) using unlabeled target language corpora .,"[('based on', (4, 6)), ('using', (17, 18))]","[('masked language model ( MLM ) pre-training', (6, 13)), ('unlabeled target language corpora', (18, 22))]",[],[],[],[]
model,"The second method is unsupervised data augmentation ( UDA ) ) , where synthetic paraphrases are generated from the unlabeled corpus , and the model is trained on a label consistency loss .","[('where', (12, 13)), ('generated from', (16, 18)), ('trained on', (26, 28))]","[('unsupervised data augmentation ( UDA ) )', (4, 11)), ('synthetic paraphrases', (13, 15)), ('unlabeled corpus', (19, 21)), ('model', (24, 25)), ('label consistency loss', (29, 32))]",[],[],[],[]
baselines,Fine-tune ( Ft ) : Fine - tuning the pre-trained model with the source - domain training set .,"[('with', (11, 12))]","[('Fine-tune ( Ft )', (0, 4)), ('Fine - tuning', (5, 8)), ('pre-trained model', (9, 11)), ('source - domain training set', (13, 18))]",[],[],[],[]
baselines,Fine - tune with UDA ( UDA ) :,[],"[('Fine - tune with UDA ( UDA )', (0, 8))]",[],[],[],[]
baselines,This method utilizes the unlabeled data from the target domain by optimizing the UDA loss function ( Eq. ) .,"[('utilizes', (2, 3)), ('from', (6, 7)), ('by optimizing', (10, 12))]","[('unlabeled data', (4, 6)), ('target domain', (8, 10)), ('UDA loss function', (13, 16))]",[],[],[],[]
baselines,Self - training based on the UDA model ( UDA + Self ) :,"[('based on', (3, 5))]","[('Self - training', (0, 3)), ('UDA model ( UDA + Self )', (6, 13))]",[],[],[],[]
baselines,"We first train the Ft model and UDA model , and choose the better one as the teacher model .","[('train', (2, 3)), ('choose', (11, 12)), ('as', (15, 16))]","[('Ft model and UDA model', (4, 9)), ('better one', (13, 15)), ('teacher model', (17, 19))]",[],[],[],[]
baselines,"The teacher model is used to train a new XLM student using only unlabeled data U tgt in the target domain , as described above .","[('using', (11, 12)), ('in', (17, 18))]","[('teacher model', (1, 3)), ('new XLM student', (8, 11)), ('only unlabeled data U tgt', (12, 17)), ('target domain', (19, 21))]",[],[],[],[]
results,"Looking at Ft ( XLM ) results , it is clear that without the help of unlabeled data from the target domain , there still exists a substantial gap between the model performance of the cross -lingual settings and the monolingual baselines , even when using state - of - the - art pre-trained cross -lingual representations .","[('without the help of', (12, 16)), ('from', (18, 19)), ('between', (29, 30)), ('of', (33, 34)), ('when using', (44, 46))]","[('Ft ( XLM ) results', (2, 7)), ('unlabeled data', (16, 18)), ('target domain', (20, 22)), ('substantial gap', (27, 29)), ('model performance', (31, 33)), ('monolingual baselines', (40, 42)), ('state - of - the - art pre-trained cross -lingual representations', (46, 57))]",[],[],[],[]
results,Both the UDA algorithm and MLM pre-training can offer significant improvements by utilizing the unlabeled data .,"[('offer', (8, 9)), ('by utilizing', (11, 13))]","[('UDA algorithm and MLM pre-training', (2, 7)), ('significant improvements', (9, 11)), ('unlabeled data', (14, 16))]",[],[],[],[]
results,"In the sentiment classification task , where the unlabeled data size is larger , Ft ( XLM ft ) model usnig MLM pre-training consistently provides larger improvements compared with the UDA method .","[('In', (0, 1)), ('where', (6, 7)), ('is', (11, 12)), ('consistently provides', (23, 25)), ('compared with', (27, 29))]","[('sentiment classification task', (2, 5)), ('unlabeled data size', (8, 11)), ('larger', (12, 13)), ('Ft ( XLM ft ) model usnig MLM pre-training', (14, 23)), ('larger improvements', (25, 27)), ('UDA method', (30, 32))]",[],[],[],[]
results,"On the other hand , the MLM method is relatively more resource intensive and takes longer to converge ( see Appendix A.5 ) .","[('is', (8, 9)), ('takes', (14, 15)), ('to converge', (16, 18))]","[('MLM method', (6, 8)), ('relatively more resource intensive', (9, 13)), ('longer', (15, 16))]",[],[],[],[]
results,"In contrast , in the MLdoc dataset , when the size of the unlabeled samples is limited , the UDA method is more helpful .","[('in', (3, 4)), ('when', (8, 9)), ('of', (11, 12)), ('is', (15, 16)), ('is', (21, 22))]","[('MLdoc dataset', (5, 7)), ('size', (10, 11)), ('unlabeled samples', (13, 15)), ('limited', (16, 17)), ('UDA method', (19, 21)), ('more helpful', (22, 24))]",[],[],[],[]
results,"In the sentiment classification task , we observe the self - training technique consistently improves over its teacher model .","[('In', (0, 1)), ('observe', (7, 8)), ('over', (15, 16))]","[('sentiment classification task', (2, 5)), ('self - training technique', (9, 13)), ('consistently improves', (13, 15)), ('teacher model', (17, 19))]",[],[],[],[]
results,It offers best results in both XLM and XLM ft based classifiers .,"[('offers', (1, 2)), ('in', (4, 5))]","[('best results', (2, 4)), ('XLM and XLM ft based classifiers', (6, 12))]",[],[],[],[]
results,"In the MLdoc dataset , self - training also achieves the best results over all , however the gains are less clear .","[('In', (0, 1)), ('achieves', (9, 10))]","[('MLdoc dataset', (2, 4)), ('self - training', (5, 8)), ('best results', (11, 13))]",[],[],[],[]
results,"Finally , comparing with the best cross - lingual results and monolingual fine - tune baseline , we are able to completely close the performance gap by utilizing unlabeled data in the target language .","[('comparing with', (2, 4)), ('able to', (19, 21)), ('completely close', (21, 23)), ('by utilizing', (26, 28)), ('in', (30, 31))]","[('best cross - lingual results', (5, 10)), ('monolingual fine - tune baseline', (11, 16)), ('performance gap', (24, 26)), ('unlabeled data', (28, 30)), ('target language', (32, 34))]",[],[],[],[]
results,"Furthermore , our framework reaches new state - of - the - art results , improving over vanilla XLM baselines by 44 % on average .","[('reaches', (4, 5)), ('improving over', (15, 17)), ('by', (20, 21))]","[('our framework', (2, 4)), ('new state - of - the - art results', (5, 14)), ('vanilla XLM baselines', (17, 20)), ('44 %', (21, 23))]",[],[],[],[]
ablation-analysis,"Leveraging the unlabeled data from other domains does not offer consistent improvement , however can provide additional value in isolated cases .","[('Leveraging', (0, 1)), ('from', (4, 5)), ('does not offer', (7, 10)), ('provide', (15, 16)), ('in', (18, 19))]","[('unlabeled data', (2, 4)), ('other domains', (5, 7)), ('consistent improvement', (10, 12)), ('additional value', (16, 18)), ('isolated cases', (19, 21))]",[],[],[],[]
research-problem,Neural Attentive Bag - of - Entities Model for Text Classification,[],"[('Text Classification', (9, 11))]",[],[],[],[]
code,The source code of the proposed model is available online at https://github.com/wikipedia2vec/wikipedia2vec.,[],"[('https://github.com/wikipedia2vec/wikipedia2vec.', (11, 12))]",[],[],[],[]
model,"This study proposes the Neural Attentive Bagof - Entities ( NABoE ) model , which is a neural network model that addresses the text classification problem by modeling the semantics in the target documents using entities in the KB .","[('proposes', (2, 3)), ('is', (15, 16)), ('addresses', (21, 22)), ('by modeling', (26, 28)), ('in', (30, 31)), ('using', (34, 35)), ('in', (36, 37))]","[('Neural Attentive Bagof - Entities ( NABoE ) model', (4, 13)), ('neural network model', (17, 20)), ('text classification problem', (23, 26)), ('semantics', (29, 30)), ('target documents', (32, 34)), ('entities', (35, 36)), ('KB', (38, 39))]",[],[],[],[]
model,"For each entity name in a document ( e.g. , "" Apple "" ) , our model first detects entities that maybe referred to by this name ( e.g. , Apple Inc. , Apple ( food ) ) , and then represents the document using the weighted average of the embeddings of these entities .","[('For', (0, 1)), ('in', (4, 5)), ('first detects', (17, 19)), ('referred to by', (22, 25)), ('represents', (41, 42)), ('using', (44, 45)), ('of', (48, 49)), ('of', (51, 52))]","[('each entity name', (1, 4)), ('document', (6, 7)), ('entities', (19, 20)), ('document', (43, 44)), ('weighted average', (46, 48)), ('embeddings', (50, 51)), ('entities', (53, 54))]",[],[],[],[]
model,The weights are computed using a novel neural attention mechanism that enables the model to focus on a small subset of the entities that are less ambiguous in meaning and more relevant to the document .,"[('computed using', (3, 5)), ('enables', (11, 12)), ('to focus on', (14, 17)), ('of', (20, 21)), ('that are', (23, 25)), ('in', (27, 28)), ('more relevant to', (30, 33))]","[('weights', (1, 2)), ('novel neural attention mechanism', (6, 10)), ('model', (13, 14)), ('small subset', (18, 20)), ('entities', (22, 23)), ('less ambiguous', (25, 27)), ('meaning', (28, 29)), ('document', (34, 35))]",[],[],[],[]
model,"In other words , the attention mechanism is designed to compute weights by jointly addressing entity linking and entity salience detection tasks .","[('designed to compute', (8, 11)), ('by jointly addressing', (12, 15))]","[('attention mechanism', (5, 7)), ('weights', (11, 12)), ('entity linking and entity salience detection tasks', (15, 22))]",[],[],[],[]
hyperparameters,The model was trained using mini-batch SGD with its learning rate controlled by Adam and its mini-batch size set to 32 .,"[('trained using', (3, 5)), ('with', (7, 8)), ('controlled by', (11, 13)), ('set to', (18, 20))]","[('mini-batch SGD', (5, 7)), ('learning rate', (9, 11)), ('Adam', (13, 14)), ('mini-batch size', (16, 18)), ('32', (20, 21))]",[],[],[],[]
hyperparameters,The size of the embeddings of words and entities was set to d = 300 .,"[('of', (2, 3)), ('of', (5, 6)), ('set to', (10, 12))]","[('size', (1, 2)), ('embeddings', (4, 5)), ('words and entities', (6, 9)), ('d = 300', (12, 15))]",[],[],[],[]
experiments,Baselines,[],"[('Baselines', (0, 1))]",[],[],[],[]
baselines,BoW,[],"[('BoW', (0, 1))]",[],[],[],[]
baselines,This model is based on a logistic regression classifier with conventional binary BoW features .,"[('based on', (3, 5)), ('with', (9, 10))]","[('logistic regression classifier', (6, 9)), ('conventional binary BoW features', (10, 14))]",[],[],[],[]
baselines,FTS- BRNN,[],"[('FTS- BRNN', (0, 2))]",[],[],[],[]
baselines,This model is based on a bidirectional RNN with gated recurrent units ( GRU ) .,"[('based on', (3, 5)), ('with', (8, 9))]","[('bidirectional RNN', (6, 8)), ('gated recurrent units ( GRU )', (9, 15))]",[],[],[],[]
baselines,NTEE This model is a state - of - the - art model that uses a multi - layer perceptron classifier with the features computed using the embeddings of words and entities trained on Wikipedia using the neural network model proposed in their paper .,"[('is', (3, 4)), ('uses', (14, 15)), ('with', (21, 22)), ('computed using', (24, 26)), ('trained on', (32, 34)), ('using', (35, 36))]","[('NTEE', (0, 1)), ('state - of - the - art model', (5, 13)), ('multi - layer perceptron classifier', (16, 21)), ('features', (23, 24)), ('words and entities', (29, 32)), ('Wikipedia', (34, 35)), ('neural network model', (37, 40))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"Relative to the baselines , our models yielded enhanced over all performance on both datasets .","[('Relative to', (0, 2)), ('yielded', (7, 8)), ('on', (12, 13))]","[('baselines', (3, 4)), ('our models', (5, 7)), ('enhanced over all performance', (8, 12)), ('both datasets', (13, 15))]",[],[],[],[]
results,The NABoE - full model outperformed all baseline models in terms of both measures on both datasets .,"[('outperformed', (5, 6)), ('in terms of', (9, 12)), ('on', (14, 15))]","[('NABoE - full model', (1, 5)), ('all baseline models', (6, 9)), ('both measures', (12, 14)), ('both datasets', (15, 17))]",[],[],[],[]
results,"Furthermore , the NABoE-entity model outperformed all the baseline models in terms of both measures on the 20NG dataset , and the F 1 score on the R8 dataset .","[('outperformed', (5, 6)), ('in terms of', (10, 13)), ('on', (15, 16)), ('on', (25, 26))]","[('NABoE-entity model', (3, 5)), ('all the baseline models', (6, 10)), ('both measures', (13, 15)), ('20NG dataset', (17, 19)), ('F 1 score', (22, 25)), ('R8 dataset', (27, 29))]",[],[],[],[]
research-problem,Task - oriented Word Embedding for Text Classification,[],"[('Text Classification', (6, 8))]",[],[],[],[]
model,"In this paper , we propose a task - oriented word embedding method ( denoted as ToWE ) to solve the aforementioned problem .","[('propose', (5, 6))]","[('task - oriented word embedding method', (7, 13))]",[],[],[],[]
model,"In our method , the words ' contextual information and task information are inherently jointed to construct the word embeddings .","[('to construct', (15, 17))]","[(""words ' contextual information and task information"", (5, 12)), ('inherently jointed', (13, 15)), ('word embeddings', (18, 20))]",[],[],[],[]
model,"To model the task information , we regularize the distribution of the salient words to have a clear classification boundary , and then adjust the distribution of the other words in the embedding space correspondingly .","[('To model', (0, 2)), ('regularize', (7, 8)), ('of', (10, 11)), ('to have', (14, 16)), ('adjust', (23, 24)), ('of', (26, 27)), ('in', (30, 31))]","[('task information', (3, 5)), ('distribution', (9, 10)), ('salient words', (12, 14)), ('clear classification boundary', (17, 20)), ('distribution', (25, 26)), ('other words', (28, 30)), ('embedding space', (32, 34))]",[],[],[],[]
baselines,"To evaluate our method , we consider the following baselines : ( 1 ) the BOW method is employed as a basic baseline .","[('employed as', (18, 20))]","[('BOW method', (15, 17)), ('basic baseline', (21, 23))]",[],[],[],[]
baselines,It represents each document as a bag of words and the weighting scheme is TFIDF .,"[('represents', (1, 2)), ('as', (4, 5)), ('is', (13, 14))]","[('each document', (2, 4)), ('bag of words', (6, 9)), ('weighting scheme', (11, 13)), ('TFIDF', (14, 15))]",[],[],[],[]
baselines,( 2 ) the Word2 Vec method is a neural network language method which learns word embeddings by maximizing the conditional probability leveraging contextual information .,"[('is', (7, 8)), ('which learns', (13, 15)), ('by maximizing', (17, 19)), ('leveraging', (22, 23))]","[('Word2 Vec method', (4, 7)), ('neural network language method', (9, 13)), ('word embeddings', (15, 17)), ('conditional probability', (20, 22)), ('contextual information', (23, 25))]",[],[],[],[]
results,"( 1 ) Our method performs better than the other methods , and are proved to be highly reliable for the text classification task .","[('performs', (5, 6)), ('than', (7, 8))]","[('Our method', (3, 5)), ('better', (6, 7)), ('other methods', (9, 11))]",[],[],[],[]
results,"In particular , the ToWE - SG method significantly outperforms the other baselines on the 20 New s Group , 5 Abstract s Group , and MR .","[('significantly outperforms', (8, 10)), ('on', (13, 14))]","[('ToWE - SG method', (4, 8)), ('other baselines', (11, 13)), ('20 New s Group', (15, 19)), ('5 Abstract s Group', (20, 24)), ('MR', (26, 27))]",[],[],[],[]
results,"( 2 ) The word embedding methods outperform the basic bag - of - words methods in most cases , indicating the superiority of distributed word representation over the one - hot representation .","[('outperform', (7, 8)), ('in', (16, 17)), ('indicating', (20, 21)), ('of', (23, 24)), ('over', (27, 28))]","[('word embedding methods', (4, 7)), ('basic bag - of - words methods', (9, 16)), ('most cases', (17, 19)), ('superiority', (22, 23))]",[],[],[],[]
results,"Our method achieves better performance over Retrofit method , indicating that the task - specific features could be more effective compared with general semantic relations constructed by humans in the knowledge bases .","[('achieves', (2, 3)), ('over', (5, 6))]","[('Our method', (0, 2)), ('better performance', (3, 5)), ('Retrofit method', (6, 8))]",[],[],[],[]
results,"Our method outperforms the TWE method on both the document - level and sentence - level tasks , which shows the stability and reliability of modeling taskspecific features in real - world applications .","[('outperforms', (2, 3)), ('on', (6, 7))]","[('Our method', (0, 2)), ('TWE method', (4, 6)), ('document - level and sentence - level tasks', (9, 17))]",[],[],[],[]
research-problem,Graph Convolutional Networks for Text Classification,[],"[('Text Classification', (4, 6))]",[],[],[],[]
model,"In this work , we propose a new graph neural networkbased method for text classification .","[('propose', (5, 6)), ('for', (12, 13))]","[('new graph neural networkbased method', (7, 12)), ('text classification', (13, 15))]",[],[],[],[]
model,"We construct a single large graph from an entire corpus , which contains words and documents as nodes .","[('construct', (1, 2)), ('from', (6, 7)), ('contains', (12, 13)), ('as', (16, 17))]","[('single large graph', (3, 6)), ('entire corpus', (8, 10)), ('words and documents', (13, 16)), ('nodes', (17, 18))]",[],[],[],[]
model,"We model the graph with a Graph Convolutional Network ( GCN ) , a simple and effective graph neural network that captures high order neighborhoods information .","[('model', (1, 2)), ('with', (4, 5)), ('captures', (21, 22))]","[('graph', (3, 4)), ('Graph Convolutional Network ( GCN )', (6, 12)), ('simple and effective graph neural network', (14, 20)), ('high order neighborhoods information', (22, 26))]",[],[],[],[]
model,The edge between two word nodes is built byword co-occurrence information and the edge between a word node and document node is built using word frequency and word 's document frequency .,"[('between', (2, 3)), ('between', (14, 15)), ('built using', (22, 24))]","[('edge', (1, 2)), ('two word nodes', (3, 6)), ('built byword co-occurrence information', (7, 11)), ('edge', (13, 14)), ('word node and document node', (16, 21)), ('word frequency', (24, 26)), (""word 's document frequency"", (27, 31))]",[],[],[],[]
model,We then turn text classification problem into anode classification problem .,"[('turn', (2, 3)), ('into', (6, 7))]","[('text classification problem', (3, 6)), ('anode classification problem', (7, 10))]",[],[],[],[]
code,Our source code is available at https://github. com/yao8839836/text_gcn .,[],"[('https://github. com/yao8839836/text_gcn', (6, 8))]",[],[],[],[]
experiments,Baselines .,[],"[('Baselines', (0, 1))]",[],[],[],[]
baselines,We compare our Text GCN with multiple stateof - the - art text classification and embedding methods as follows :,"[('compare', (1, 2))]","[('Text GCN', (3, 5)), ('multiple stateof - the - art text classification and embedding methods', (6, 17))]",[],[],[],[]
baselines,TF - IDF + LR : bag - of - words model with term frequencyinverse document frequency weighting .,"[('with', (12, 13))]","[('TF - IDF + LR', (0, 5)), ('bag - of - words model', (6, 12)), ('term frequencyinverse document frequency weighting', (13, 18))]",[],[],[],[]
baselines,Logistic Regression is used as the classifier .,"[('used as', (3, 5))]","[('Logistic Regression', (0, 2)), ('classifier', (6, 7))]",[],[],[],[]
baselines,CNN : Convolutional Neural Network ( Kim 2014 ) .,[],"[('CNN', (0, 1)), ('Convolutional Neural Network', (2, 5))]",[],[],[],[]
baselines,We explored CNN -rand which uses randomly initialized word embeddings and CNN - non- static which uses pre-trained word embeddings .,"[('explored', (1, 2)), ('uses', (5, 6)), ('uses', (16, 17))]","[('CNN -rand', (2, 4)), ('randomly initialized word embeddings', (6, 10)), ('CNN - non- static', (11, 15)), ('pre-trained word embeddings', (17, 20))]",[],[],[],[]
baselines,LSTM : The LSTM model defined in which uses the last hidden state as the representation of the whole text .,"[('uses', (8, 9)), ('as', (13, 14)), ('of', (16, 17))]","[('LSTM', (0, 1)), ('last hidden state', (10, 13)), ('representation', (15, 16)), ('whole text', (18, 20))]",[],[],[],[]
baselines,"Bi- LSTM : a bi-directional LSTM , commonly used in text classification .",[],"[('Bi- LSTM', (0, 2)), ('bi-directional LSTM', (4, 6))]",[],[],[],[]
baselines,"PV - DBOW : a paragraph vector model proposed by , the orders of words in text are ignored .","[('in', (15, 16))]","[('PV - DBOW', (0, 3)), ('paragraph vector model', (5, 8)), ('orders', (12, 13)), ('orders of words', (12, 15)), ('text', (16, 17)), ('ignored', (18, 19))]",[],[],[],[]
baselines,We used Logistic Regression as the classifier .,"[('used', (1, 2)), ('as', (4, 5))]","[('Logistic Regression', (2, 4)), ('classifier', (6, 7))]",[],[],[],[]
baselines,"PV - DM : a paragraph vector model proposed by , which considers the word order .","[('considers', (12, 13))]","[('PV - DM', (0, 3)), ('paragraph vector model', (5, 8)), ('word order', (14, 16))]",[],[],[],[]
baselines,We used Logistic Regression as the classifier .,"[('used', (1, 2)), ('as', (4, 5))]","[('Logistic Regression', (2, 4)), ('classifier', (6, 7))]",[],[],[],[]
baselines,"PTE : predictive text embedding , which firstly learns word embedding based on heterogeneous text network containing words , documents and labels as nodes , then averages word embeddings as document embeddings for text classification .","[('firstly learns', (7, 9)), ('based on', (11, 13)), ('containing', (16, 17)), ('as', (22, 23)), ('averages', (26, 27)), ('as', (29, 30)), ('for', (32, 33))]","[('PTE', (0, 1)), ('predictive text embedding', (2, 5)), ('word embedding', (9, 11)), ('heterogeneous text network', (13, 16)), ('words , documents and labels', (17, 22)), ('nodes', (23, 24)), ('word embeddings', (27, 29)), ('document embeddings', (30, 32)), ('text classification', (33, 35))]",[],[],[],[]
baselines,"fast Text : a simple and efficient text classification method , which treats the average of word / n- grams embeddings as document embeddings , then feeds document embeddings into a linear classifier .","[('treats', (12, 13)), ('as', (21, 22)), ('feeds', (26, 27)), ('into', (29, 30))]","[('fast Text', (0, 2)), ('average of word / n- grams embeddings', (14, 21)), ('document embeddings', (22, 24)), ('document embeddings', (27, 29)), ('linear classifier', (31, 33))]",[],[],[],[]
baselines,"SWEM : simple word embedding models , which employs simple pooling strategies operated over word embeddings .","[('employs', (8, 9)), ('operated over', (12, 14))]","[('SWEM', (0, 1)), ('simple word embedding models', (2, 6)), ('simple pooling strategies', (9, 12)), ('word embeddings', (14, 16))]",[],[],[],[]
baselines,"LEAM : label - embedding attentive models , which embeds the words and labels in the same joint space for text classification .","[('embeds', (9, 10)), ('in', (14, 15)), ('for', (19, 20))]","[('LEAM', (0, 1)), ('label - embedding attentive models', (2, 7)), ('words and labels', (11, 14)), ('same joint space', (16, 19)), ('text classification', (20, 22))]",[],[],[],[]
baselines,It utilizes label descriptions .,"[('utilizes', (1, 2))]","[('label descriptions', (2, 4))]",[],[],[],[]
baselines,"Graph - CNN - C : a graph CNN model that operates convolutions over word embedding similarity graphs ( Defferrard , Bresson , and Vandergheynst 2016 ) , in which Chebyshev filter is used .","[('operates', (11, 12)), ('over', (13, 14))]","[('Graph - CNN - C', (0, 5)), ('graph CNN model', (7, 10)), ('convolutions', (12, 13)), ('word embedding similarity graphs', (14, 18)), ('Chebyshev filter', (30, 32))]",[],[],[],[]
baselines,Graph - CNN - S : the same as Graph - CNN - C but using Spline filter ) . ,"[('using', (15, 16))]","[('Graph - CNN - S', (0, 5)), ('Spline filter', (16, 18))]",[],[],[],[]
baselines,Graph - CNN - F : the same as Graph - CNN - C but using Fourier filter .,"[('same as', (7, 9)), ('using', (15, 16))]","[('Graph - CNN - F', (0, 5)), ('Graph - CNN - C', (9, 14)), ('Fourier filter', (16, 18))]",[],[],[],[]
hyperparameters,"For Text GCN , we set the embedding size of the first convolution layer as 200 and set the window size as 20 .","[('For', (0, 1)), ('set', (5, 6)), ('of', (9, 10)), ('as', (14, 15)), ('set', (17, 18)), ('as', (21, 22))]","[('Text GCN', (1, 3)), ('embedding size', (7, 9)), ('first convolution layer', (11, 14)), ('200', (15, 16)), ('window size', (19, 21)), ('20', (22, 23))]",[],[],[],[]
hyperparameters,"We tuned other parameters and set the learning rate as 0.02 , dropout For baseline models , we used default parameter settings as in their original papers or implementations .","[('tuned', (1, 2)), ('set', (5, 6)), ('as', (9, 10))]","[('other parameters', (2, 4)), ('learning rate', (7, 9)), ('0.02', (10, 11)), ('dropout', (12, 13)), ('default parameter settings', (19, 22))]",[],[],[],[]
hyperparameters,"For baseline models using pre-trained word embeddings , we used 300 dimensional Glo Ve word embeddings ( Pennington , Socher , and Manning 2014 )","[('For', (0, 1)), ('using', (3, 4)), ('used', (9, 10))]","[('baseline models', (1, 3)), ('pre-trained word embeddings', (4, 7)), ('300 dimensional Glo Ve word embeddings', (10, 16))]",[],[],[],[]
results,"Text GCN performs the best and significantly outperforms all baseline models ( p < 0.05 based on student t- test ) on four datasets , which showcases the effectiveness of the proposed method on long text datasets .","[('performs', (2, 3)), ('on', (21, 22))]","[('Text GCN', (0, 2)), ('best', (4, 5)), ('significantly outperforms', (6, 8)), ('all baseline models', (8, 11)), ('four datasets', (22, 24))]",[],[],[],[]
results,"When pre-trained Glo Ve word embeddings are provided , CNN performs much better , especially on Ohsumed and 20 NG .","[('When', (0, 1)), ('provided', (7, 8)), ('performs', (10, 11)), ('especially on', (14, 16))]","[('pre-trained Glo Ve word embeddings', (1, 6)), ('CNN', (9, 10)), ('much better', (11, 13)), ('Ohsumed and 20 NG', (16, 20))]",[],[],[],[]
results,"Similarly , LSTM - based models also rely on pre-trained word embeddings and tend to perform better when documents are shorter .","[('rely on', (7, 9)), ('tend to', (13, 15)), ('perform', (15, 16)), ('when', (17, 18)), ('are', (19, 20))]","[('LSTM - based models', (2, 6)), ('pre-trained word embeddings', (9, 12)), ('better', (16, 17)), ('documents', (18, 19)), ('shorter', (20, 21))]",[],[],[],[]
results,"PV - DBOW achieves comparable results to strong baselines on 20 NG and Ohsumed , but the results on shorter text are clearly inferior to others .","[('achieves', (3, 4)), ('to', (6, 7)), ('on', (9, 10)), ('on', (18, 19))]","[('PV - DBOW', (0, 3)), ('comparable results', (4, 6)), ('strong baselines', (7, 9)), ('20 NG and Ohsumed', (10, 14)), ('shorter text', (19, 21)), ('others', (25, 26))]",[],[],[],[]
results,"PV - DM performs worse than PV - DBOW , the only comparable results are on MR , where word orders are more essential .","[('performs', (3, 4)), ('than', (5, 6))]","[('PV - DM', (0, 3)), ('worse', (4, 5)), ('PV - DBOW', (6, 9)), ('MR', (16, 17))]",[],[],[],[]
results,Graph - CNN models also show competitive performances .,"[('show', (5, 6))]","[('Graph - CNN models', (0, 4)), ('competitive performances', (6, 8))]",[],[],[],[]
research-problem,Deep Pyramid Convolutional Neural Networks for Text Categorization,[],"[('Text Categorization', (6, 8))]",[],[],[],[]
model,"We call it deep pyramid CNN ( DPCNN ) , as the computation time per layer decreases exponentially in a ' pyramid shape ' .","[('call', (1, 2)), ('as', (10, 11)), ('in', (18, 19))]","[('deep pyramid CNN ( DPCNN )', (3, 9)), ('computation time per layer', (12, 16))]",[],[],[],[]
model,"After converting discrete text to continuous representation , the DPCNN architecture simply alternates a convolution block and a downsampling layer over and over 1 , leading to a deep network in which internal data size ( as well as per-layer computation ) shrinks in a pyramid shape .","[('After converting', (0, 2)), ('to', (4, 5)), ('alternates', (12, 13)), ('over and over', (20, 23)), ('leading to', (25, 27)), ('in which', (30, 32)), ('shrinks in', (42, 44))]","[('discrete text', (2, 4)), ('continuous representation', (5, 7)), ('DPCNN architecture', (9, 11)), ('convolution block', (14, 16)), ('downsampling layer', (18, 20)), ('1', (23, 24)), ('deep network', (28, 30)), ('internal data size', (32, 35)), ('pyramid shape', (45, 47))]",[],[],[],[]
model,The network depth can be treated as a meta-parameter .,"[('treated as', (5, 7))]","[('network depth', (1, 3)), ('meta-parameter', (8, 9))]",[],[],[],[]
model,The computational complexity of this network is bounded to be no more than twice that of one convolution block .,"[('of', (3, 4)), ('bounded to be', (7, 10))]","[('computational complexity', (1, 3)), ('network', (5, 6)), ('one convolution block', (16, 19))]",[],[],[],[]
model,We show that DPCNN with 15 weight layers outperforms the previous best models on six benchmark datasets for sentiment classification and topic classification ..,"[('show', (1, 2)), ('with', (4, 5)), ('outperforms', (8, 9)), ('on', (13, 14)), ('for', (17, 18))]","[('DPCNN', (3, 4)), ('15 weight layers', (5, 8)), ('previous best models', (10, 13)), ('six benchmark datasets', (14, 17)), ('sentiment classification', (18, 20))]",[],[],[],[]
model,"The first layer performs text region embedding , which generalizes commonly used word embedding to the embedding of text regions covering one or more words .","[('performs', (3, 4)), ('to', (14, 15)), ('of', (17, 18))]","[('first layer', (1, 3)), ('text region embedding', (4, 7)), ('generalizes', (9, 10)), ('commonly used word embedding', (10, 14)), ('embedding', (16, 17)), ('text regions', (18, 20)), ('covering', (20, 21)), ('one or more words', (21, 25))]",[],[],[],[]
model,It is followed by stacking of convolution blocks ( two convolution layers and a shortcut ) interleaved with pooling layers with stride 2 for downsampling .,"[('followed by', (2, 4)), ('of', (5, 6)), ('interleaved with', (16, 18)), ('with', (20, 21)), ('for', (23, 24))]","[('stacking', (4, 5)), ('pooling layers', (18, 20)), ('stride 2', (21, 23)), ('downsampling', (24, 25))]",[],[],[],[]
model,The final pooling layer aggregates internal data for each document into one vector .,"[('for', (7, 8)), ('into', (10, 11))]","[('final pooling layer', (1, 4)), ('aggregates', (4, 5)), ('internal data', (5, 7)), ('each document', (8, 10)), ('one vector', (11, 13))]",[],[],[],[]
hyperparameters,We use max pooling for all pooling layers .,"[('use', (1, 2)), ('for', (4, 5))]","[('max pooling', (2, 4)), ('all pooling layers', (5, 8))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,Large data results,[],"[('Large data results', (0, 3))]",[],[],[],[]
results,"On all the five datasets , DPCNN outperforms all of the previous results , which validates the effectiveness of our approach .","[('On', (0, 1)), ('outperforms', (7, 8)), ('validates', (15, 16))]","[('all the five datasets', (1, 5)), ('DPCNN', (6, 7)), ('all of the previous results', (8, 13))]",[],[],[],[]
results,Small data results,[],"[('Small data results', (0, 3))]",[],[],[],[]
results,"For these small datasets , the DPCNN performances with 100 - dim unsupervised embed - dings are shown , which turned out to be as good as those with 300 - dim unsupervised embeddings .","[('with', (8, 9)), ('turned out to be', (20, 24)), ('as good as', (24, 27)), ('with', (28, 29))]","[('DPCNN performances', (6, 8)), ('100 - dim unsupervised embed - dings', (9, 16)), ('300 - dim unsupervised embeddings', (29, 34))]",[],[],[],[]
results,"ShallowCNN ( row 2 ) rivals DPCNN ( row 1 ) , and Zhang et al. 's best linear model ( row 3 ) moved up from the worst performer to the third best performer .","[('rivals', (5, 6)), ('moved up', (24, 26)), ('from', (26, 27)), ('to', (30, 31))]","[('ShallowCNN', (0, 1)), ('DPCNN', (6, 7)), ('Zhang', (13, 14)), ('best linear model', (17, 20)), ('worst performer', (28, 30)), ('third best performer', (32, 35))]",[],[],[],[]
research-problem,Supervised and Semi- Supervised Text Categorization using LSTM for Region Embeddings,[],"[('Supervised and Semi- Supervised Text Categorization', (0, 6))]",[],[],[],[]
research-problem,"One - hot CNN ( convolutional neural network ) has been shown to be effective for text categorization ( Johnson & Zhang , 2015a ; b ) .",[],"[('text categorization', (16, 18))]",[],[],[],[]
model,"In this work , we build on the general framework of ' region embedding + pooling ' and explore a more sophisticated region embedding via Long Short - Term Memory ( LSTM ) , seeking to overcome the shortcomings above , in the supervised and semi-supervised settings .","[('build on', (5, 7)), ('of', (10, 11)), ('explore', (18, 19)), ('via', (24, 25)), ('in', (41, 42))]","[('general framework', (8, 10)), ('region embedding + pooling', (12, 16)), ('more sophisticated region embedding', (20, 24)), ('Long Short - Term Memory ( LSTM )', (25, 33)), ('supervised and semi-supervised settings', (43, 47))]",[],[],[],[]
model,It is designed to enable learning of dependencies over larger time lags than feasible with traditional recurrent networks .,"[('designed to enable', (2, 5)), ('of', (6, 7)), ('over', (8, 9)), ('than', (12, 13))]","[('learning', (5, 6)), ('dependencies', (7, 8)), ('larger time lags', (9, 12)), ('traditional recurrent networks', (15, 18))]",[],[],[],[]
model,"That is , an LSTM can be used to embed text regions of variable ( and possibly large ) sizes .","[('of', (12, 13))]","[('LSTM', (4, 5)), ('text regions', (10, 12)), ('variable ( and possibly large ) sizes', (13, 20))]",[],[],[],[]
model,"Our strategy is to simplify the model as much as possible , including elimination of a word embedding layer routinely used to produce input to LSTM .","[('to', (3, 4)), ('simplify', (4, 5)), ('including', (12, 13)), ('of', (14, 15))]","[('model', (6, 7)), ('elimination', (13, 14)), ('word embedding layer', (16, 19)), ('LSTM', (25, 26))]",[],[],[],[]
code,Our code and experimental details are available at http://riejohnson.com/cnn download.html .,[],"[('http://riejohnson.com/cnn download.html', (8, 10))]",[],[],[],[]
experiments,Experiments ( supervised ),[],[],[],[],[],[]
experiments,Optimization was done with SGD with mini-batch size 50 or 100 with momentum or optionally rmsprop for acceleration .,"[('done with', (2, 4)), ('with', (5, 6)), ('with', (11, 12)), ('for', (16, 17))]","[('Optimization', (0, 1)), ('SGD', (4, 5)), ('mini-batch size', (6, 8)), ('50 or 100', (8, 11)), ('momentum', (12, 13)), ('optionally', (14, 15)), ('rmsprop', (15, 16)), ('acceleration', (17, 18))]",[],[],[],[]
experiments,"Comparing the two types of LSTM in , we see that our one - hot bidirectional LSTM with pooling ( oh - 2 LSTMp ) outperforms word - vector LSTM ( wv - LSTM ) on all the datasets , confirming the effectiveness of our approach .","[('see that', (9, 11)), ('outperforms', (25, 26)), ('on', (35, 36))]","[('our one - hot bidirectional LSTM with pooling ( oh - 2 LSTMp )', (11, 25)), ('word - vector LSTM ( wv - LSTM )', (26, 35)), ('all the datasets', (36, 39))]",[],[],[],[]
baselines,Now we review the non -LSTM baseline methods .,[],"[('non -LSTM baseline methods', (4, 8))]",[],[],[],[]
results,"In , on three out of the four datasets , oh - 2 LSTMp outperforms SVM and the CNN .","[('on', (2, 3)), ('outperforms', (14, 15))]","[('three out of the four datasets', (3, 9)), ('oh - 2 LSTMp', (10, 14)), ('CNN', (18, 19))]",[],[],[],[]
results,"Only on RCV1 , n-gram SVM is no better than bag - of - word SVM , and only on RCV1 , bow - CNN outperforms seq-CNN .","[('is', (6, 7)), ('no better than', (7, 10)), ('outperforms', (25, 26))]","[('RCV1', (2, 3)), ('n-gram SVM', (4, 6)), ('bag - of - word SVM', (10, 16)), ('RCV1', (20, 21)), ('bow - CNN', (22, 25)), ('seq-CNN', (26, 27))]",[],[],[],[]
results,"Overall , one - hot CNN works surprising well considering its simplicity , and this observation motivates the idea of combining the two types of region embeddings , discussed later .","[('works', (6, 7))]","[('one - hot CNN', (2, 6)), ('surprising well', (7, 9)), ('simplicity', (11, 12))]",[],[],[],[]
results,"The previous best performance on 20NG is 15.3 ( not shown in the table ) of DL15 , obtained by pre-training wv - LSTM of 1024 units with labeled training data .","[('on', (4, 5)), ('is', (6, 7)), ('of', (15, 16)), ('obtained by', (18, 20)), ('of', (24, 25)), ('with', (27, 28))]","[('previous best performance', (1, 4)), ('20NG', (5, 6)), ('15.3', (7, 8)), ('DL15', (16, 17)), ('pre-training wv - LSTM', (20, 24)), ('1024 units', (25, 27)), ('labeled training data', (28, 31))]",[],[],[],[]
results,"Our oh - 2 LSTMp achieved 13.32 , which is 2 % better .","[('achieved', (5, 6))]","[('oh - 2 LSTMp', (1, 5)), ('13.32', (6, 7)), ('2 % better', (10, 13))]",[],[],[],[]
experiments,Semi-supervised experiments,[],"[('Semi-supervised experiments', (0, 2))]",[],[],[],[]
results,"Although the pre-trained wv - LSTM clearly outperformed the supervised wv - LSTM , it underperformed the models with region tv-embeddings .","[('underperformed', (15, 16)), ('with', (18, 19))]","[('pre-trained wv - LSTM', (2, 6)), ('supervised wv - LSTM', (9, 13)), ('models', (17, 18)), ('region tv-embeddings', (19, 21))]",[],[],[],[]
results,"On our tasks , wv - 2 LSTMp using the Google News vectors ( row # 2 ) performed relatively poorly .","[('On', (0, 1)), ('using', (8, 9)), ('performed', (18, 19))]","[('our tasks', (1, 3)), ('wv - 2 LSTMp', (4, 8)), ('Google News vectors', (10, 13)), ('relatively poorly', (19, 21))]",[],[],[],[]
results,"Now we review the performance of one - hot CNN with one 200 - dim CNN tv-embedding row # 5 ) , which is comparable with our LSTM with two 100 - dim LSTM tv-embeddings ( row # 4 ) in terms of the dimensionality of tv-embeddings .","[('review', (2, 3)), ('of', (5, 6)), ('with', (10, 11)), ('comparable with', (24, 26)), ('in terms of', (40, 43))]","[('performance', (4, 5)), ('one - hot CNN', (6, 10)), ('one 200 - dim CNN tv-embedding', (11, 17)), ('our LSTM', (26, 28))]",[],[],[],[]
results,The LSTM ( row # 4 ) rivals or outperforms the CNN ( row # 5 ) on IMDB / Elec but underperforms it on RCV1 .,"[('rivals or outperforms', (7, 10)), ('on', (17, 18)), ('on', (24, 25))]","[('LSTM', (1, 2)), ('CNN', (11, 12)), ('IMDB / Elec', (18, 21)), ('underperforms', (22, 23)), ('RCV1', (25, 26))]",[],[],[],[]
results,"Increasing the dimensionality of LSTM tvembeddings from 100 to 300 on RCV1 , we obtain 8.62 , but it still does not reach 7.97 of the CNN .","[('Increasing', (0, 1)), ('of', (3, 4)), ('from', (6, 7)), ('on', (10, 11)), ('obtain', (14, 15)), ('does not reach', (20, 23)), ('of', (24, 25))]","[('dimensionality', (2, 3)), ('LSTM tvembeddings', (4, 6)), ('100 to 300', (7, 10)), ('RCV1', (11, 12)), ('8.62', (15, 16)), ('7.97', (23, 24)), ('CNN', (26, 27))]",[],[],[],[]
research-problem,ADVERSARIAL TRAINING METHODS FOR SEMI - SUPERVISED TEXT CLASSIFICATION,[],"[('SEMI - SUPERVISED TEXT CLASSIFICATION', (4, 9))]",[],[],[],[]
research-problem,Previous work has primarily applied adversarial and virtual adversarial training to image classification tasks .,[],"[('image classification', (11, 13))]",[],[],[],[]
model,"In this work , we extend these techniques to text classification tasks and sequence models .","[('to', (8, 9))]","[('text classification tasks', (9, 12))]",[],[],[],[]
model,Adversarial perturbations typically consist of making small modifications to very many real - valued inputs .,"[('consist of', (3, 5)), ('to', (8, 9))]","[('Adversarial perturbations', (0, 2)), ('small modifications', (6, 8))]",[],[],[],[]
research-problem,"For text classification , the input is discrete , and usually represented as a series of highdimensional one - hot vectors .","[('is', (6, 7)), ('represented as', (11, 13))]","[('text classification', (1, 3)), ('input', (5, 6)), ('discrete', (7, 8))]",[],[],[],[]
model,"Because the set of high - dimensional one - hot vectors does not admit infinitesimal perturbation , we define the perturbation on continuous word embeddings instead of discrete word inputs .","[('define', (18, 19)), ('on', (21, 22)), ('instead of', (25, 27))]","[('perturbation', (20, 21)), ('continuous word embeddings', (22, 25)), ('discrete word inputs', (27, 30))]",[],[],[],[]
model,We thus propose this approach exclusively as a means of regularizing a text classifier by stabilizing the classification function .,"[('propose', (2, 3)), ('by stabilizing', (14, 16))]","[('text classifier', (12, 14)), ('classification function', (17, 19))]",[],[],[],[]
experimental-setup,All experiments used TensorFlow on GPUs .,"[('used', (2, 3)), ('on', (4, 5))]","[('TensorFlow', (3, 4)), ('GPUs', (5, 6))]",[],[],[],[]
code,Code will be available at https://github.com/tensorflow/models/tree/master/adversarial_text.,[],"[('https://github.com/tensorflow/models/tree/master/adversarial_text.', (5, 6))]",[],[],[],[]
experimental-setup,"We trained for 100,000 steps .","[('trained for', (1, 3))]","[('100,000 steps', (3, 5))]",[],[],[],[]
experimental-setup,We applied gradient clipping with norm set to 1.0 on all the parameters except word embeddings .,"[('applied', (1, 2)), ('with', (4, 5)), ('set to', (6, 8)), ('on', (9, 10)), ('except', (13, 14))]","[('gradient clipping', (2, 4)), ('norm', (5, 6)), ('1.0', (8, 9)), ('all the parameters', (10, 13)), ('word embeddings', (14, 16))]",[],[],[],[]
experimental-setup,"For regularization of the recurrent language model , we applied dropout on the word embedding layer with 0.5 dropout rate .","[('For', (0, 1)), ('of', (2, 3)), ('applied', (9, 10)), ('on', (11, 12)), ('with', (16, 17))]","[('regularization', (1, 2)), ('recurrent language model', (4, 7)), ('dropout', (10, 11)), ('word embedding layer', (13, 16)), ('0.5 dropout rate', (17, 20))]",[],[],[],[]
experimental-setup,"For the bidirectional LSTM model , we used 512 hidden units LSTM for both the standard order and reversed order sequences , and we used 256 dimensional word embeddings which are shared with both of the LSTMs .","[('For', (0, 1)), ('used', (7, 8)), ('for', (12, 13)), ('used', (24, 25)), ('shared with', (31, 33))]","[('bidirectional LSTM model', (2, 5)), ('512 hidden units LSTM', (8, 12)), ('standard order and reversed order sequences', (15, 21)), ('256 dimensional word embeddings', (25, 29))]",[],[],[],[]
results,We saw that cosine distance on adversarial and virtual adversarial training ( 0.159-0.331 ) were much smaller than ones on the baseline and random perturbation method ( 0.244-0.399 ) .,"[('saw that', (1, 3)), ('on', (5, 6)), ('were', (14, 15)), ('than', (17, 18)), ('on', (19, 20))]","[('cosine distance', (3, 5)), ('adversarial and virtual adversarial training ( 0.159-0.331 )', (6, 14)), ('much smaller', (15, 17)), ('baseline and random perturbation method ( 0.244-0.399 )', (21, 29))]",[],[],[],[]
results,shows the test performance on the Elec and RCV1 datasets .,"[('shows', (0, 1)), ('on', (4, 5))]","[('test performance', (2, 4)), ('Elec and RCV1 datasets', (6, 10))]",[],[],[],[]
results,"We can see our proposed method improved test performance on the baseline method and achieved state of the art performance on both datasets , even though the state of the art method uses a combination of CNN and bidirectional LSTM models .","[('on', (9, 10)), ('achieved', (14, 15)), ('on', (20, 21))]","[('improved', (6, 7)), ('test performance', (7, 9)), ('baseline method', (11, 13)), ('state of the art performance', (15, 20)), ('both datasets', (21, 23))]",[],[],[],[]
results,Our unidirectional LSTM model improves on the state of the art method and our method with a bidirectional LSTM further improves results on RCV1 .,"[('improves on', (4, 6)), ('with', (15, 16)), ('on', (22, 23))]","[('Our unidirectional LSTM model', (0, 4)), ('state of the art method', (7, 12)), ('our method', (13, 15)), ('bidirectional LSTM', (17, 19)), ('improves', (20, 21)), ('results', (21, 22)), ('RCV1', (23, 24))]",[],[],[],[]
results,shows test performance on the Rotten Tomatoes dataset .,"[('shows', (0, 1)), ('on', (3, 4))]","[('test performance', (1, 3)), ('Rotten Tomatoes dataset', (5, 8))]",[],[],[],[]
results,"Adversarial training was able to improve over the baseline method , and with both adversarial and virtual adversarial cost , achieved almost the same performance as the current state of the art method .","[('able to', (3, 5)), ('over', (6, 7)), ('with', (12, 13)), ('achieved', (20, 21)), ('as', (25, 26))]","[('Adversarial training', (0, 2)), ('improve', (5, 6)), ('baseline method', (8, 10)), ('adversarial and virtual adversarial cost', (14, 19)), ('almost the same performance', (21, 25)), ('current state of the art method', (27, 33))]",[],[],[],[]
results,However the test performance of only virtual adversarial training was worse than the baseline .,"[('of', (4, 5)), ('was', (9, 10)), ('worse than', (10, 12)), ('than', (11, 12))]","[('test performance', (2, 4)), ('only virtual adversarial training', (5, 9)), ('worse', (10, 11)), ('baseline', (13, 14))]",[],[],[],[]
research-problem,A C - LSTM Neural Network for Text Classification,[],"[('Text Classification', (7, 9))]",[],[],[],[]
model,"In this paper , we introduce a new architecture short for C - LSTM by combining CNN and LSTM to model sentences .","[('introduce', (5, 6)), ('short for', (9, 11)), ('by combining', (14, 16)), ('to model', (19, 21))]","[('new architecture', (7, 9)), ('C - LSTM', (11, 14)), ('CNN and LSTM', (16, 19)), ('sentences', (21, 22))]",[],[],[],[]
model,"To benefit from the advantages of both CNN and RNN , we design a simple end - to - end , unified architecture by feeding the output of a one - layer CNN into LSTM .","[('design', (12, 13)), ('by feeding', (23, 25)), ('of', (27, 28)), ('into', (33, 34))]","[('simple end - to - end , unified architecture', (14, 23)), ('output', (26, 27)), ('one - layer CNN', (29, 33)), ('LSTM', (34, 35))]",[],[],[],[]
model,The CNN is constructed on top of the pre-trained word vectors from massive unlabeled text data to learn higher - level representions of n-grams .,"[('constructed on top of', (3, 7)), ('from', (11, 12)), ('to learn', (16, 18)), ('of', (22, 23))]","[('CNN', (1, 2)), ('pre-trained word vectors', (8, 11)), ('massive unlabeled text data', (12, 16)), ('higher - level representions', (18, 22)), ('n-grams', (23, 24))]",[],[],[],[]
model,"Then to learn sequential correlations from higher - level suqence representations , the feature maps of CNN are organized as sequential window features to serve as the input of LSTM .","[('to learn', (1, 3)), ('from', (5, 6)), ('of', (15, 16)), ('organized as', (18, 20)), ('to serve as', (23, 26)), ('of', (28, 29))]","[('sequential correlations', (3, 5)), ('higher - level suqence representations', (6, 11)), ('feature maps', (13, 15)), ('CNN', (16, 17)), ('sequential window features', (20, 23)), ('input', (27, 28)), ('LSTM', (29, 30))]",[],[],[],[]
model,"We choose sequence - based input other than relying on the syntactic parse trees before feeding in the neural network , thus our model does n't rely on any external language knowledge and complicated pre-processing .","[('choose', (1, 2)), ('other than', (6, 8)), ('relying on', (8, 10)), ('before feeding in', (14, 17))]","[('sequence - based input', (2, 6)), ('syntactic parse trees', (11, 14)), ('neural network', (18, 20))]",[],[],[],[]
baselines,"We implement our model based on Theano ) - a python library , which supports efficient symbolic differentiation and transparent use of a GPU .","[('implement', (1, 2)), ('based on', (4, 6)), ('supports', (14, 15)), ('transparent use of', (19, 22))]","[('our model', (2, 4)), ('Theano', (6, 7)), ('python library', (10, 12)), ('efficient symbolic differentiation', (15, 18)), ('GPU', (23, 24))]",[],[],[],[]
experimental-setup,"To benefit from the efficiency of parallel computation of the tensors , we train the model on a GPU .","[('of', (5, 6)), ('of', (8, 9)), ('train', (13, 14)), ('on', (16, 17))]","[('tensors', (10, 11)), ('model', (15, 16)), ('GPU', (18, 19))]",[],[],[],[]
experimental-setup,"In our final settings , we only use one convolutional layer and one LSTM layer for both tasks .","[('use', (7, 8)), ('for', (15, 16))]","[('one convolutional layer and one LSTM layer', (8, 15)), ('both tasks', (16, 18))]",[],[],[],[]
experimental-setup,"For TREC , the number of filters is set to be 300 and the memory dimension is set to be 300 .","[('For', (0, 1)), ('set to be', (8, 11)), ('set to be', (17, 20))]","[('TREC', (1, 2)), ('number of filters', (4, 7)), ('300', (11, 12)), ('memory dimension', (14, 16)), ('300', (20, 21))]",[],[],[],[]
experimental-setup,The word vector layer and the LSTM layer are dropped outwith a probability of 0.5 .,"[('dropped outwith', (9, 11)), ('of', (13, 14))]","[('word vector layer and the LSTM layer', (1, 8)), ('probability', (12, 13)), ('0.5', (14, 15))]",[],[],[],[]
experimental-setup,We also add L2 regularization with a factor of 0.001 to the weights in the softmax layer for both tasks .,"[('add', (2, 3)), ('with', (5, 6)), ('of', (8, 9)), ('to', (10, 11)), ('in', (13, 14)), ('for', (17, 18))]","[('L2 regularization', (3, 5)), ('factor', (7, 8)), ('0.001', (9, 10)), ('weights', (12, 13)), ('softmax layer', (15, 17)), ('both tasks', (18, 20))]",[],[],[],[]
experiments,Results and Model Analysis,[],[],[],[],[],[]
results,Sentiment Classification,[],"[('Sentiment Classification', (0, 2))]",[],[],[],[]
results,"To the best of our knowledge , we achieve the fourth best published result for the 5 - class classification task on this dataset .","[('achieve', (8, 9)), ('for', (14, 15))]","[('fourth best published result', (10, 14)), ('5 - class classification task', (16, 21))]",[],[],[],[]
results,"For the binary classification task , we achieve comparable results with respect to the state - of - the - art ones .","[('For', (0, 1)), ('achieve', (7, 8)), ('with respect to', (10, 13))]","[('binary classification task', (2, 5)), ('comparable results', (8, 10)), ('state - of - the - art ones', (14, 22))]",[],[],[],[]
results,Question Type Classification,[],"[('Question Type Classification', (0, 3))]",[],[],[],[]
results,"( 1 ) Our result consistently outperforms all published neural baseline models , which means that C - LSTM captures intentions of TREC questions well .",[],"[('consistently outperforms', (5, 7)), ('all published neural baseline models', (7, 12))]",[],[],[],[]
results,( 2 ) Our result is close to that of the state - of - the - art SVM that depends on highly engineered features .,"[('close to', (6, 8)), ('of', (9, 10)), ('depends on', (20, 22))]","[('state - of - the - art SVM', (11, 19)), ('highly engineered features', (22, 25))]",[],[],[],[]
ablation-analysis,"However , we found in our experiments that single convolutional layer with filter length 3 always outperforms the other cases .","[('with', (11, 12)), ('always outperforms', (15, 17))]","[('single convolutional layer', (8, 11)), ('filter length 3', (12, 15)), ('other cases', (18, 20))]",[],[],[],[]
ablation-analysis,It it shown that single convolutional layer with filter length 3 performs best among all filter configurations .,"[('shown', (2, 3)), ('with', (7, 8)), ('performs', (11, 12)), ('among', (13, 14))]","[('single convolutional layer', (4, 7)), ('filter length 3', (8, 11)), ('best', (12, 13)), ('all filter configurations', (14, 17))]",[],[],[],[]
ablation-analysis,"For the case of multiple convolutional layers in parallel , it is shown that filter configurations with filter length 3 performs better that those without tri-gram filters , which further confirms that tri-gram features do play a significant role in capturing local features in our tasks .","[('For', (0, 1)), ('shown that', (12, 14)), ('with', (16, 17)), ('performs', (20, 21)), ('that', (22, 23)), ('without', (24, 25))]","[('multiple convolutional layers', (4, 7)), ('in parallel', (7, 9)), ('filter configurations', (14, 16)), ('filter length 3', (17, 20)), ('better', (21, 22)), ('tri-gram filters', (25, 27))]",[],[],[],[]
research-problem,Very Deep Convolutional Networks for Text Classification,[],"[('Text Classification', (5, 7))]",[],[],[],[]
research-problem,"We believe that a challenge in NLP is to develop deep architectures which are able to learn hierarchical representations of whole sentences , jointly with the task .",[],[],[],[],[],[]
model,"In this paper , we propose to use deep architectures of many convolutional layers to approach this goal , using up to 29 layers .","[('of', (10, 11)), ('using', (19, 20))]","[('deep architectures', (8, 10)), ('many convolutional layers', (11, 14)), ('up to 29 layers', (20, 24))]",[],[],[],[]
experimental-setup,"The dictionary consists of the following characters "" abcdefghijklmnopqrstuvwxyz0123456 789-,;.!?:'"" / | # $ % & *' +=<>( ) [ ]{} "" plus a special padding , space and unknown token which add up to a total of 69 tokens .","[('consists of', (2, 4)), ('plus', (22, 23)), ('add up to', (32, 35)), ('total of', (36, 38))]","[('dictionary', (1, 2)), ('following characters', (5, 7)), ('abcdefghijklmnopqrstuvwxyz0123456', (8, 9)), ('special padding', (24, 26)), ('space and unknown token', (27, 31)), ('69 tokens', (38, 40))]",[],[],[],[]
experimental-setup,"The input text is padded to a fixed size of 1014 , larger text are truncated .","[('padded to', (4, 6)), ('of', (9, 10))]","[('input text', (1, 3)), ('fixed size', (7, 9)), ('1014', (10, 11)), ('larger text', (12, 14)), ('truncated', (15, 16))]",[],[],[],[]
experimental-setup,The character embedding is of size 16 .,"[('of', (4, 5))]","[('character embedding', (1, 3)), ('size', (5, 6)), ('16', (6, 7))]",[],[],[],[]
experimental-setup,"Training is performed with SGD , using a mini-batch of size 128 , an initial learning rate of 0.01 and momentum of 0.9 .","[('performed with', (2, 4)), ('using', (6, 7)), ('of size', (9, 11)), ('of', (17, 18)), ('of', (21, 22))]","[('Training', (0, 1)), ('SGD', (4, 5)), ('mini-batch', (8, 9)), ('128', (11, 12)), ('initial learning rate', (14, 17)), ('0.01', (18, 19)), ('momentum', (20, 21)), ('0.9', (22, 23))]",[],[],[],[]
experimental-setup,The implementation is done using Torch 7 .,"[('done using', (3, 5))]","[('implementation', (1, 2)), ('Torch', (5, 6)), ('Torch 7', (5, 7))]",[],[],[],[]
experimental-setup,All experiments are performed on a single NVidia K40 GPU .,"[('performed on', (3, 5))]","[('single NVidia K40 GPU', (6, 10))]",[],[],[],[]
experimental-setup,"Unlike previous research on the use of ConvNets for text processing , we use temporal batch norm without dropout .","[('use', (13, 14)), ('without', (17, 18))]","[('temporal batch norm', (14, 17)), ('dropout', (18, 19))]",[],[],[],[]
results,"Our deep architecture works well on big data sets in particular , even for small depths .","[('works', (3, 4)), ('on', (5, 6)), ('even for', (12, 14))]","[('deep architecture', (1, 3)), ('well', (4, 5)), ('big data sets', (6, 9)), ('small depths', (14, 16))]",[],[],[],[]
results,"For the smallest depth we use ( 9 convolutional layers ) , we see that our model already performs better than Zhang 's convolutional baselines ( which includes 6 convolutional layers and has a different architecture ) on the biggest data sets :","[('For', (0, 1)), ('use', (5, 6)), ('see that', (13, 15)), ('performs', (18, 19)), ('than', (20, 21)), ('on', (37, 38))]","[('smallest depth', (2, 4)), ('our model', (15, 17)), (""Zhang 's convolutional baselines"", (21, 25)), ('biggest data sets', (39, 42))]",[],[],[],[]
results,The most important decrease in classification error can be observed on the largest data set Amazon Full which has more than 3 Million training samples . :,"[('in', (4, 5)), ('observed on', (9, 11))]","[('most important decrease', (1, 4)), ('classification error', (5, 7)), ('largest data set Amazon Full', (12, 17)), ('more than 3 Million training samples', (19, 25))]",[],[],[],[]
results,"We also observe that for a small depth , temporal max - pooling works best on all data sets .","[('observe', (2, 3)), ('for', (4, 5)), ('works', (13, 14)), ('on', (15, 16))]","[('small depth', (6, 8)), ('temporal max - pooling', (9, 13)), ('best', (14, 15)), ('all data sets', (16, 19))]",[],[],[],[]
research-problem,Character - level Convolutional Networks for Text Classification,[],"[('Text Classification', (6, 8))]",[],[],[],[]
model,"In this article we explore treating text as a kind of raw signal at character level , and applying temporal ( one-dimensional ) ConvNets to it .","[('treating', (5, 6)), ('as', (7, 8)), ('at', (13, 14)), ('applying', (18, 19))]","[('text', (6, 7)), ('kind of raw signal', (9, 13)), ('character level', (14, 16)), ('temporal ( one-dimensional ) ConvNets', (19, 24))]",[],[],[],[]
experiments,Traditional Methods,[],"[('Traditional Methods', (0, 2))]",[],[],[],[]
baselines,Bag - of - words and its TFIDF .,[],"[('Bag - of - words', (0, 5)), ('TFIDF', (7, 8))]",[],[],[],[]
hyperparameters,"For each dataset , the bag - of - words model is constructed by selecting 50,000 most frequent words from the training subset .","[('For', (0, 1)), ('constructed by selecting', (12, 15)), ('from', (19, 20))]","[('each dataset', (1, 3)), ('bag - of - words model', (5, 11)), ('50,000 most frequent words', (15, 19)), ('training subset', (21, 23))]",[],[],[],[]
baselines,Bag - of - ngrams and its TFIDF .,[],"[('Bag - of - ngrams', (0, 5)), ('TFIDF', (7, 8))]",[],[],[],[]
hyperparameters,"The bag - of - ngrams models are constructed by selecting the 500,000 most frequent n-grams ( up to 5 - grams ) from the training subset for each dataset .","[('constructed by selecting', (8, 11)), ('from', (23, 24)), ('for', (27, 28))]","[('bag - of - ngrams models', (1, 7)), ('500,000 most frequent n-grams ( up to 5 - grams )', (12, 23)), ('training subset', (25, 27)), ('each dataset', (28, 30))]",[],[],[],[]
baselines,Bag - of - means on word embedding .,"[('on', (5, 6))]","[('Bag - of - means', (0, 5)), ('word embedding', (6, 8))]",[],[],[],[]
baselines,"We also have an experimental model that uses k-means on word2vec learnt from the training subset of each dataset , and then use these learnt means as representatives of the clustered words .","[('uses', (7, 8)), ('on', (9, 10)), ('learnt from', (11, 13)), ('of', (16, 17)), ('use', (22, 23)), ('as', (26, 27)), ('of', (28, 29))]","[('experimental model', (4, 6)), ('k-means', (8, 9)), ('word2vec', (10, 11)), ('training subset', (14, 16)), ('each dataset', (17, 19)), ('learnt means', (24, 26)), ('representatives', (27, 28)), ('clustered words', (30, 32))]",[],[],[],[]
experiments,Deep Learning Methods,[],"[('Deep Learning Methods', (0, 3))]",[],[],[],[]
baselines,Word - based ConvNets .,[],"[('Word - based ConvNets', (0, 4))]",[],[],[],[]
experiments,Long - short term memory .,[],"[('Long - short term memory', (0, 5))]",[],[],[],[]
results,The most important conclusion from our experiments is that character - level ConvNets could work for text classification without the need for words .,"[('is', (7, 8)), ('work for', (14, 16)), ('without', (18, 19)), ('need for', (20, 22))]","[('character - level ConvNets', (9, 13)), ('text classification', (16, 18)), ('words', (22, 23))]",[],[],[],[]
results,"Traditional methods like n-grams TFIDF remain strong candidates for dataset of size up to several hundreds of thousands , and only until the dataset goes to the scale of several millions do we observe that character - level ConvNets start to do better .","[('like', (2, 3)), ('remain', (5, 6)), ('for', (8, 9)), ('up to', (12, 14)), ('observe', (33, 34)), ('start to do', (39, 42))]","[('Traditional methods', (0, 2)), ('n-grams TFIDF', (3, 5)), ('strong candidates', (6, 8)), ('dataset', (9, 10)), ('of size', (10, 12)), ('several hundreds of thousands', (14, 18)), ('character - level ConvNets', (35, 39)), ('better', (42, 43))]",[],[],[],[]
results,Conv Nets may work well for user - generated data .,"[('work', (3, 4)), ('for', (5, 6))]","[('Conv Nets', (0, 2)), ('well', (4, 5)), ('user - generated data', (6, 10))]",[],[],[],[]
experiments,Choice of alphabet makes a difference .,"[('makes', (3, 4))]","[('Choice of alphabet', (0, 3)), ('difference', (5, 6))]",[],[],[],[]
experiments,Semantics of tasks may not matter .,[],"[('tasks', (2, 3))]",[],[],[],[]
research-problem,Text Classification Improved by Integrating Bidirectional LSTM with Two - dimensional Max Pooling,[],"[('Text Classification', (0, 2))]",[],[],[],[]
model,"Above all , this paper proposes Bidirectional Long Short - Term Memory Networks with Two - Dimensional Max Pooling ( BLSTM - 2DPooling ) to capture features on both the time - step dimension and the feature vector dimension .","[('proposes', (5, 6)), ('to capture', (24, 26)), ('on', (27, 28))]","[('Bidirectional Long Short - Term Memory Networks with Two - Dimensional Max Pooling ( BLSTM - 2DPooling )', (6, 24)), ('features', (26, 27)), ('time - step dimension', (30, 34)), ('feature vector dimension', (36, 39))]",[],[],[],[]
model,It first utilizes Bidirectional Long Short - Term Memory Networks ( BLSTM ) to transform the text into vectors .,"[('utilizes', (2, 3)), ('to transform', (13, 15)), ('into', (17, 18))]","[('Bidirectional Long Short - Term Memory Networks ( BLSTM )', (3, 13)), ('text', (16, 17)), ('vectors', (18, 19))]",[],[],[],[]
model,And then 2D max pooling operation is utilized to obtain a fixed - length vector .,"[('utilized', (7, 8)), ('to obtain', (8, 10))]","[('2D max pooling operation', (2, 6)), ('fixed - length vector', (11, 15))]",[],[],[],[]
model,This paper also applies 2D convolution ( BLSTM - 2DCNN ) to capture more meaningful features to represent the input text .,"[('applies', (3, 4)), ('to capture', (11, 13)), ('to represent', (16, 18))]","[('2D convolution ( BLSTM - 2DCNN )', (4, 11)), ('more meaningful features', (13, 16)), ('input text', (19, 21))]",[],[],[],[]
hyperparameters,"The dimension of word embeddings is 300 , the hidden units of LSTM is 300 .","[('of', (2, 3)), ('is', (5, 6)), ('of', (11, 12)), ('is', (13, 14))]","[('dimension', (1, 2)), ('word embeddings', (3, 5)), ('300', (6, 7)), ('hidden units', (9, 11)), ('LSTM', (12, 13)), ('300', (14, 15))]",[],[],[],[]
hyperparameters,"We use 100 convolutional filters each for window sizes of ( 3 , 3 ) , 2D pooling size of ( 2 , 2 ) .","[('use', (1, 2)), ('for', (6, 7)), ('of', (9, 10)), ('of', (19, 20))]","[('100 convolutional filters', (2, 5)), ('window sizes', (7, 9)), ('( 3 , 3 )', (10, 15)), ('2D pooling size', (16, 19)), ('( 2 , 2 )', (20, 25))]",[],[],[],[]
hyperparameters,We set the mini-batch size as 10 and the learning rate of AdaDelta as the default value 1.0 .,"[('set', (1, 2)), ('as', (5, 6)), ('of', (11, 12)), ('as', (13, 14))]","[('mini-batch size', (3, 5)), ('10', (6, 7)), ('learning rate', (9, 11)), ('AdaDelta', (12, 13)), ('default value', (15, 17)), ('1.0', (17, 18))]",[],[],[],[]
hyperparameters,"For regularization , we employ Dropout operation with dropout rate of 0.5 for the word embeddings , 0.2 for the BLSTM layer and 0.4 for the penultimate layer , we also use l 2 penalty with coefficient 10 ? 5 over the parameters .","[('For', (0, 1)), ('employ', (4, 5)), ('with', (7, 8)), ('of', (10, 11)), ('for', (12, 13)), ('for', (18, 19)), ('for', (24, 25)), ('use', (31, 32)), ('with', (35, 36)), ('over', (40, 41))]","[('regularization', (1, 2)), ('Dropout operation', (5, 7)), ('dropout rate', (8, 10)), ('0.5', (11, 12)), ('word embeddings', (14, 16)), ('0.2', (17, 18)), ('BLSTM layer', (20, 22)), ('0.4', (23, 24)), ('penultimate layer', (26, 28)), ('l 2 penalty', (32, 35)), ('coefficient 10 ? 5', (36, 40)), ('parameters', (42, 43))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,The BLSTM - 2DCNN model achieves excellent performance on 4 out of 6 tasks .,"[('achieves', (5, 6)), ('on', (8, 9))]","[('BLSTM - 2DCNN model', (1, 5)), ('excellent performance', (6, 8)), ('4 out of 6 tasks', (9, 14))]",[],[],[],[]
results,"Especially , it achieves 52.4 % and 89.5 % test accuracies on SST - 1 and SST - 2 respectively .","[('achieves', (3, 4)), ('on', (11, 12))]","[('52.4 % and 89.5 % test accuracies', (4, 11)), ('SST - 1 and SST - 2', (12, 19))]",[],[],[],[]
results,BLSTM - 2DPooling performs worse than the state - of - the - art models .,"[('performs', (3, 4)), ('than', (5, 6))]","[('BLSTM - 2DPooling', (0, 3)), ('worse', (4, 5)), ('state - of - the - art models', (7, 15))]",[],[],[],[]
results,"BLSTM - CNN beats all baselines on SST - 1 , SST - 2 , and TREC datasets .","[('beats', (3, 4)), ('on', (6, 7))]","[('BLSTM - CNN', (0, 3)), ('all baselines', (4, 6)), ('SST - 1 , SST - 2 , and TREC datasets', (7, 18))]",[],[],[],[]
results,"As for Subj and MR datasets , BLSTM - 2DCNN gets a second higher accuracies .","[('gets', (10, 11))]","[('Subj and MR datasets', (2, 6)), ('BLSTM - 2DCNN', (7, 10)), ('second higher accuracies', (12, 15))]",[],[],[],[]
results,"Compared with RCNN , BLSTM - 2DCNN achieves a comparable result .","[('Compared with', (0, 2)), ('achieves', (7, 8))]","[('RCNN', (2, 3)), ('BLSTM - 2DCNN', (4, 7)), ('comparable result', (9, 11))]",[],[],[],[]
results,"Compared with ReNN , the proposed two models do not depend on external language - specific features such as dependency parse trees .","[('Compared with', (0, 2)), ('such as', (17, 19))]","[('ReNN', (2, 3)), ('external language - specific features', (12, 17)), ('dependency parse trees', (19, 22))]",[],[],[],[]
results,"Compared with DSCNN , BLSTM - 2DCNN outperforms it on five datasets .","[('Compared with', (0, 2)), ('on', (9, 10))]","[('DSCNN', (2, 3)), ('BLSTM - 2DCNN', (4, 7)), ('outperforms', (7, 8)), ('five datasets', (10, 12))]",[],[],[],[]
research-problem,Rethinking Complex Neural Network Architectures for Document Classification,[],"[('Document Classification', (6, 8))]",[],[],[],[]
approach,"Like the papers cited above , we question the need for overly complex neural architectures , focusing on the problem of document classification .",[],"[('overly complex neural architectures', (11, 15)), ('document classification', (21, 23))]",[],[],[],[]
approach,"Starting with a large - scale reproducibility study of several recent neural models , we find that a simple bi-directional LSTM ( BiLSTM ) architecture with appropriate regularization yields accuracy and F 1 that are either competitive or exceed the state of the art on four standard benchmark datasets .","[('find', (15, 16)), ('with', (25, 26)), ('yields', (28, 29)), ('competitive or exceed', (36, 39)), ('on', (44, 45))]","[('simple bi-directional LSTM ( BiLSTM ) architecture', (18, 25)), ('appropriate regularization', (26, 28)), ('accuracy and F 1', (29, 33)), ('state of the art', (40, 44)), ('four standard benchmark datasets', (45, 49))]",[],[],[],[]
baselines,"We conduct a large - scale reproducibility study involving HAN , XML - CNN , KimCNN , and SGM .","[('conduct', (1, 2)), ('involving', (8, 9))]","[('large - scale reproducibility study', (3, 8)), ('HAN', (9, 10)), ('XML - CNN', (11, 14)), ('KimCNN', (15, 16)), ('SGM', (18, 19))]",[],[],[],[]
baselines,"In addition , we compare the neural approaches to logistic regression ( LR ) and support vector machines ( SVMs ) .","[('compare', (4, 5)), ('to', (8, 9))]","[('neural approaches', (6, 8)), ('logistic regression ( LR )', (9, 14)), ('support vector machines ( SVMs )', (15, 21))]",[],[],[],[]
experimental-setup,"The LR model is trained using a one - vs - rest multi-label objective , while the SVM is trained with a linear kernel .","[('trained using', (4, 6)), ('trained with', (19, 21))]","[('LR model', (1, 3)), ('one - vs - rest multi-label objective', (7, 14)), ('SVM', (17, 18)), ('linear kernel', (22, 24))]",[],[],[],[]
experimental-setup,"All of our experiments are performed on Nvidia GTX 1080 and RTX 2080 Ti GPUs , with PyTorch 0.4.1 as the backend framework .","[('performed on', (5, 7)), ('with', (16, 17)), ('as', (19, 20))]","[('Nvidia GTX 1080 and RTX 2080 Ti GPUs', (7, 15)), ('PyTorch 0.4.1', (17, 19)), ('backend framework', (21, 23))]",[],[],[],[]
experimental-setup,We use Scikitlearn 0.19.2 for computing the tf - idf vectors and implementing LR and SVMs .,"[('use', (1, 2)), ('for computing', (4, 6)), ('implementing', (12, 13))]","[('Scikitlearn 0.19.2', (2, 4)), ('tf - idf vectors', (7, 11)), ('LR and SVMs', (13, 16))]",[],[],[],[]
results,"We see that our simple LSTM reg model achieves state of the art on Reuters and IMDB ( see , rows 9 and 10 ) , establishing mean scores of 87.0 and 52.8 for F 1 score and accuracy on the test sets of Reuters and IMDB , respectively .","[('see that', (1, 3)), ('achieves', (8, 9)), ('on', (13, 14)), ('establishing', (26, 27)), ('of', (29, 30)), ('for', (33, 34)), ('on', (39, 40)), ('of', (43, 44))]","[('our simple LSTM reg model', (3, 8)), ('state of the art', (9, 13)), ('Reuters and IMDB', (14, 17)), ('mean scores', (27, 29)), ('87.0 and 52.8', (30, 33)), ('F 1 score and accuracy', (34, 39)), ('test sets', (41, 43)), ('Reuters and IMDB', (44, 47))]",[],[],[],[]
results,"We observe that LSTM reg consistently improves upon the performance of LSTM base across all of the tasks - see rows 9 and 10 , where , on average , regularization yields increases of 1.5 and 0.5 points for F 1 score and accuracy , respectively .","[('observe', (1, 2)), ('consistently improves upon', (5, 8)), ('of', (10, 11)), ('across', (13, 14)), ('yields', (31, 32)), ('of', (33, 34)), ('for', (38, 39))]","[('LSTM reg', (3, 5)), ('performance', (9, 10)), ('LSTM base', (11, 13)), ('all of the tasks', (14, 18)), ('increases', (32, 33)), ('1.5 and 0.5 points', (34, 38)), ('F 1 score and accuracy', (39, 44))]",[],[],[],[]
results,A few of our LSTM reg runs attain state - of - theart test F 1 scores on AAPD .,"[('attain', (7, 8)), ('on', (17, 18))]","[('state - of - theart test F 1 scores', (8, 17)), ('AAPD', (18, 19))]",[],[],[],[]
results,"Interestingly , the non-neural LR and SVM baselines perform remarkably well .","[('perform', (8, 9))]","[('non-neural LR and SVM baselines', (3, 8)), ('remarkably well', (9, 11))]",[],[],[],[]
results,"On Reuters , for example , the SVM beats many neural baselines , including our non-regularized LSTM base ( rows 2 - 9 ) .","[('On', (0, 1)), ('beats', (8, 9)), ('including', (13, 14))]","[('Reuters', (1, 2)), ('SVM', (7, 8)), ('many neural baselines', (9, 12))]",[],[],[],[]
results,"On AAPD , the SVM either ties or beats the other models , losing only to SGM ( rows 2 - 8 ) .","[('On', (0, 1)), ('ties or beats', (6, 9)), ('losing only to', (13, 16))]","[('AAPD', (1, 2)), ('SVM', (4, 5)), ('other models', (10, 12)), ('SGM', (16, 17))]",[],[],[],[]
results,"Compared to the SVM , the LR baseline appears better suited for the single - label datasets IMDB and Yelp 2014 , where it achieves better accuracy than the SVM does .","[('Compared to', (0, 2)), ('appears', (8, 9)), ('better suited for', (9, 12)), ('achieves', (24, 25)), ('than', (27, 28))]","[('SVM', (3, 4)), ('LR baseline', (6, 8)), ('single - label datasets', (13, 17)), ('IMDB and Yelp 2014', (17, 21)), ('better accuracy', (25, 27))]",[],[],[],[]
research-problem,Practical Text Classification With Large Pre-Trained Language Models,[],"[('Practical Text Classification', (0, 3))]",[],[],[],[]
approach,"In this work , we train both mLSTM and Transformer language models on a large 40 GB text dataset , then transfer those models to two text classification problems : binary sentiment ( including Neutral labels ) , and multidimensional emotion classification based on the Plutchik wheel of emotions .","[('train', (5, 6)), ('on', (12, 13)), ('transfer', (21, 22)), ('to', (24, 25)), ('based on', (42, 44))]","[('mLSTM and Transformer language models', (7, 12)), ('large 40 GB text dataset', (14, 19)), ('two text classification problems', (25, 29)), ('multidimensional emotion classification', (39, 42)), ('Plutchik wheel of emotions', (45, 49))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,Binary Sentiment Tweets,[],"[('Binary Sentiment Tweets', (0, 3))]",[],[],[],[]
results,"While the Transformer gets close but does not exceed the state of the art on the SST dataset , it exceeds both the mL - STM and ELMo baseline as well as both Watson and Google Sentiment APIs on the company tweets .","[('gets', (3, 4)), ('does not exceed', (6, 9)), ('on', (14, 15)), ('exceeds', (20, 21)), ('on', (38, 39))]","[('Transformer', (2, 3)), ('close', (4, 5)), ('state of the art', (10, 14)), ('SST dataset', (16, 18)), ('mL - STM and ELMo baseline', (23, 29)), ('Watson and Google Sentiment APIs', (33, 38)), ('company tweets', (40, 42))]",[],[],[],[]
results,Multi - Label Emotion Tweets,[],"[('Multi - Label Emotion Tweets', (0, 5))]",[],[],[],[]
results,We find that our models outperform Watson on every emotion category .,"[('find that', (1, 3)), ('on', (7, 8))]","[('our models', (3, 5)), ('outperform', (5, 6)), ('Watson', (6, 7)), ('every emotion category', (8, 11))]",[],[],[],[]
results,Sem Eval Tweets,[],"[('Sem Eval Tweets', (0, 3))]",[],[],[],[]
results,"Our model achieved the top macro-averaged F1 score among all submission , with competitive but lower scores for the micro -average F1 an the Jaccard Index accuracy 8 .","[('achieved', (2, 3)), ('among', (8, 9)), ('with', (12, 13)), ('for', (17, 18))]","[('Our model', (0, 2)), ('top macro-averaged F1 score', (4, 8)), ('all submission', (9, 11)), ('competitive but lower scores', (13, 17)), ('micro -average F1', (19, 22)), ('Jaccard Index accuracy', (24, 27))]",[],[],[],[]
results,We also compare the deep learning architectures of the Transformer and m LSTM on this dataset in and find that the Transformer outperforms the m LSTM across Plutchik categories .,"[('compare', (2, 3)), ('of', (7, 8)), ('find', (18, 19)), ('outperforms', (22, 23)), ('across', (26, 27))]","[('deep learning architectures', (4, 7)), ('Transformer and m LSTM', (9, 13)), ('Transformer', (21, 22)), ('m LSTM', (24, 26)), ('Plutchik categories', (27, 29))]",[],[],[],[]
results,Our models gets lower F 1 scores on the company tweets dataset than on equivalent Se -m Eval categories .,"[('gets', (2, 3)), ('on', (7, 8)), ('than on', (12, 14))]","[('Our models', (0, 2)), ('lower F 1 scores', (3, 7)), ('company tweets dataset', (9, 12)), ('equivalent Se -m Eval categories', (14, 19))]",[],[],[],[]
research-problem,Squeezed Very Deep Convolutional Neural Networks for Text Classification,[],"[('Text Classification', (7, 9))]",[],[],[],[]
model,"In this paper , we investigate modifications on the network proposed by Conneau et al. with the aim of reducing its number of parameters , storage size and latency with minimal performance degradation .","[('investigate', (5, 6)), ('on', (7, 8)), ('reducing', (19, 20)), ('with', (29, 30))]","[('modifications', (6, 7)), ('network', (9, 10)), ('number of parameters', (21, 24)), ('minimal performance degradation', (30, 33))]",[],[],[],[]
model,To achieve these improvements we used Temporal Depthwise Separable Convolution and Global Average Pooling techniques .,"[('used', (5, 6))]","[('Temporal Depthwise Separable Convolution', (6, 10)), ('Global Average Pooling techniques', (11, 15))]",[],[],[],[]
model,"Therefore , our main contribution is to propose the Squeezed Very Deep Convolutional Neural Networks ( SVDCNN ) , a text classification model which requires significantly fewer parameters compared to the stateof - the - art CNNs .","[('propose', (7, 8)), ('requires', (24, 25)), ('compared to', (28, 30))]","[('Squeezed Very Deep Convolutional Neural Networks ( SVDCNN )', (9, 18)), ('text classification model', (20, 23)), ('significantly fewer parameters', (25, 28)), ('stateof - the - art CNNs', (31, 37))]",[],[],[],[]
experimental-setup,"For SVDCNN and Char - CNN , we calculated the abovementioned number from the network architecture implemented in PyTorch .","[('For', (0, 1)), ('calculated', (8, 9)), ('from', (12, 13)), ('implemented in', (16, 18))]","[('SVDCNN and Char - CNN', (1, 6)), ('network architecture', (14, 16)), ('PyTorch', (18, 19))]",[],[],[],[]
experimental-setup,"The SVDCNN experimental settings are similar to the original VDCNN paper , using the same dictionary and the same embedding size of 16 .","[('similar to', (5, 7)), ('using', (12, 13)), ('of', (21, 22))]","[('SVDCNN experimental settings', (1, 4)), ('same dictionary', (14, 16)), ('same embedding size', (18, 21)), ('16', (22, 23))]",[],[],[],[]
experimental-setup,"The training is also performed with SGD , utilizing size batch of 64 , with a maximum of 100 epochs .","[('performed with', (4, 6)), ('utilizing', (8, 9)), ('of', (11, 12)), ('with', (14, 15))]","[('training', (1, 2)), ('SGD', (6, 7)), ('size batch', (9, 11)), ('64', (12, 13)), ('maximum of 100 epochs', (16, 20))]",[],[],[],[]
experimental-setup,"We use an initial learning rate of 0.01 , a momentum of 0.9 and a weight decay of 0.001 .","[('of', (6, 7)), ('of', (11, 12)), ('of', (17, 18))]","[('initial learning rate', (3, 6)), ('0.01', (7, 8)), ('momentum', (10, 11)), ('0.9', (12, 13)), ('weight decay', (15, 17)), ('0.001', (18, 19))]",[],[],[],[]
experimental-setup,All the experiments were performed on an NVIDIA GTX 1060 GPU + Intel Core i 7 4770s CPU .,"[('performed on', (4, 6))]","[('NVIDIA GTX 1060 GPU', (7, 11)), ('Intel Core i 7 4770s CPU', (12, 18))]",[],[],[],[]
results,The network reduction obtained by the GAP is even more representative since both compared models use three FC layers for their classification tasks .,"[('obtained by', (3, 5)), ('is', (7, 8))]","[('network reduction', (1, 3)), ('GAP', (6, 7)), ('even more representative', (8, 11))]",[],[],[],[]
ablation-analysis,"Considering a dataset with four target classes , and comparing SVDCNN with VDCNN , the number of parameters of the FC layers has passed from 12.59 to 0.02 million parameters , representing a reduction of 99.84 % .","[('Considering', (0, 1)), ('with', (3, 4)), ('comparing', (9, 10)), ('with', (11, 12)), ('of', (18, 19)), ('from', (24, 25)), ('representing', (31, 32)), ('of', (34, 35))]","[('dataset', (2, 3)), ('four target classes', (4, 7)), ('SVDCNN', (10, 11)), ('VDCNN', (12, 13)), ('number of parameters', (15, 18)), ('FC layers', (20, 22)), ('12.59 to 0.02 million parameters', (25, 30)), ('reduction', (33, 34)), ('99.84 %', (35, 37))]",[],[],[],[]
results,"Following with the same comparison , but to Char - CNN , the proposed model is 99.82 % smaller , 0.02 against 11.36 million of FC parameters .","[('is', (15, 16)), ('against', (21, 22)), ('of', (24, 25))]","[('Char - CNN', (8, 11)), ('proposed model', (13, 15)), ('11.36 million', (22, 24)), ('FC parameters', (25, 27))]",[],[],[],[]
results,"While our most in - depth model ( 29 ) occupies only 6 MB , VDCNN with the same depth occupies 64. 16 MB of storage .","[('occupies', (10, 11)), ('with', (16, 17)), ('occupies', (20, 21)), ('of', (24, 25))]","[('most in - depth model', (2, 7)), ('VDCNN', (15, 16)), ('same depth', (18, 20)), ('64. 16 MB', (21, 24)), ('storage', (25, 26))]",[],[],[],[]
ablation-analysis,"Regarding accuracy results , usually , a model with such parameter reduction should present some loss of accuracy in comparison to the original model .","[('in comparison to', (18, 21))]","[('accuracy results', (1, 3)), ('original model', (22, 24))]",[],[],[],[]
results,"Nevertheless , the performance difference between VDCNN and SVDCNN models varies between 0.4 and 1.3 % , which is pretty modest considering the parameters and storage size reduction aforementioned .","[('between', (5, 6)), ('varies between', (10, 12))]","[('performance difference', (3, 5)), ('VDCNN and SVDCNN models', (6, 10)), ('0.4 and 1.3 %', (12, 16))]",[],[],[],[]
research-problem,Joint Embedding of Words and Labels for Text Classification,[],"[('Text Classification', (7, 9))]",[],[],[],[]
model,"Our primary contribution is therefore to propose such a solution by making use of the label embedding framework , and propose the Label - Embedding Attentive Model ( LEAM ) to improve text classification .","[('propose', (20, 21)), ('to improve', (30, 32))]","[('label embedding framework', (15, 18)), ('Label - Embedding Attentive Model ( LEAM )', (22, 30)), ('text classification', (32, 34))]",[],[],[],[]
model,"The proposed LEAM is implemented by jointly embedding the word and label in the same latent space , and the text representations are constructed directly using the text - label compatibility .","[('implemented by', (4, 6)), ('in', (12, 13)), ('constructed directly using', (23, 26))]","[('proposed LEAM', (1, 3)), ('jointly embedding', (6, 8)), ('word and label', (9, 12)), ('same latent space', (14, 17)), ('text representations', (20, 22)), ('text - label compatibility', (27, 31))]",[],[],[],[]
model,"Our label embedding framework has the following salutary properties : ( i ) Label - attentive text representation is informative for the downstream classification task , as it directly learns from a shared joint space , whereas traditional methods proceed in multiple steps by solving intermediate problems .","[('is', (18, 19)), ('for', (20, 21))]","[('label embedding framework', (1, 4)), ('Label - attentive text representation', (13, 18)), ('informative', (19, 20)), ('downstream classification task', (22, 25))]",[],[],[],[]
model,"( ii ) The LEAM learning procedure only involves a series of basic algebraic operations , and hence it retains the interpretability of simple models , especially when the label description is available .","[('involves', (8, 9)), ('retains', (19, 20)), ('of', (22, 23))]","[('LEAM learning procedure', (4, 7)), ('series of basic algebraic operations', (10, 15)), ('interpretability', (21, 22)), ('simple models', (23, 25))]",[],[],[],[]
experimental-setup,Setup We use 300 - dimensional Glo Ve word embeddings as initialization for word embeddings and label embeddings in our model .,"[('use', (2, 3)), ('as', (10, 11)), ('for', (12, 13)), ('in', (18, 19))]","[('300 - dimensional Glo Ve word embeddings', (3, 10)), ('initialization', (11, 12)), ('word embeddings and label embeddings', (13, 18)), ('our model', (19, 21))]",[],[],[],[]
experimental-setup,"Out - Of - Vocabulary ( OOV ) words are initialized from a uniform distribution with range [ ? 0.01 , 0.01 ] .","[('initialized from', (10, 12)), ('with', (15, 16))]","[('Out - Of - Vocabulary ( OOV ) words', (0, 9)), ('uniform distribution', (13, 15)), ('range [ ? 0.01 , 0.01 ]', (16, 23))]",[],[],[],[]
baselines,The final classifier is implemented as an MLP layer followed by a sigmoid or softmax function depending on specific task .,"[('implemented as', (4, 6)), ('followed by', (9, 11)), ('depending on', (16, 18))]","[('final classifier', (1, 3)), ('MLP layer', (7, 9)), ('sigmoid or softmax function', (12, 16)), ('specific task', (18, 20))]",[],[],[],[]
experimental-setup,"We train our model 's parameters with the Adam Optimizer ( Kingma and Ba , 2014 ) , with an initial learning rate of 0.001 , and a minibatch size of 100 .","[('train', (1, 2)), ('with', (6, 7)), ('with', (18, 19)), ('of', (23, 24)), ('of', (30, 31))]","[('Adam Optimizer', (8, 10)), ('initial learning rate', (20, 23)), ('0.001', (24, 25)), ('minibatch size', (28, 30)), ('100', (31, 32))]",[],[],[],[]
experimental-setup,"Dropout regularization is employed on the final MLP layer , with dropout rate 0.5 .","[('employed on', (3, 5)), ('with', (10, 11))]","[('Dropout regularization', (0, 2)), ('final MLP layer', (6, 9)), ('dropout rate 0.5', (11, 14))]",[],[],[],[]
experimental-setup,The model is implemented using Tensorflow and is trained on GPU Titan X.,"[('implemented using', (3, 5)), ('trained on', (8, 10))]","[('Tensorflow', (5, 6)), ('GPU Titan X.', (10, 13))]",[],[],[],[]
code,The code to reproduce the experimental results is at https://github.com/guoyinwang/LEAM :,[],"[('https://github.com/guoyinwang/LEAM', (9, 10))]",[],[],[],[]
baselines,"We compare against the three baselines : a logistic regression model with bag - ofwords , a bidirectional gated recurrent unit ( Bi - GRU ) and a single - layer 1 D convolutional network .","[('compare against', (1, 3)), ('with', (11, 12))]","[('logistic regression model', (8, 11)), ('bag - ofwords', (12, 15)), ('bidirectional gated recurrent unit ( Bi - GRU )', (17, 26)), ('single - layer 1 D convolutional network', (28, 35))]",[],[],[],[]
baselines,"We also compare with three recent methods for multi-label classification of clinical text , including Condensed Memory Networks ( C - MemNN ) , Attentive LSTM and Convolutional Attention ( CAML ) .","[('including', (14, 15))]","[('multi-label classification of clinical text', (8, 13)), ('Condensed Memory Networks ( C - MemNN )', (15, 23)), ('Attentive LSTM', (24, 26)), ('Convolutional Attention ( CAML )', (27, 32))]",[],[],[],[]
results,"LEAM provides the best AUC score , and better F1 and P@5 values than all methods except CNN .","[('provides', (1, 2)), ('than', (13, 14)), ('except', (16, 17))]","[('LEAM', (0, 1)), ('best AUC score', (3, 6)), ('better F1 and P@5 values', (8, 13)), ('all methods', (14, 16)), ('CNN', (17, 18))]",[],[],[],[]
results,"CNN consistently outperforms the basic Bi - GRU architecture , and the logistic regression baseline performs worse than all deep learning architectures .","[('consistently outperforms', (1, 3)), ('performs', (15, 16)), ('than', (17, 18))]","[('CNN', (0, 1)), ('basic Bi - GRU architecture', (4, 9)), ('logistic regression baseline', (12, 15)), ('worse', (16, 17)), ('all deep learning architectures', (18, 22))]",[],[],[],[]
research-problem,HDLTex : Hierarchical Deep Learning for Text Classification,[],"[('Text Classification', (6, 8))]",[],[],[],[]
research-problem,"Central to these information processing methods is document classification , which has become an important application for supervised learning .",[],"[('document classification', (7, 9))]",[],[],[],[]
model,Instead we perform hierarchical classification using an approach we call Hierarchical Deep Learning for Text classification ( HDLTex ) .,"[('perform', (2, 3)), ('call', (9, 10))]","[('hierarchical classification', (3, 5)), ('Hierarchical Deep Learning for Text classification ( HDLTex )', (10, 19))]",[],[],[],[]
model,This paper presents a new approach to hierarchical document classification that we call Hierarchical Deep Learning for Text classification ( HDLTex ) .,"[('call', (12, 13))]","[('hierarchical document classification', (7, 10)), ('Hierarchical Deep Learning for Text classification ( HDLTex )', (13, 22))]",[],[],[],[]
model,HDLTex combines deep learning architectures to allow both over all and specialized learning by level of the document hierarchy .,"[('combines', (1, 2)), ('to allow', (5, 7))]","[('HDLTex', (0, 1)), ('deep learning architectures', (2, 5)), ('over all and specialized learning', (8, 13)), ('document hierarchy', (17, 19))]",[],[],[],[]
results,The following results were obtained using a combination of central processing units ( CPUs ) and graphical processing units ( GPUs ) .,"[('using', (5, 6)), ('combination of', (7, 9))]","[('central processing units ( CPUs )', (9, 15)), ('graphical processing units ( GPUs )', (16, 22))]",[],[],[],[]
experimental-setup,"The processing was done on a Xeon E5 ? 2640 ( 2.6 GHz ) with 32 cores and 64GB memory , and the GPU cards were N vidia Quadro K620 and N vidia Tesla K20c .","[('done on', (3, 5)), ('with', (14, 15)), ('were', (25, 26))]","[('processing', (1, 2)), ('Xeon E5 ? 2640 ( 2.6 GHz )', (6, 14)), ('32 cores', (15, 17)), ('64GB memory', (18, 20)), ('GPU cards', (23, 25)), ('N vidia Quadro K620', (26, 30)), ('N vidia Tesla K20c', (31, 35))]",[],[],[],[]
experimental-setup,"We implemented our approaches in Python using the Compute Unified Device Architecture ( CUDA ) , which is a parallel computing platform and Application Programming Interface ( API ) model created by N vidia .","[('implemented', (1, 2)), ('in', (4, 5)), ('using', (6, 7)), ('is', (17, 18))]","[('Python', (5, 6)), ('Compute Unified Device Architecture ( CUDA )', (8, 15)), ('parallel computing platform', (19, 22))]",[],[],[],[]
experimental-setup,"We also used Keras and Tensor Flow libraries for creating the neural networks , .","[('used', (2, 3)), ('for creating', (8, 10))]","[('Keras and Tensor Flow libraries', (3, 8)), ('neural networks', (11, 13))]",[],[],[],[]
baselines,"The baseline tests compare three conventional document classification approaches ( nave Bayes and two versions of SVM ) and stacking SVM with three deep learning approaches ( DNN , RNN , and CNN ) .","[('compare', (3, 4)), ('with', (21, 22))]","[('three conventional document classification approaches', (4, 9)), ('stacking SVM', (19, 21)), ('three deep learning approaches', (22, 26))]",[],[],[],[]
results,In this set of tests the RNN outperforms the others for all three W OS data sets .,"[('outperforms', (7, 8)), ('for', (10, 11))]","[('RNN', (6, 7)), ('others', (9, 10)), ('all three W OS data sets', (11, 17))]",[],[],[],[]
results,CNN performs secondbest for three data sets .,"[('performs', (1, 2)), ('for', (3, 4))]","[('CNN', (0, 1)), ('secondbest', (2, 3)), ('three data sets', (4, 7))]",[],[],[],[]
results,SVM with term weighting is third for the first two sets while the multi-word approach of is in third place for the third data set .,"[('is', (4, 5)), ('for', (6, 7)), ('in', (17, 18)), ('for', (20, 21))]","[('term weighting', (2, 4)), ('third', (5, 6)), ('first two sets', (8, 11)), ('multi-word approach', (13, 15)), ('third place', (18, 20)), ('third data set', (22, 25))]",[],[],[],[]
results,"Overall , nave Bayes does much worse than the other methods throughout these tests .","[('does', (4, 5)), ('than', (7, 8))]","[('nave Bayes', (2, 4)), ('much worse', (5, 7)), ('other methods', (9, 11))]",[],[],[],[]
results,"As for the tests of classifying these documents within a hierarchy , the HDLTex approaches with stacked , deep learning architectures clearly provide superior performance .","[('with', (15, 16)), ('provide', (22, 23))]","[('HDLTex approaches', (13, 15)), ('stacked , deep learning architectures', (16, 21)), ('superior performance', (23, 25))]",[],[],[],[]
results,"For data set W OS ? 11967 , the best accuracy is obtained by the combination RNN for the first level of classification and DNN for the second level .","[('For', (0, 1)), ('obtained by', (12, 14)), ('for', (17, 18)), ('for', (25, 26))]","[('data set W OS ? 11967', (1, 7)), ('best accuracy', (9, 11)), ('combination RNN', (15, 17)), ('first level of classification', (19, 23)), ('DNN', (24, 25)), ('second level', (27, 29))]",[],[],[],[]
results,"This gives accuracies of 94 % for the first level , 92 % for the second level and 86 % over all .","[('gives', (1, 2)), ('of', (3, 4)), ('for', (6, 7)), ('for', (13, 14))]","[('accuracies', (2, 3)), ('94 %', (4, 6)), ('first level', (8, 10)), ('92 %', (11, 13)), ('second level', (15, 17)), ('86 %', (18, 20)), ('over all', (20, 22))]",[],[],[],[]
results,For data set W OS ? 46985 the best scores are again achieved by RNN for level one but this time with RNN for level 2 .,"[('For', (0, 1)), ('achieved by', (12, 14)), ('for', (15, 16)), ('for', (23, 24))]","[('data set W OS ? 46985', (1, 7)), ('best scores', (8, 10)), ('RNN', (14, 15)), ('level one', (16, 18)), ('RNN', (22, 23)), ('level 2', (24, 26))]",[],[],[],[]
research-problem,Explicit Interaction Model towards Text Classification,[],"[('Text Classification', (4, 6))]",[],[],[],[]
model,"To address the aforementioned problems , we introduce the interaction mechanism ( Wang and Jiang 2016 b ) , which is capable of incorporating the word - level matching signals for text classification .","[('introduce', (7, 8)), ('capable of incorporating', (21, 24)), ('for', (30, 31))]","[('interaction mechanism', (9, 11)), ('word - level matching signals', (25, 30)), ('text classification', (31, 33))]",[],[],[],[]
model,"Based upon the interaction mechanism , we devise an EXplicit interAction Model ( dubbed as EXAM ) .","[('devise', (7, 8))]","[('EXplicit interAction Model', (9, 12)), ('EXAM', (15, 16))]",[],[],[],[]
model,"Specifically , the proposed framework consists of three main components : word - level encoder , interaction layer , and aggregation layer .","[('consists of', (5, 7))]","[('proposed framework', (3, 5)), ('three main components', (7, 10)), ('word - level encoder', (11, 15)), ('interaction layer', (16, 18)), ('aggregation layer', (20, 22))]",[],[],[],[]
model,The word - level encoder projects the textual contents into the word - level representations .,"[('projects', (5, 6)), ('into', (9, 10))]","[('word - level encoder', (1, 5)), ('textual contents', (7, 9)), ('word - level representations', (11, 15))]",[],[],[],[]
model,"Hereafter , the interaction layer calculates the matching scores between the words and classes ( i.e. , constructs the interaction matrix ) .","[('calculates', (5, 6)), ('between', (9, 10))]","[('interaction layer', (3, 5)), ('matching scores', (7, 9)), ('words and classes', (11, 14))]",[],[],[],[]
model,"Then , the last layer aggregates those matching scores into predictions over each class , respectively .","[('into', (9, 10)), ('over', (11, 12))]","[('last layer', (3, 5)), ('aggregates', (5, 6)), ('matching scores', (7, 9)), ('predictions', (10, 11)), ('each class', (12, 14))]",[],[],[],[]
experiments,Experiments,[],"[('Experiments', (0, 1))]",[],[],[],[]
results,Multi - Class Classification,[],"[('Multi - Class Classification', (0, 4))]",[],[],[],[]
experimental-setup,"For the multi -class task , we chose region embedding as the Encoder in EXAM .","[('For', (0, 1)), ('chose', (7, 8)), ('as', (10, 11)), ('in', (13, 14))]","[('multi -class task', (2, 5)), ('region embedding', (8, 10)), ('Encoder', (12, 13)), ('EXAM', (14, 15))]",[],[],[],[]
experimental-setup,The region size is 7 and embedding size is 128 .,"[('is', (3, 4)), ('is', (8, 9))]","[('region size', (1, 3)), ('7', (4, 5)), ('embedding size', (6, 8)), ('128', (9, 10))]",[],[],[],[]
experimental-setup,We used adam ( Kingma and Ba 2014 ) as the optimizer with the initial learning rate 0.0001 and the batch size is set to 16 .,"[('used', (1, 2)), ('as', (9, 10)), ('with', (12, 13)), ('set to', (23, 25))]","[('adam ( Kingma and Ba 2014 )', (2, 9)), ('optimizer', (11, 12)), ('initial learning rate', (14, 17)), ('0.0001', (17, 18)), ('batch size', (20, 22)), ('16', (25, 26))]",[],[],[],[]
experimental-setup,"As for the aggregation MLP , we set the size of the hidden layer as 2 times interaction feature length .","[('set', (7, 8)), ('of', (10, 11)), ('as', (14, 15))]","[('aggregation MLP', (3, 5)), ('size', (9, 10)), ('hidden layer', (12, 14)), ('2 times', (15, 17)), ('2 times interaction feature length', (15, 20)), ('interaction feature length', (17, 20))]",[],[],[],[]
experimental-setup,Our models are implemented and trained by MXNet ( Chen et al. ) with a single NVIDIA TITAN Xp .,"[('implemented and trained by', (3, 7)), ('with', (13, 14))]","[('MXNet ( Chen et al. )', (7, 13)), ('single NVIDIA TITAN Xp', (15, 19))]",[],[],[],[]
experiments,Baselines,[],"[('Baselines', (0, 1))]",[],[],[],[]
baselines,The baselines are mainly in three variants :,"[('mainly in', (3, 5))]","[('baselines', (1, 2)), ('three variants', (5, 7))]",[],[],[],[]
baselines,1 ) models based on feature engineering ;,"[('based on', (3, 5))]","[('models', (2, 3)), ('feature engineering', (5, 7))]",[],[],[],[]
baselines,"2 ) Char - based deep models , and 3 ) Word - based deep models .",[],"[('Char - based deep models', (2, 7)), ('Word - based deep models', (11, 16))]",[],[],[],[]
results,Models based on feature engineering get the worst results on all the five datasets compared to the other methods .,"[('based on', (1, 3)), ('get', (5, 6)), ('on', (9, 10)), ('compared to', (14, 16))]","[('Models', (0, 1)), ('feature engineering', (3, 5)), ('worst results', (7, 9)), ('all the five datasets', (10, 14)), ('other methods', (17, 19))]",[],[],[],[]
results,Char - based models get the highest over all scores on the two Amazon datasets .,"[('get', (4, 5)), ('on', (10, 11))]","[('Char - based models', (0, 4)), ('highest over all scores', (6, 10)), ('two Amazon datasets', (12, 15))]",[],[],[],[]
results,Word - based baselines exceed the other variants on three datasets and lose on the two Amazon datasets .,"[('exceed', (4, 5)), ('on', (8, 9)), ('on', (13, 14))]","[('Word - based baselines', (0, 4)), ('other variants', (6, 8)), ('three datasets', (9, 11)), ('lose', (12, 13)), ('two Amazon datasets', (15, 18))]",[],[],[],[]
results,"For the five baselines , W.C Region Emb performs the best , because it learns the region embedding to utilize the N- grams feature from the text .","[('For', (0, 1)), ('performs', (8, 9))]","[('five baselines', (2, 4)), ('W.C Region Emb', (5, 8)), ('best', (10, 11))]",[],[],[],[]
results,"It is clear to see that EXAM achieves the best performance over the three datasets : AG , Yah. A. and DBP .","[('achieves', (7, 8)), ('over', (11, 12))]","[('EXAM', (6, 7)), ('best performance', (9, 11)), ('three datasets', (13, 15)), ('AG', (16, 17)), ('Yah. A.', (18, 20)), ('DBP', (21, 22))]",[],[],[],[]
results,"For the Yah.A. , EXAM improves the best performance by 1.1 % .","[('For', (0, 1)), ('improves', (5, 6)), ('by', (9, 10))]","[('Yah.A.', (2, 3)), ('EXAM', (4, 5)), ('best performance', (7, 9)), ('1.1 %', (10, 12))]",[],[],[],[]
baselines,Multi - Label Classification,[],"[('Multi - Label Classification', (0, 4))]",[],[],[],[]
experimental-setup,We implemented the baseline models and EXAM by MXNet .,"[('implemented', (1, 2)), ('by', (7, 8))]","[('baseline models', (3, 5)), ('EXAM', (6, 7)), ('MXNet', (8, 9))]",[],[],[],[]
experimental-setup,"We used the matrix trained by word2vec to initialize the embedding layer , and the embedding size is 256 .","[('used', (1, 2)), ('trained by', (4, 6)), ('to initialize', (7, 9)), ('is', (17, 18))]","[('matrix', (3, 4)), ('word2vec', (6, 7)), ('embedding layer', (10, 12)), ('embedding size', (15, 17)), ('256', (18, 19))]",[],[],[],[]
experimental-setup,"We adopted GRU as the Encoder , and each GRU Cell has 1,024 hidden states .","[('adopted', (1, 2)), ('as', (3, 4)), ('has', (11, 12))]","[('GRU', (2, 3)), ('Encoder', (5, 6)), ('each GRU Cell', (8, 11)), ('1,024 hidden states', (12, 15))]",[],[],[],[]
experimental-setup,The accumulated MLP has 60 hidden units .,"[('has', (3, 4))]","[('accumulated MLP', (1, 3)), ('60 hidden units', (4, 7))]",[],[],[],[]
experimental-setup,We applied Adam to optimize models on one NVIDIA TITAN Xp with the batch size of 1000 and the initial learning rate is 0.001 .,"[('applied', (1, 2)), ('to optimize', (3, 5)), ('on', (6, 7)), ('with', (11, 12)), ('of', (15, 16)), ('is', (22, 23))]","[('Adam', (2, 3)), ('models', (5, 6)), ('one NVIDIA TITAN Xp', (7, 11)), ('batch size', (13, 15)), ('1000', (16, 17)), ('initial learning rate', (19, 22)), ('0.001', (23, 24))]",[],[],[],[]
experimental-setup,The validation set is applied for early - stopping to avoid overfitting .,"[('applied for', (4, 6)), ('to avoid', (9, 11))]","[('validation set', (1, 3)), ('early - stopping', (6, 9)), ('overfitting', (11, 12))]",[],[],[],[]
results,Word - based models are better than char - based models in Kanshan - Cup dataset .,"[('are', (4, 5)), ('better than', (5, 7)), ('in', (11, 12))]","[('Word - based models', (0, 4)), ('char - based models', (7, 11)), ('Kanshan - Cup dataset', (12, 16))]",[],[],[],[]
results,Our models achieve the state - of - the - art performance over two different datasets though we only slightly modified Text RNN to build EXAM .,"[('achieve', (2, 3)), ('over', (12, 13))]","[('Our models', (0, 2)), ('state - of - the - art performance', (4, 12)), ('two different datasets', (13, 16))]",[],[],[],[]
research-problem,A Corpus for Multilingual Document Classification in Eight Languages,[],"[('Multilingual Document Classification', (3, 6))]",[],[],[],[]
research-problem,Cross - lingual document classification aims at training a document classifier on resources in one language and transferring it to a different language without any additional resources .,[],"[('Cross - lingual document classification', (0, 5))]",[],[],[],[]
research-problem,"We extend previous works and use the data in the Reuters Corpus Volume 2 to define new cross - lingual document classification tasks for eight very different languages , namely English , French , Spanish , Italian , German , Russian , Chinese and Japanese .","[('use', (5, 6)), ('in', (8, 9)), ('to define', (14, 16)), ('for', (23, 24))]","[('data', (7, 8)), ('eight very different languages', (24, 28)), ('English', (30, 31))]",[],[],[],[]
model,"For each language , we define a train , development and test corpus .","[('For', (0, 1)), ('define', (5, 6))]","[('each language', (1, 3)), ('train , development and test corpus', (7, 13))]",[],[],[],[]
results,Zero - shot cross - lingual document classification,[],"[('Zero - shot cross - lingual document classification', (0, 8))]",[],[],[],[]
results,The classifiers based on the MultiCCA embeddings perform very well on the development corpus ( accuracies close or exceeding 90 % ) .,"[('based on', (2, 4)), ('perform', (7, 8)), ('on', (10, 11))]","[('classifiers', (1, 2)), ('MultiCCA embeddings', (5, 7)), ('very well', (8, 10)), ('development corpus', (12, 14))]",[],[],[],[]
results,"The system trained on English also achieves excellent results when transfered to a different languages , it scores best for three out of seven languages ( DE , IT and ZH ) .","[('trained on', (2, 4)), ('achieves', (6, 7)), ('when', (9, 10)), ('transfered to', (10, 12)), ('for', (19, 20))]","[('system', (1, 2)), ('English', (4, 5)), ('excellent results', (7, 9)), ('different languages', (13, 15)), ('scores', (17, 18)), ('best', (18, 19))]",[],[],[],[]
results,"However , the transfer accuracies are quite low when training the classifiers on other languages than English , in particular for Russian , Chinese and Japanese .","[('are', (5, 6)), ('when training', (8, 10)), ('on', (12, 13)), ('than', (15, 16))]","[('transfer accuracies', (3, 5)), ('quite low', (6, 8)), ('classifiers', (11, 12)), ('other languages', (13, 15)), ('English', (16, 17)), ('Russian , Chinese and Japanese', (21, 26))]",[],[],[],[]
results,The systems using multilingual sentence embeddings seem to be over all more robust and less language specific .,"[('using', (2, 3)), ('seem to be', (6, 9))]","[('systems', (1, 2)), ('multilingual sentence embeddings', (3, 6))]",[],[],[],[]
results,Training on German or French actually leads to better transfer performance than training on English .,"[('Training on', (0, 2)), ('leads to', (6, 8)), ('than', (11, 12)), ('training on', (12, 14))]","[('German or French', (2, 5)), ('better transfer performance', (8, 11)), ('English', (14, 15))]",[],[],[],[]
results,Crosslingual transfer between very different languages like Chinese and Russian also achieves remarkable results .,"[('between', (2, 3)), ('like', (6, 7)), ('achieves', (11, 12))]","[('Crosslingual transfer', (0, 2)), ('very different languages', (3, 6)), ('Chinese and Russian', (7, 10)), ('remarkable results', (12, 14))]",[],[],[],[]
results,Joint multilingual document classification,[],"[('Joint multilingual document classification', (0, 4))]",[],[],[],[]
results,"This leads to important improvement for all languages , in comparison to zero - shot or targeted transfer learning .","[('leads to', (1, 3)), ('for', (5, 6)), ('in comparison to', (9, 12))]","[('important improvement', (3, 5)), ('all languages', (6, 8)), ('zero - shot or targeted transfer learning', (12, 19))]",[],[],[],[]
research-problem,Disconnected Recurrent Neural Networks for Text Categorization,[],"[('Text Categorization', (5, 7))]",[],[],[],[]
model,"In this paper , we incorporate positioninvariance into RNN and propose a novel model named Disconnected Recurrent Neural Network ( DRNN ) .","[('incorporate', (5, 6)), ('into', (7, 8)), ('propose', (10, 11)), ('named', (14, 15))]","[('positioninvariance', (6, 7)), ('RNN', (8, 9)), ('novel model', (12, 14)), ('Disconnected Recurrent Neural Network ( DRNN )', (15, 22))]",[],[],[],[]
model,"To maintain the position - invariance , we utilize max pooling to extract the important information , which has been suggested by .","[('To maintain', (0, 2)), ('utilize', (8, 9)), ('to extract', (11, 13))]","[('position - invariance', (3, 6)), ('max pooling', (9, 11)), ('important information', (14, 16))]",[],[],[],[]
model,Our proposed model can also be regarded as a special 1D CNN where convolution kernels are replaced with recurrent units .,"[('regarded as', (6, 8)), ('where', (12, 13)), ('replaced with', (16, 18))]","[('special 1D CNN', (9, 12)), ('convolution kernels', (13, 15)), ('recurrent units', (18, 20))]",[],[],[],[]
hyperparameters,"We utilize the 300D Glo Ve 840B vectors ( Pennington et al. , 2014 ) as our pre-trained word embeddings .","[('utilize', (1, 2)), ('as', (15, 16))]","[('300D Glo Ve 840B vectors', (3, 8)), ('pre-trained word embeddings', (17, 20))]",[],[],[],[]
hyperparameters,"We use Adadelta ( Zeiler , 2012 ) to optimize all the trainable parameters .","[('use', (1, 2)), ('to optimize', (8, 10))]","[('Adadelta ( Zeiler , 2012 )', (2, 8)), ('all the trainable parameters', (10, 14))]",[],[],[],[]
hyperparameters,The hyperparameter of Adadelta is set as Zeiler ( 2012 ) suggest that is 1 e ? 6 and ? is 0.95 .,"[('of', (2, 3)), ('set as', (5, 7))]","[('hyperparameter', (1, 2)), ('Adadelta', (3, 4)), ('1 e ? 6', (14, 18)), ('0.95', (21, 22))]",[],[],[],[]
hyperparameters,"To avoid the gradient explosion problem , we apply gradient norm clipping .","[('To avoid', (0, 2)), ('apply', (8, 9))]","[('gradient explosion problem', (3, 6)), ('gradient norm clipping', (9, 12))]",[],[],[],[]
experiments,The batch size is set to 128 and all the dimensions of input vectors and hidden shows that our proposed model significantly outperforms all the other models in 7 datasets .,"[('set to', (4, 6)), ('of', (11, 12)), ('shows', (16, 17)), ('in', (27, 28))]","[('batch size', (1, 3)), ('128', (6, 7)), ('all the dimensions', (8, 11)), ('input vectors and hidden', (12, 16)), ('our proposed model', (18, 21)), ('significantly outperforms', (21, 23)), ('all the other models', (23, 27)), ('7 datasets', (28, 30))]",[],[],[],[]
results,We can see that very deep CNN ( VDCNN ) performs well in large datasets .,"[('see that', (2, 4)), ('performs', (10, 11)), ('in', (12, 13))]","[('very deep CNN ( VDCNN )', (4, 10)), ('well', (11, 12)), ('large datasets', (13, 15))]",[],[],[],[]
results,shows that our model achieves 10 - 50 % relative error reduction compared with char - CRNN in these datasets .,"[('shows', (0, 1)), ('achieves', (4, 5)), ('compared with', (12, 14))]","[('our model', (2, 4)), ('10 - 50 % relative error reduction', (5, 12)), ('char - CRNN', (14, 17))]",[],[],[],[]
results,shows that DRNN performs far better than CNN .,"[('shows', (0, 1)), ('performs', (3, 4)), ('than', (6, 7))]","[('DRNN', (2, 3)), ('far better', (4, 6)), ('CNN', (7, 8))]",[],[],[],[]
results,Our model DRNN achieves much better performance than GRU and LSTM .,"[('achieves', (3, 4)), ('than', (7, 8))]","[('Our model DRNN', (0, 3)), ('much better performance', (4, 7)), ('GRU and LSTM', (8, 11))]",[],[],[],[]
research-problem,Investigating Capsule Networks with Dynamic Routing for Text Classification,[],"[('Text Classification', (7, 9))]",[],[],[],[]
code,1 Codes are publicly available at : https : //github.com/andyweizhao/capsule_text_ classification .,[],"[('https : //github.com/andyweizhao/capsule_text_ classification', (7, 11))]",[],[],[],[]
model,A recent method called capsule network introduced by possesses this attractive potential to address the aforementioned issue .,"[('called', (3, 4))]","[('capsule network', (4, 6))]",[],[],[],[]
model,They introduce an iterative routing process to decide the credit attribution between nodes from lower and higher layers .,"[('introduce', (1, 2)), ('to decide', (6, 8)), ('between', (11, 12)), ('from', (13, 14))]","[('iterative routing process', (3, 6)), ('credit attribution', (9, 11)), ('nodes', (12, 13)), ('lower and higher layers', (14, 18))]",[],[],[],[]
model,"Three strategies are proposed to stabilize the dynamic routing process to alleviate the disturbance of some noise capsules which may contain "" background "" information such as stop words and the words thatare unrelated to specific categories .","[('to stabilize', (4, 6)), ('to alleviate', (10, 12)), ('of', (14, 15)), ('such as', (25, 27))]","[('Three strategies', (0, 2)), ('dynamic routing process', (7, 10)), ('disturbance', (13, 14)), ('some noise capsules', (15, 18)), ('"" background "" information', (21, 25)), ('stop words', (27, 29)), ('specific categories', (35, 37))]",[],[],[],[]
hyperparameters,"In the experiments , we use 300 - dimensional word2vec vectors to initialize embedding vectors .","[('use', (5, 6)), ('to initialize', (11, 13))]","[('300 - dimensional word2vec vectors', (6, 11)), ('embedding vectors', (13, 15))]",[],[],[],[]
hyperparameters,We conduct mini-batch with size 50 for AG 's news and size 25 for other datasets .,"[('conduct', (1, 2)), ('with', (3, 4)), ('for', (6, 7)), ('for', (13, 14))]","[('mini-batch', (2, 3)), ('size', (4, 5)), ('50', (5, 6)), (""AG 's news"", (7, 10)), ('size', (11, 12)), ('25', (12, 13)), ('other datasets', (14, 16))]",[],[],[],[]
hyperparameters,We use Adam optimization algorithm with 1e - 3 learning rate to train the model .,"[('use', (1, 2)), ('with', (5, 6)), ('to train', (11, 13))]","[('Adam optimization algorithm', (2, 5)), ('1e - 3 learning rate', (6, 11)), ('model', (14, 15))]",[],[],[],[]
baselines,"In the experiments , we evaluate and compare our model with several strong baseline methods including : LSTM / Bi - LSTM , tree - structured LSTM ( Tree - LSTM ) , LSTM regularized by linguistic knowledge ( LR - LSTM ) , CNNrand / CNN - static / CNN - non-static ( Kim , 2014 ) , very deep convolutional network ( VD - CNN ) , and character - level convolutional network ( CL - CNN ) .",[],"[('LSTM / Bi - LSTM', (17, 22)), ('tree - structured LSTM ( Tree - LSTM )', (23, 32)), ('linguistic knowledge ( LR - LSTM )', (36, 43)), ('CNNrand / CNN - static / CNN - non-static', (44, 53)), ('very deep convolutional network ( VD - CNN )', (59, 68)), ('character - level convolutional network ( CL - CNN )', (70, 80))]",[],[],[],[]
experiments,Experimental Results,[],[],[],[],[],[]
results,"From the results , we observe that the capsule networks achieve best results on 4 out of 6 benchmarks , which verifies the effectiveness of the capsule networks .","[('observe', (5, 6)), ('achieve', (10, 11)), ('on', (13, 14)), ('verifies', (21, 22)), ('of', (24, 25))]","[('capsule networks', (8, 10)), ('best results', (11, 13)), ('4 out of 6 benchmarks', (14, 19)), ('effectiveness', (23, 24)), ('capsule networks', (26, 28))]",[],[],[],[]
ablation-analysis,Single - Label to Multi - Label Text Classification,[],"[('Single - Label to Multi - Label Text Classification', (0, 9))]",[],[],[],[]
ablation-analysis,"In this section , we investigate the capability of capsule network on multi-label text classification by using only the single - label samples as training data .","[('investigate', (5, 6)), ('of', (8, 9)), ('on', (11, 12)), ('by using', (15, 17)), ('as', (23, 24))]","[('capability', (7, 8)), ('capsule network', (9, 11)), ('multi-label text classification', (12, 15)), ('single - label samples', (19, 23)), ('training data', (24, 26))]",[],[],[],[]
ablation-analysis,"From the results , we can observe that the capsule networks have substantial and significant improvement in terms of all four evaluation metrics over the strong baseline methods on the test sets in both Reuters - Multi-label and Reuters - Full datasets .","[('observe that', (6, 8)), ('observe', (6, 7)), ('have', (11, 12)), ('in terms of', (16, 19)), ('over', (23, 24)), ('on', (28, 29)), ('in', (32, 33))]","[('capsule networks', (9, 11)), ('substantial and significant improvement', (12, 16)), ('all four evaluation metrics', (19, 23)), ('strong baseline methods', (25, 28)), ('test sets', (30, 32)), ('Reuters - Full datasets', (38, 42))]",[],[],[],[]
ablation-analysis,"In particular , larger improvement is achieved on Reuters - Multi - label dataset which only contains the multi-label documents in the test set .","[('achieved on', (6, 8)), ('in', (20, 21))]","[('larger improvement', (3, 5)), ('Reuters - Multi - label dataset', (8, 14)), ('multi-label documents', (18, 20)), ('test set', (22, 24))]",[],[],[],[]
ablation-analysis,The capsule network has much stronger transferring capability than the conventional deep neural networks .,"[('than', (8, 9))]","[('capsule network', (1, 3)), ('much stronger transferring capability', (4, 8)), ('conventional deep neural networks', (10, 14))]",[],[],[],[]
ablation-analysis,"In addition , the good results on Reuters - Full also indicate that the capsule network has robust superiority over competitors on single - label documents .","[('on', (6, 7)), ('indicate', (11, 12)), ('over', (19, 20)), ('on', (21, 22))]","[('good results', (4, 6)), ('Reuters - Full', (7, 10)), ('capsule network', (14, 16)), ('robust superiority', (17, 19)), ('competitors', (20, 21)), ('single - label documents', (22, 26))]",[],[],[],[]
ablation-analysis,Connection Strength Visualization,[],"[('Connection Strength Visualization', (0, 3))]",[],[],[],[]
ablation-analysis,"From the results , we observe that capsule networks can correctly recognize and cluster the important phrases with respect to the text categories .","[('observe that', (5, 7)), ('observe', (5, 6)), ('correctly recognize and cluster', (10, 14)), ('with respect to', (17, 20))]","[('capsule networks', (7, 9)), ('important phrases', (15, 17)), ('text categories', (21, 23))]",[],[],[],[]
research-problem,Deep Joint Entity Disambiguation with Local Neural Attention,[],"[('Deep Joint Entity Disambiguation', (0, 4))]",[],[],[],[]
research-problem,Entity disambiguation ( ED ) is an important stage in text understanding which automatically resolves references to entities in a given knowledge base ( KB ) .,[],"[('Entity disambiguation ( ED )', (0, 5))]",[],[],[],[]
research-problem,"ED research has largely focused on two types of contextual information for disambiguation : local information based on words that occur in a context window around an entity mention , and , global information , exploiting document - level coherence of the referenced entities .","[('based on', (16, 18)), ('around', (25, 26)), ('exploiting', (35, 36))]","[('disambiguation', (12, 13)), ('local information', (14, 16)), ('words', (18, 19)), ('context window', (23, 25)), ('global information', (32, 34)), ('document - level coherence', (36, 40))]",[],[],[],[]
model,The explicit goal of our work is to use deep learning in order to learn basic features and their combinations from scratch .,"[('to learn', (13, 15))]","[('deep learning', (9, 11)), ('basic features and their combinations', (15, 20))]",[],[],[],[]
experimental-setup,All models are implemented in the Torch framework .,"[('implemented in', (3, 5))]","[('Torch framework', (6, 8))]",[],[],[],[]
experimental-setup,"For entity embeddings only , we use Wikipedia ( Feb 2014 ) corpus for training .","[('For', (0, 1)), ('use', (6, 7)), ('for', (13, 14))]","[('entity embeddings only', (1, 4)), ('Wikipedia ( Feb 2014 ) corpus', (7, 13)), ('training', (14, 15))]",[],[],[],[]
experimental-setup,Entity vectors are initialized randomly from a 0 mean normal distribution with standard deviation 1 .,"[('initialized', (3, 4)), ('from', (5, 6)), ('with', (11, 12))]","[('Entity vectors', (0, 2)), ('0 mean normal distribution', (7, 11)), ('standard deviation 1', (12, 15))]",[],[],[],[]
experiments,We first train each entity vector on the entity 's Wikipedia canonical description page ( title words included ) for 400 iterations .,"[('train', (2, 3)), ('on', (6, 7)), ('for', (19, 20))]","[('each entity vector', (3, 6)), (""entity 's Wikipedia canonical description page"", (8, 14)), ('400 iterations', (20, 22))]",[],[],[],[]
experiments,We use Adagrad with a learning rate of 0.3 .,"[('use', (1, 2)), ('with', (3, 4)), ('of', (7, 8))]","[('Adagrad', (2, 3)), ('learning rate', (5, 7)), ('0.3', (8, 9))]",[],[],[],[]
experiments,"We choose embedding size d = 300 , pre-trained ( fixed ) Word2 Vec word vectors 8 , ? = 0.6 , ? = 0.1 and window size of 20 for the hyperlinks .","[('choose', (1, 2)), ('=', (5, 6)), ('pre-trained ( fixed ) Word2 Vec word vectors', (8, 16)), ('of', (28, 29)), ('for', (30, 31))]","[('embedding size d', (2, 5)), ('300', (6, 7)), ('8 , ? = 0.6 , ? = 0.1', (16, 25)), ('window size', (26, 28)), ('20', (29, 30)), ('hyperlinks', (32, 33))]",[],[],[],[]
experimental-setup,Training of those takes 20 hours on a single TitanX GPU with 12 GB of memory .,"[('takes', (3, 4)), ('on', (6, 7)), ('with', (11, 12))]","[('Training', (0, 1)), ('20 hours', (4, 6)), ('single TitanX GPU', (8, 11)), ('12 GB', (12, 14))]",[],[],[],[]
experimental-setup,"Our local and global ED models are trained on AIDA - train ( multiple epochs ) , validated on AIDA - A and tested on AIDA - B and other datasets mentioned in Section 7.1 .","[('trained on', (7, 9)), ('validated on', (17, 19)), ('tested on', (23, 25))]","[('Our local and global ED models', (0, 6)), ('AIDA - train ( multiple epochs )', (9, 16)), ('AIDA - A', (19, 22))]",[],[],[],[]
experimental-setup,"We use Adam with learning rate of 1e - 4 until validation accuracy exceeds 90 % , afterwards setting it to 1e - 5 .","[('use', (1, 2)), ('with', (3, 4)), ('of', (6, 7)), ('until', (10, 11)), ('exceeds', (13, 14)), ('setting it to', (18, 21))]","[('Adam', (2, 3)), ('learning rate', (4, 6)), ('1e - 4', (7, 10)), ('validation accuracy', (11, 13)), ('90 %', (14, 16)), ('1e - 5', (21, 24))]",[],[],[],[]
experimental-setup,"To regularize , we use early stopping , i.e. we stop learning if the validation accuracy does not increase after 500 epochs .","[('use', (4, 5)), ('stop', (10, 11)), ('if', (12, 13)), ('after', (19, 20))]","[('regularize', (1, 2)), ('early stopping', (5, 7)), ('learning', (11, 12)), ('validation accuracy', (14, 16)), ('does not increase', (16, 19)), ('500 epochs', (20, 22))]",[],[],[],[]
experimental-setup,"Training on a single GPU takes , on average , 2 ms per mention , or 16 hours for 1250 epochs over AIDA - train .","[('Training on', (0, 2)), ('takes', (5, 6)), ('on average', (7, 9)), ('per', (12, 13)), ('for', (18, 19)), ('over', (21, 22))]","[('single GPU', (3, 5)), ('2 ms', (10, 12)), ('mention', (13, 14)), ('16 hours', (16, 18)), ('1250 epochs', (19, 21)), ('AIDA - train', (22, 25))]",[],[],[],[]
results,We obtain state of the art accuracy on AIDA which is the largest and hardest ( by the accuracy of thep ( e |m ) baseline ) manually created ED dataset .,"[('obtain', (1, 2)), ('on', (7, 8)), ('is', (10, 11))]","[('state of the art accuracy', (2, 7)), ('AIDA', (8, 9)), ('largest and hardest', (12, 15))]",[],[],[],[]
results,"To gain further insight , we analyzed the accuracy on the AIDA - B dataset for situations where gold entities have low frequency or mention prior .","[('analyzed', (6, 7)), ('on', (9, 10)), ('for', (15, 16)), ('have', (20, 21))]","[('accuracy', (8, 9)), ('AIDA - B dataset', (11, 15)), ('gold entities', (18, 20)), ('low frequency or mention prior', (21, 26))]",[],[],[],[]
results,shows that our method performs well in these harder cases . :,"[('shows', (0, 1)), ('performs', (4, 5)), ('in', (6, 7))]","[('our method', (2, 4)), ('well', (5, 6)), ('harder cases', (8, 10))]",[],[],[],[]
code,Our code and data are publicly available : http://github.com/dalab/deep-ed,[],"[('http://github.com/dalab/deep-ed', (8, 9))]",[],[],[],[]
research-problem,Pre-training of Deep Contextualized Embeddings of Words and Entities for Named Entity Disambiguation,[],"[('Named Entity Disambiguation', (10, 13))]",[],[],[],[]
research-problem,"In this paper , we propose a new contextualized embedding model of words and entities for named entity disambiguation ( NED ) .","[('propose', (5, 6)), ('of', (11, 12)), ('for', (15, 16))]","[('words and entities', (12, 15)), ('named entity disambiguation ( NED )', (16, 22))]",[],[],[],[]
model,We evaluated our model by addressing NED using a simple NED model based on the trained contextualized embeddings .,"[('addressing', (5, 6)), ('using', (7, 8)), ('based on', (12, 14))]","[('NED', (6, 7)), ('simple NED model', (9, 12)), ('trained contextualized embeddings', (15, 18))]",[],[],[],[]
model,"In this paper , we describe a new contextualized embedding model for words and entities for NED .","[('describe', (5, 6)), ('for', (11, 12)), ('for', (15, 16))]","[('new contextualized embedding model', (7, 11)), ('words and entities', (12, 15)), ('NED', (16, 17))]",[],[],[],[]
model,"Following , the proposed model is based on the bidirectional transformer encoder .","[('based on', (6, 8))]","[('bidirectional transformer encoder', (9, 12))]",[],[],[],[]
model,"It takes a sequence of words and entities in the input text , and produces a contextualized embedding for each word and entity .","[('takes', (1, 2)), ('in', (8, 9)), ('produces', (14, 15)), ('for', (18, 19))]","[('sequence of words and entities', (3, 8)), ('input text', (10, 12)), ('contextualized embedding', (16, 18)), ('each word and entity', (19, 23))]",[],[],[],[]
model,"Inspired by MLM , we propose masked entity prediction , a new task that aims to train the embedding model by predicting randomly masked entities based on words and non-masked entities in the input text .","[('propose', (5, 6))]","[('masked entity prediction', (6, 9))]",[],[],[],[]
model,We trained the model using texts and their entity annotations retrieved from Wikipedia .,"[('trained', (1, 2)), ('using', (4, 5)), ('retrieved from', (10, 12))]","[('model', (3, 4)), ('texts and their entity annotations', (5, 10)), ('Wikipedia', (12, 13))]",[],[],[],[]
results,"As shown , our models outperformed all previously proposed models .","[('outperformed', (5, 6))]","[('our models', (3, 5)), ('all previously proposed models', (6, 10))]",[],[],[],[]
results,"Furthermore , using pseudo entity annotations boosted the accuracy by 0.3 % .","[('using', (2, 3)), ('boosted', (6, 7)), ('by', (9, 10))]","[('pseudo entity annotations', (3, 6)), ('accuracy', (8, 9)), ('0.3 %', (10, 12))]",[],[],[],[]
results,"Our models achieved new state - of - the - art results on four of the five datasets , namely MSNBC , AQUAINT , ACE2004 , and WNED - WIKI , and performed competitive on the WNED - CLUEWEB dataset .","[('achieved', (2, 3)), ('on', (12, 13)), ('namely', (19, 20)), ('performed', (32, 33)), ('on', (34, 35))]","[('new state - of - the - art results', (3, 12)), ('four of the five datasets', (13, 18)), ('MSNBC', (20, 21)), ('AQUAINT', (22, 23)), ('ACE2004', (24, 25)), ('WNED - WIKI', (27, 30)), ('competitive', (33, 34)), ('WNED - CLUEWEB dataset', (36, 40))]",[],[],[],[]
results,"Furthermore , using pseudo entity annotations improved the performance on the AQUAINT and ACE2004 datasets .","[('using', (2, 3)), ('improved', (6, 7)), ('on', (9, 10))]","[('pseudo entity annotations', (3, 6)), ('performance', (8, 9)), ('AQUAINT and ACE2004 datasets', (11, 15))]",[],[],[],[]
research-problem,Deep contextualized word representations,[],"[('Deep contextualized word representations', (0, 4))]",[],[],[],[]
research-problem,"We introduce a new type of deep contextualized word representation that models both ( 1 ) complex characteristics of word use ( e.g. , syntax and semantics ) , and ( 2 ) how these uses vary across linguistic contexts ( i.e. , to model polysemy ) .",[],"[('deep contextualized word representation', (6, 10))]",[],[],[],[]
research-problem,Pre-trained word representations are a key component in many neural language understanding models .,[],"[('Pre-trained word representations', (0, 3))]",[],[],[],[]
model,"In this paper , we introduce a new type of deep contextualized word representation that directly addresses both challenges , can be easily integrated into existing models , and significantly improves the state of the art in every considered case across a range of challenging language understanding problems .","[('introduce', (5, 6))]",[],[],[],[],[]
model,Our representations differ from traditional word type embeddings in that each token is assigned a representation that is a function of the entire input sentence .,"[('differ from', (2, 4)), ('assigned', (13, 14)), ('function of', (19, 21))]","[('traditional word type embeddings', (4, 8)), ('each token', (10, 12)), ('representation', (15, 16)), ('entire input sentence', (22, 25))]",[],[],[],[]
model,We use vectors derived from a bidirectional LSTM that is trained with a coupled lan - guage model ( LM ) objective on a large text corpus .,"[('use', (1, 2)), ('derived from', (3, 5)), ('trained with', (10, 12)), ('on', (22, 23))]","[('vectors', (2, 3)), ('bidirectional LSTM', (6, 8)), ('coupled lan - guage model ( LM ) objective', (13, 22)), ('large text corpus', (24, 27))]",[],[],[],[]
model,"For this reason , we call them ELMo ( Embeddings from Language Models ) representations .","[('call', (5, 6))]","[('ELMo ( Embeddings from Language Models ) representations', (7, 15))]",[],[],[],[]
model,"Unlike previous approaches for learning contextualized word vectors , ELMo representations are deep , in the sense that they are a function of all of the internal layers of the biLM .","[('are', (11, 12)), ('function of', (21, 23)), ('of', (28, 29))]","[('ELMo representations', (9, 11)), ('deep', (12, 13)), ('biLM', (30, 31))]",[],[],[],[]
model,"More specifically , we learn a linear combination of the vectors stacked above each input word for each end task , which markedly improves performance over just using the top LSTM layer .","[('learn', (4, 5)), ('stacked above', (11, 13)), ('for', (16, 17)), ('markedly improves', (22, 24)), ('over', (25, 26))]","[('linear combination of the vectors', (6, 11)), ('vectors', (10, 11)), ('each input word', (13, 16)), ('each end task', (17, 20)), ('performance', (24, 25)), ('top LSTM layer', (29, 32))]",[],[],[],[]
model,"Using intrinsic evaluations , we show that the higher - level LSTM states capture context - dependent aspects of word meaning ( e.g. , they can be used without modification to perform well on supervised word sense disambiguation tasks ) while lowerlevel states model aspects of syntax ( e.g. , they can be used to do part - of - speech tagging ) .","[('show', (5, 6)), ('capture', (13, 14)), ('of', (18, 19)), ('model', (43, 44))]","[('intrinsic evaluations', (1, 3)), ('higher - level LSTM states', (8, 13)), ('context - dependent aspects', (14, 18)), ('word meaning', (19, 21)), ('lowerlevel states', (41, 43)), ('aspects', (44, 45)), ('syntax', (46, 47))]",[],[],[],[]
experiments,Question answering,[],"[('Question answering', (0, 2))]",[],[],[],[]
experiments,"After adding ELMo to the baseline model , test set F 1 improved by 4.7 % from 81.1 % to 85.8 % , a 24.9 % relative error reduction over the baseline , and improving the overall single model state - of - the - art by 1.4 % .","[('adding', (1, 2)), ('to', (3, 4)), ('improved', (12, 13)), ('by', (13, 14)), ('from', (16, 17)), ('over', (29, 30)), ('improving', (34, 35)), ('by', (46, 47))]","[('ELMo', (2, 3)), ('baseline model', (5, 7)), ('test set F 1', (8, 12)), ('4.7 %', (14, 16)), ('81.1 % to 85.8 %', (17, 22)), ('24.9 % relative error reduction', (24, 29)), ('baseline', (31, 32)), ('overall single model state - of - the - art', (36, 46)), ('1.4 %', (47, 49))]",[],[],[],[]
experiments,The increase of 4.7 % with ELMo is also significantly larger then the 1.8 % improvement from adding CoVe to a baseline model .,"[('of', (2, 3)), ('with', (5, 6)), ('then', (11, 12)), ('from adding', (16, 18)), ('to', (19, 20))]","[('increase', (1, 2)), ('4.7 %', (3, 5)), ('ELMo', (6, 7)), ('significantly larger', (9, 11)), ('1.8 % improvement', (13, 16)), ('CoVe', (18, 19)), ('baseline model', (21, 23))]",[],[],[],[]
experiments,Textual entailment,[],"[('Textual entailment', (0, 2))]",[],[],[],[]
experiments,"Overall , adding ELMo to the ESIM model improves accuracy by an average of 0.7 % across five random seeds .","[('adding', (2, 3)), ('to', (4, 5)), ('improves', (8, 9)), ('by', (10, 11)), ('across', (16, 17))]","[('ELMo', (3, 4)), ('ESIM model', (6, 8)), ('accuracy', (9, 10)), ('average of 0.7 %', (12, 16)), ('five random seeds', (17, 20))]",[],[],[],[]
experiments,Semantic role labeling,[],"[('Semantic role labeling', (0, 3))]",[],[],[],[]
experiments,"In our experiments with the OntoNotes coreference annotations from the CoNLL 2012 shared task , adding ELMo improved the average F 1 by 3.2 % from 67.2 to 70.4 , establishing a new state of the art , again improving over the previous best ensemble result by 1.6 % F 1 .","[('with', (3, 4)), ('from', (8, 9)), ('adding', (15, 16)), ('improved', (17, 18)), ('by', (22, 23)), ('from', (25, 26))]","[('OntoNotes coreference annotations', (5, 8)), ('CoNLL 2012 shared task', (10, 14)), ('ELMo', (16, 17)), ('average F 1', (19, 22)), ('3.2 %', (23, 25)), ('67.2 to 70.4', (26, 29))]",[],[],[],[]
experiments,Named entity extraction,[],"[('Named entity extraction', (0, 3))]",[],[],[],[]
experiments,"As shown in , our ELMo enhanced biLSTM - CRF achieves 92. 22 % F 1 averaged over five runs .","[('achieves', (10, 11)), ('averaged over', (16, 18))]","[('ELMo enhanced biLSTM - CRF', (5, 10)), ('92. 22 % F 1', (11, 16)), ('five runs', (18, 20))]",[],[],[],[]
research-problem,Sense Vocabulary Compression through the Semantic Knowledge of WordNet for Neural Word Sense Disambiguation,[],"[('Neural Word Sense Disambiguation', (10, 14))]",[],[],[],[]
approach,"We propose two different methods that greatly reduce the size of neural WSD models , with the benefit of improving their coverage without additional training data , and without impacting their precision .","[('propose', (1, 2)), ('of', (10, 11)), ('with', (15, 16)), ('improving', (19, 20)), ('without', (22, 23)), ('without impacting', (28, 30))]","[('two different methods', (2, 5)), ('greatly reduce', (6, 8)), ('size', (9, 10)), ('neural WSD models', (11, 14)), ('coverage', (21, 22)), ('additional training data', (23, 26)), ('precision', (31, 32))]",[],[],[],[]
approach,"In addition to our methods , we present a WSD system which relies on pre-trained BERT word vectors in order to achieve results that significantly outperforms the state of the art on all WSD evaluation tasks .","[('present', (7, 8)), ('relies on', (12, 14)), ('to achieve', (20, 22)), ('significantly outperforms', (24, 26)), ('on', (31, 32))]","[('WSD system', (9, 11)), ('pre-trained BERT word vectors', (14, 18)), ('state of the art', (27, 31)), ('all WSD evaluation tasks', (32, 36))]",[],[],[],[]
research-problem,"Word Sense Disambiguation ( WSD ) is a task which aims to clarify a text by assigning to each of its words the most suitable sense labels , given a predefined sense inventory .",[],"[('Word Sense Disambiguation ( WSD )', (0, 6))]",[],[],[],[]
approach,"In this work , the idea is to solve this issue by taking advantage of the semantic relationships between senses included in WordNet , such as the hypernymy , the hyponymy , the meronymy , the antonymy , etc .","[('by taking advantage of', (11, 15)), ('between', (18, 19)), ('included in', (20, 22)), ('such as', (24, 26))]","[('semantic relationships', (16, 18)), ('senses', (19, 20)), ('WordNet', (22, 23)), ('hypernymy', (27, 28)), ('hyponymy', (30, 31)), ('meronymy', (33, 34)), ('antonymy', (36, 37))]",[],[],[],[]
approach,"Our method is based on the observation that a sense and its closest related senses ( it s hypernym or it s hyponyms for instance ) all share a common idea or concept , and so a word can sometimes be disambiguated using only related concepts .","[('based on', (3, 5))]","[('observation', (6, 7)), ('sense', (9, 10))]",[],[],[],[]
experimental-setup,"For BERT , we used the model named "" bert - largecased "" of the PyTorch implementation 3 , which consists of vectors of dimension 1024 , trained on Book s Corpus and English Wikipedia .","[('For', (0, 1)), ('used', (4, 5)), ('named', (7, 8)), ('of', (13, 14)), ('consists of', (20, 22)), ('of', (23, 24)), ('trained on', (27, 29))]","[('BERT', (1, 2)), ('model', (6, 7)), ('bert - largecased', (9, 12)), ('PyTorch implementation', (15, 17)), ('vectors', (22, 23)), ('1024', (25, 26)), ('Book s Corpus and English Wikipedia', (29, 35))]",[],[],[],[]
experimental-setup,"For the Transformer encoder layers , we used the same parameters as the "" base "" model of , that is 6 layers with 8 attention heads , a hidden size of 2048 , and a dropout of 0.1 .","[('For', (0, 1)), ('used', (7, 8)), ('as', (11, 12)), ('with', (23, 24)), ('of', (31, 32)), ('of', (37, 38))]","[('Transformer encoder layers', (2, 5)), ('same parameters', (9, 11)), ('"" base "" model', (13, 17)), ('6 layers', (21, 23)), ('8 attention heads', (24, 27)), ('hidden size', (29, 31)), ('2048', (32, 33)), ('dropout', (36, 37)), ('0.1', (38, 39))]",[],[],[],[]
results,"In the results in , we first observe that our systems that use the sense vocabulary compression through hypernyms or through all relations obtain scores that are overall equivalent to the systems that do not use it .","[('observe', (7, 8)), ('that use', (11, 13)), ('through', (17, 18)), ('obtain', (23, 24)), ('to', (29, 30))]","[('our systems', (9, 11)), ('sense vocabulary compression', (14, 17)), ('all relations', (21, 23)), ('scores', (24, 25)), ('overall equivalent', (27, 29)), ('systems', (31, 32))]",[],[],[],[]
results,"In comparison to the other works , thanks to the Princeton WordNet Gloss Corpus added to the training data and the use of BERT as input embeddings , we outperform systematically the state of the art on every task .","[('thanks to', (7, 9)), ('added to', (14, 16)), ('use of', (21, 23)), ('as', (24, 25)), ('outperform', (29, 30)), ('on', (36, 37))]","[('Princeton WordNet Gloss Corpus', (10, 14)), ('BERT', (23, 24)), ('input embeddings', (25, 27)), ('systematically', (30, 31)), ('state of the art', (32, 36)), ('every task', (37, 39))]",[],[],[],[]
ablation-analysis,"As we can see in , the additional training corpus ( WNGC ) and even more the use of BERT as input embeddings both have a major impact on our results and lead to scores above the state of the art .","[('use of', (17, 19)), ('as', (20, 21)), ('on', (28, 29)), ('lead to', (32, 34)), ('above', (35, 36))]","[('additional training corpus ( WNGC )', (7, 13)), ('BERT', (19, 20)), ('input embeddings', (21, 23)), ('major impact', (26, 28)), ('scores', (34, 35)), ('state of the art', (37, 41))]",[],[],[],[]
ablation-analysis,"Using BERT instead of ELMo or Glo Ve improves respectively the score by approximately 3 and 5 points in every experiment , and adding the WNGC to the training data improves it by approximately 2 points .","[('Using', (0, 1)), ('instead of', (2, 4)), ('improves', (8, 9)), ('by', (12, 13)), ('adding', (23, 24)), ('to', (26, 27)), ('by', (32, 33))]","[('BERT', (1, 2)), ('ELMo or Glo Ve', (4, 8)), ('score', (11, 12)), ('approximately 3 and 5 points', (13, 18)), ('every experiment', (19, 21)), ('WNGC', (25, 26)), ('training data', (28, 30)), ('improves', (30, 31)), ('approximately 2 points', (33, 36))]",[],[],[],[]
ablation-analysis,"Finally , using ensembles adds roughly another 1 point to the final F1 score .","[('using', (2, 3)), ('adds', (4, 5)), ('to', (9, 10))]","[('ensembles', (3, 4)), ('roughly another 1 point', (5, 9)), ('final F1 score', (11, 14))]",[],[],[],[]
ablation-analysis,"However , the compression method through all relations seems to negatively impact the results in some cases ( when using ELMo or GloVe especially ) .","[('through', (5, 6)), ('seems to', (8, 10)), ('negatively impact', (10, 12)), ('in', (14, 15)), ('when using', (18, 20))]","[('compression method', (3, 5)), ('all relations', (6, 8)), ('results', (13, 14)), ('some cases', (15, 17)), ('ELMo or GloVe', (20, 23))]",[],[],[],[]
research-problem,Incorporating Glosses into Neural Word Sense Disambiguation,[],"[('Neural Word Sense Disambiguation', (3, 7))]",[],[],[],[]
research-problem,Word Sense Disambiguation ( WSD ) aims to identify the correct meaning of polysemous words in the particular context .,[],"[('Word Sense Disambiguation ( WSD )', (0, 6))]",[],[],[],[]
research-problem,Lexical resources like WordNet which are proved to be of great help for WSD in the knowledge - based methods .,"[('like', (2, 3)), ('for', (12, 13))]","[('Lexical resources', (0, 2)), ('WordNet', (3, 4)), ('WSD', (13, 14))]",[],[],[],[]
model,"In this paper , we propose a novel model GAS : a gloss - augmented WSD neural network which is a variant of the memory network .","[('propose', (5, 6)), ('variant of', (21, 23))]","[('novel model GAS', (7, 10)), ('gloss - augmented WSD neural network', (12, 18)), ('memory network', (24, 26))]",[],[],[],[]
model,GAS jointly encodes the context and glosses of the target word and models the semantic relationship between the context and glosses in the memory module .,"[('jointly encodes', (1, 3)), ('of', (7, 8)), ('models', (12, 13)), ('between', (16, 17)), ('in', (21, 22))]","[('GAS', (0, 1)), ('context and glosses', (4, 7)), ('target word', (9, 11)), ('semantic relationship', (14, 16)), ('context and glosses', (18, 21)), ('memory module', (23, 25))]",[],[],[],[]
model,"In order to measure the inner relationship between glosses and context more accurately , we employ multiple passes operation within the memory as the re-reading process and adopt two memory updating mechanisms .","[('between', (7, 8)), ('employ', (15, 16)), ('within', (19, 20)), ('as', (22, 23)), ('adopt', (27, 28))]","[('inner relationship', (5, 7)), ('glosses and context', (8, 11)), ('multiple passes operation', (16, 19)), ('memory', (21, 22)), ('re-reading process', (24, 26)), ('two memory updating mechanisms', (28, 32))]",[],[],[],[]
experiments,Incorporating Glosses into Neural Word Sense Disambiguation,[],"[('Neural Word Sense Disambiguation', (3, 7))]",[],[],[],[]
hyperparameters,"We use pre-trained word embeddings with 300 dimensions 9 , and keep them fixed during the training process .","[('use', (1, 2)), ('with', (5, 6))]","[('pre-trained word embeddings', (2, 5)), ('300 dimensions', (6, 8)), ('fixed', (13, 14)), ('training process', (16, 18))]",[],[],[],[]
hyperparameters,"We employ 256 hidden units in both the gloss module and the context module , which means n = 256 .","[('employ', (1, 2)), ('in', (5, 6))]","[('256 hidden units', (2, 5)), ('context module', (12, 14))]",[],[],[],[]
hyperparameters,"Orthogonal initialization is used for weights in LSTM and random uniform initialization with range [ - 0.1 , 0.1 ] is used for others .","[('used for', (3, 5)), ('in', (6, 7)), ('with', (12, 13)), ('used for', (21, 23))]","[('Orthogonal initialization', (0, 2)), ('weights', (5, 6)), ('LSTM', (7, 8)), ('random uniform initialization', (9, 12)), ('range [ - 0.1 , 0.1 ]', (13, 20)), ('others', (23, 24))]",[],[],[],[]
hyperparameters,We assign gloss expansion depth K the value of 4 .,"[('assign', (1, 2))]","[('gloss expansion depth K', (2, 6)), ('value', (7, 8)), ('4', (9, 10))]",[],[],[],[]
hyperparameters,"We also experiment with the number of passes | T M | from 1 to 5 in our framework , finding | T M | = 3 performs best .","[('experiment with', (2, 4)), ('from', (12, 13)), ('in', (16, 17)), ('performs', (27, 28))]","[('number of passes | T M |', (5, 12)), ('1 to 5', (13, 16)), ('our framework', (17, 19)), ('finding', (20, 21)), ('best', (28, 29))]",[],[],[],[]
hyperparameters,We use Adam optimizer in the training process with 0.001 initial learning rate .,"[('use', (1, 2)), ('in', (4, 5)), ('with', (8, 9))]","[('Adam optimizer', (2, 4)), ('training process', (6, 8)), ('0.001 initial learning rate', (9, 13))]",[],[],[],[]
hyperparameters,"In order to avoid overfitting , we use dropout regularization and set drop rate to 0.5 .","[('to avoid', (2, 4)), ('use', (7, 8)), ('set', (11, 12)), ('to', (14, 15))]","[('overfitting', (4, 5)), ('dropout regularization', (8, 10)), ('drop rate', (12, 14)), ('0.5', (15, 16))]",[],[],[],[]
hyperparameters,Training runs for up to 100 epochs with early stopping if the validation loss does n't improve within the last 10 epochs .,"[('for', (2, 3)), ('with', (7, 8)), ('if', (10, 11)), ('within', (17, 18))]","[('Training', (0, 1)), ('up to 100 epochs', (3, 7)), ('early stopping', (8, 10)), ('validation loss', (12, 14)), (""does n't improve"", (14, 17)), ('last 10 epochs', (19, 22))]",[],[],[],[]
experiments,Knowledge - based Systems,[],"[('Knowledge - based Systems', (0, 4))]",[],[],[],[]
baselines,Babelfy : exploits the semantic network structure from BabelNet and builds a unified graph - based architecture for WSD and Entity Linking .,"[('exploits', (2, 3)), ('from', (7, 8)), ('builds', (10, 11)), ('for', (17, 18))]","[('Babelfy', (0, 1)), ('semantic network structure', (4, 7)), ('BabelNet', (8, 9)), ('unified graph - based architecture', (12, 17)), ('WSD and Entity Linking', (18, 22))]",[],[],[],[]
experiments,Supervised Systems,[],"[('Supervised Systems', (0, 2))]",[],[],[],[]
baselines,"IMS : Zhi and Ng ( 2010 ) selects a linear Support Vector Machine ( SVM ) as its classifier and makes use of a set of features surrounding the target word within a limited window , such as POS tags , local words and local collocations .","[('selects', (8, 9)), ('as', (17, 18)), ('makes use of', (21, 24)), ('surrounding', (28, 29)), ('within', (32, 33)), ('such as', (37, 39))]","[('IMS', (0, 1)), ('linear Support Vector Machine ( SVM )', (10, 17)), ('classifier', (19, 20)), ('set of features', (25, 28)), ('target word', (30, 32)), ('limited window', (34, 36)), ('POS tags', (39, 41)), ('local words', (42, 44)), ('local collocations', (45, 47))]",[],[],[],[]
baselines,IMS +emb : selects IMS as the underlying framework and makes use of word embeddings as features which makes it hard to beat inmost of WSD datasets .,"[('selects', (3, 4)), ('as', (5, 6)), ('makes use of', (10, 13)), ('as', (15, 16))]","[('IMS +emb', (0, 2)), ('IMS', (4, 5)), ('underlying framework', (7, 9)), ('word embeddings', (13, 15)), ('features', (16, 17))]",[],[],[],[]
experiments,Neural - based Systems,[],"[('Neural - based Systems', (0, 4))]",[],[],[],[]
baselines,Bi- LSTM : leverages a bidirectional LSTM network which shares model parameters among all words .,"[('leverages', (3, 4)), ('shares', (9, 10)), ('among', (12, 13))]","[('Bi- LSTM', (0, 2)), ('bidirectional LSTM network', (5, 8)), ('model parameters', (10, 12)), ('all words', (13, 15))]",[],[],[],[]
baselines,"Bi-LSTM +att.+ LEX and it s variant Bi- LSTM +att.+ LEX+P OS : transfers WSD into a sequence learning task and propose a multi - task learning framework for WSD , POS tagging and coarse - grained semantic labels ( LEX ) .","[('transfers', (13, 14)), ('into', (15, 16)), ('propose', (21, 22)), ('for', (28, 29))]","[('WSD', (14, 15)), ('sequence learning task', (17, 20)), ('multi - task learning framework', (23, 28)), ('WSD', (29, 30)), ('POS tagging', (31, 33)), ('coarse - grained semantic labels ( LEX )', (34, 42))]",[],[],[],[]
results,English all - words results,[],"[('English all - words results', (0, 5))]",[],[],[],[]
results,GAS and GAS ext achieves the state - of - theart performance on the concatenation of all test datasets .,"[('achieves', (4, 5)), ('on', (12, 13)), ('concatenation of', (14, 16))]","[('GAS and GAS ext', (0, 4)), ('state - of - theart performance', (6, 12)), ('all test datasets', (16, 19))]",[],[],[],[]
results,"Although there is no one system always performs best on all the test sets 10 , we can find that GAS ext with concatenation memory updating strategy achieves the best results 70.6 on the concatenation of the four test datasets .","[('find that', (18, 20)), ('with', (22, 23)), ('achieves', (27, 28)), ('on', (32, 33)), ('concatenation of', (34, 36))]","[('GAS ext', (20, 22)), ('concatenation memory updating strategy', (23, 27)), ('best results', (29, 31)), ('70.6', (31, 32)), ('four test datasets', (37, 40))]",[],[],[],[]
results,It shows that appropriate number of passes can boost the performance as well as avoid over - fitting of the model .,"[('shows', (1, 2)), ('boost', (8, 9)), ('avoid', (14, 15)), ('of', (18, 19))]","[('appropriate number of passes', (3, 7)), ('performance', (10, 11)), ('over - fitting', (15, 18)), ('model', (20, 21))]",[],[],[],[]
results,Multiple Passes Analysis,[],"[('Multiple Passes Analysis', (0, 3))]",[],[],[],[]
results,"It shows that multiple passes operation performs better than one pass , though the improvement is not significant .","[('shows that', (1, 3)), ('shows', (1, 2)), ('performs', (6, 7)), ('than', (8, 9))]","[('multiple passes operation', (3, 6)), ('better', (7, 8)), ('one pass', (9, 11))]",[],[],[],[]
results,"In Table 3 , with the increasing number of passes , the F1 - score increases .","[('with', (4, 5))]","[('increasing number of passes', (6, 10)), ('F1 - score', (12, 15)), ('increases', (15, 16))]",[],[],[],[]
results,"However , when the number of passes is larger than 3 , the F1- score stops increasing or even decreases due to over-fitting .","[('when', (2, 3)), ('is', (7, 8)), ('larger than', (8, 10)), ('stops', (15, 16)), ('due to', (20, 22))]","[('number of passes', (4, 7)), ('3', (10, 11)), ('F1- score', (13, 15)), ('increasing or even decreases', (16, 20)), ('over-fitting', (22, 23))]",[],[],[],[]
research-problem,Word Sense Disambiguation using a Bidirectional LSTM,[],"[('Word Sense Disambiguation', (0, 3))]",[],[],[],[]
research-problem,"The task of assigning a word token in a text , e.g. rock , to a well defined word sense in a lexicon is called word sense disambiguation ( WSD ) .",[],"[('word sense disambiguation ( WSD )', (25, 31))]",[],[],[],[]
research-problem,"Improved WSD would be beneficial to many natural language processing ( NLP ) problems , e.g. machine translation , information Retrieval , information Extraction , and sense aware word representations .",[],"[('Improved WSD', (0, 2))]",[],[],[],[]
model,"We aim to mitigate these problems by ( 1 ) modeling the sequence of words surrounding the target word , and ( 2 ) refrain from using any hand crafted features or external resources and instead represent the words using real valued vector representation , i.e. word embeddings .","[('modeling', (10, 11)), ('surrounding', (15, 16)), ('represent', (36, 37)), ('using', (39, 40))]","[('sequence of words', (12, 15)), ('target word', (17, 19)), ('words', (38, 39)), ('real valued vector representation', (40, 44)), ('word embeddings', (46, 48))]",[],[],[],[]
experimental-setup,"The source code , implemented using TensorFlow , has been released as open source 1 .","[('implemented using', (4, 6))]","[('TensorFlow', (6, 7))]",[],[],[],[]
experimental-setup,The embeddings are initialized using a set of freely available 2 Glo Ve vectors trained on Wikipedia and Gigaword .,"[('initialized using', (3, 5)), ('trained on', (14, 16))]","[('embeddings', (1, 2)), ('freely available 2 Glo Ve vectors', (8, 14)), ('Wikipedia and Gigaword', (16, 19))]",[],[],[],[]
experimental-setup,"Words not included in this set are initialized from N ( 0 , 0.1 ) .","[('not included in', (1, 4)), ('initialized from', (7, 9))]","[('Words', (0, 1)), ('N ( 0 , 0.1 )', (9, 15))]",[],[],[],[]
results,Our proposed model achieves the top score on SE2 and are tied with IMS + adapted CW on SE3 .,"[('achieves', (3, 4)), ('on', (7, 8)), ('tied with', (11, 13)), ('on', (17, 18))]","[('Our proposed model', (0, 3)), ('top score', (5, 7)), ('SE2', (8, 9)), ('IMS + adapted CW', (13, 17)), ('SE3', (18, 19))]",[],[],[],[]
results,"Moreover , we see that dropword consistently improves the results on both SE2 and SE3 .","[('see that', (3, 5)), ('consistently improves', (6, 8)), ('on', (10, 11))]","[('dropword', (5, 6)), ('results', (9, 10)), ('SE2 and SE3', (12, 15))]",[],[],[],[]
results,"Randomizing the order of the input words yields a substantially worse result , which provides evidence for our hypothesis that the order of the words are significant .","[('Randomizing', (0, 1)), ('yields', (7, 8))]","[('input words', (5, 7)), ('substantially worse result', (9, 12))]",[],[],[],[]
results,We also see that the system effectively makes use of the information in the pre-trained word embeddings and that they are essential to the performance of our system on these datasets .,"[('see that', (2, 4)), ('effectively makes use of', (6, 10)), ('in', (12, 13))]","[('system', (5, 6)), ('information', (11, 12)), ('pre-trained word embeddings', (14, 17))]",[],[],[],[]
research-problem,Knowledge - based Word Sense Disambiguation using Topic Models,[],"[('Knowledge - based Word Sense Disambiguation', (0, 6))]",[],[],[],[]
research-problem,Disambiguation is an open problem in Natural Language Processing which is particularly challenging and useful in the unsupervised setting where all the words in any given text need to be disambiguated without using any labeled data .,[],"[('Disambiguation', (0, 1))]",[],[],[],[]
research-problem,Typically WSD systems use the sentence or a small window of words around the target word as the context for disambiguation because their computational complexity scales exponentially with the size of the context .,"[('around', (12, 13)), ('as', (16, 17)), ('for', (19, 20))]","[('WSD', (1, 2)), ('sentence', (5, 6)), ('target word', (14, 16)), ('context', (18, 19)), ('disambiguation', (20, 21))]",[],[],[],[]
research-problem,Word Sense Disambiguation ( WSD ) is the task of mapping an ambiguous word in a given context to its correct meaning .,[],"[('Word Sense Disambiguation ( WSD )', (0, 6))]",[],[],[],[]
model,"In this paper , we propose a novel knowledge - based WSD algorithm for the all - word WSD task , which utilizes the whole document as the context for a word , rather than just the current sentence used by most WSD systems .","[('propose', (5, 6)), ('for', (13, 14)), ('utilizes', (22, 23)), ('as', (26, 27)), ('for', (29, 30))]","[('novel knowledge - based WSD algorithm', (7, 13)), ('all - word WSD task', (15, 20)), ('whole document', (24, 26)), ('context', (28, 29)), ('word', (31, 32))]",[],[],[],[]
model,"In order to model the whole document for WSD , we leverage the formalism of topic models , especially Latent Dirichlet Allocation ( LDA ) .","[('for', (7, 8)), ('leverage', (11, 12)), ('of', (14, 15)), ('especially', (18, 19))]","[('WSD', (8, 9)), ('formalism', (13, 14)), ('topic models', (15, 17)), ('Latent Dirichlet Allocation ( LDA )', (19, 25))]",[],[],[],[]
model,Our method is a variant of LDA in which the topic proportions for a document are replaced by synset proportions for a document .,"[('is', (2, 3)), ('in which', (7, 9)), ('for', (12, 13)), ('replaced by', (16, 18)), ('for', (20, 21))]","[('variant of LDA', (4, 7)), ('topic proportions', (10, 12)), ('document', (14, 15)), ('synset proportions', (18, 20)), ('document', (22, 23))]",[],[],[],[]
model,We use a non-uniform prior for the synset distribution over words to model the frequency of words within a synset .,"[('use', (1, 2)), ('for', (5, 6)), ('over', (9, 10)), ('to model', (11, 13)), ('within', (17, 18))]","[('non-uniform prior', (3, 5)), ('synset distribution', (7, 9)), ('words', (10, 11)), ('frequency of words', (14, 17)), ('synset', (19, 20))]",[],[],[],[]
model,"Furthermore , we also model the relationships between synsets by using a logisticnormal prior for drawing the synset proportions of the document .","[('model', (4, 5)), ('between', (7, 8)), ('by using', (9, 11)), ('for drawing', (14, 16)), ('of', (19, 20))]","[('relationships', (6, 7)), ('synsets', (8, 9)), ('logisticnormal prior', (12, 14)), ('synset proportions', (17, 19)), ('document', (21, 22))]",[],[],[],[]
results,"The proposed method , denoted by WSD - TM in the tables referring to WSD using topic models , outperforms the state - of - the - art WSD system by a significant margin ( pvalue < 0.01 ) by achieving an overall F1 - score of 66.9 as compared to Moro14 's score of 65.5 .","[('outperforms', (19, 20)), ('by', (30, 31)), ('by achieving', (39, 41)), ('of', (46, 47)), ('compared to', (49, 51)), ('of', (54, 55))]","[('proposed method', (1, 3)), ('WSD - TM', (6, 9)), ('state - of - the - art WSD system', (21, 30)), ('significant margin ( pvalue < 0.01 )', (32, 39)), ('overall F1 - score', (42, 46)), ('66.9', (47, 48)), (""Moro14 's score"", (51, 54)), ('65.5', (55, 56))]",[],[],[],[]
results,"We also observe that the performance of the proposed model is not much worse than the best supervised system , Melamud16 ( 69.4 ) .","[('observe', (2, 3)), ('of', (6, 7)), ('is', (10, 11)), ('than', (14, 15))]","[('performance', (5, 6)), ('proposed model', (8, 10)), ('not much worse', (11, 14)), ('best supervised system', (16, 19)), ('Melamud16 ( 69.4 )', (20, 24))]",[],[],[],[]
results,The proposed system outperforms all previous knowledgebased systems overall parts of speech .,"[('outperforms', (3, 4))]","[('proposed system', (1, 3)), ('all previous knowledgebased systems', (4, 8)), ('overall parts of speech', (8, 12))]",[],[],[],[]
research-problem,Mixing Context Granularities for Improved Entity Linking on Question Answering Data across Entity Categories,[],"[('Question Answering', (8, 10))]",[],[],[],[]
research-problem,"The first stage for every QA approach is entity linking ( EL ) , that is the identification of entity mentions in the question and linking them to entities in KB .",[],"[('entity linking ( EL )', (8, 13))]",[],[],[],[]
research-problem,The state - of - the - art QA systems usually rely on off - the - shelf EL systems to extract entities from the question .,[],"[('QA', (8, 9))]",[],[],[],[]
model,"In this paper , we present an approach that tackles the challenges listed above : we perform entity mention detection and entity disambiguation jointly in a single neural model that makes the whole process end - to - end differentiable .","[('perform', (16, 17)), ('in', (24, 25)), ('makes', (30, 31))]","[('entity mention detection and entity disambiguation', (17, 23)), ('jointly', (23, 24)), ('single neural model', (26, 29)), ('whole process', (32, 34)), ('end - to - end differentiable', (34, 40))]",[],[],[],[]
model,"To overcome the noise in the data , we automatically learn features over a set of contexts of different granularity levels .","[('To overcome', (0, 2)), ('automatically learn', (9, 11)), ('over', (12, 13)), ('of', (17, 18))]","[('noise', (3, 4)), ('features', (11, 12)), ('set of contexts', (14, 17)), ('different granularity levels', (18, 21))]",[],[],[],[]
model,Each level of granularity is handled by a separate component of the model .,"[('handled by', (5, 7)), ('of', (10, 11))]","[('Each level of granularity', (0, 4)), ('separate component', (8, 10)), ('model', (12, 13))]",[],[],[],[]
model,"A token - level component extracts higher - level features from the whole question context , whereas a character - level component builds lower - level features for the candidate n-gram .","[('extracts', (5, 6)), ('from', (10, 11)), ('builds', (22, 23)), ('for', (27, 28))]","[('token - level component', (1, 5)), ('higher - level features', (6, 10)), ('whole question context', (12, 15)), ('character - level component', (18, 22)), ('lower - level features', (23, 27)), ('candidate n-gram', (29, 31))]",[],[],[],[]
model,"Simultaneously , we extract features from the knowledge base context of the candidate entity : character - level features are extracted for the entity label and higher - level features are produced based on the entities surrounding the candidate entity in the knowledge graph .","[('extract', (3, 4)), ('from', (5, 6)), ('of', (10, 11)), ('extracted for', (20, 22)), ('produced', (31, 32)), ('based on', (32, 34)), ('surrounding', (36, 37)), ('in', (40, 41))]","[('features', (4, 5)), ('knowledge base context', (7, 10)), ('candidate entity', (12, 14)), ('character - level features', (15, 19)), ('entity label', (23, 25)), ('higher - level features', (26, 30)), ('entities', (35, 36)), ('candidate entity', (38, 40)), ('knowledge graph', (42, 44))]",[],[],[],[]
model,This information is aggregated and used to predict whether the n-gram is an entity mention and to what entity it should be linked .,"[('is', (11, 12))]","[('aggregated', (3, 4)), ('n-gram', (10, 11)), ('entity mention', (13, 15)), ('linked', (22, 23))]",[],[],[],[]
code,The complete code as well as the scripts that produce the evaluation data can be found here : https://github.com/UKPLab/ starsem2018-entity-linking.,[],"[('https://github.com/UKPLab/ starsem2018-entity-linking.', (18, 20))]",[],[],[],[]
experiments,Existing systems,[],"[('Existing systems', (0, 2))]",[],[],[],[]
baselines,"In our experiments , we compare to DBPedia Spotlight that was used in several QA systems and represents a strong baseline for entity linking 4 .","[('compare to', (5, 7)), ('used in', (11, 13)), ('represents', (17, 18)), ('for', (21, 22))]","[('DBPedia Spotlight', (7, 9)), ('entity linking', (22, 24))]",[],[],[],[]
results,"In addition , we are able to compare to the state - of - the - art S - MART system , since their output on the WebQSP datasets was publicly released 5 .","[('compare to', (7, 9))]","[('state - of - the - art S - MART system', (10, 21))]",[],[],[],[]
baselines,We also include a heuristics baseline that ranks candidate entities according to their frequency in Wikipedia .,"[('include', (2, 3)), ('ranks', (7, 8)), ('according to', (10, 12)), ('in', (14, 15))]","[('heuristics baseline', (4, 6)), ('candidate entities', (8, 10)), ('frequency', (13, 14)), ('Wikipedia', (15, 16))]",[],[],[],[]
baselines,Simplified VCG,[],"[('Simplified VCG', (0, 2))]",[],[],[],[]
hyperparameters,"In particular , we employ features that cover ( 1 ) frequency of the entity in Wikipedia , ( 2 ) edit distance between the label of the entity and the token n-gram , ( 3 ) number of entities and relations immediately connected to the entity in the KB , ( 4 ) word overlap between the input question and the labels of the connected entities and relations , ( 5 ) length of the n-gram .","[('employ', (4, 5)), ('of', (12, 13)), ('in', (15, 16)), ('between', (23, 24)), ('of', (26, 27)), ('immediately connected to', (42, 45)), ('in', (47, 48)), ('between', (56, 57)), ('of', (63, 64)), ('of', (74, 75))]","[('features', (5, 6)), ('cover', (7, 8)), ('frequency', (11, 12)), ('entity', (14, 15)), ('Wikipedia', (16, 17)), ('edit distance', (21, 23)), ('label', (25, 26)), ('token n-gram', (31, 33)), ('number of entities and relations', (37, 42)), ('entity', (46, 47)), ('KB', (49, 50)), ('word overlap', (54, 56)), ('input question', (58, 60)), ('labels', (62, 63)), ('connected entities and relations', (65, 69)), ('length', (73, 74)), ('n-gram', (76, 77))]",[],[],[],[]
results,The VCG model shows the overall F- score result that is better than the DBPedia Spotlight baseline by a wide margin .,"[('shows', (3, 4)), ('better than', (11, 13)), ('by', (17, 18))]","[('VCG model', (1, 3)), ('overall F- score result', (5, 9)), ('DBPedia Spotlight baseline', (14, 17)), ('wide margin', (19, 21))]",[],[],[],[]
results,It is notable that again our model achieves higher precision values as compared to other approaches and manages to keep a satisfactory level of recall .,"[('achieves', (7, 8)), ('compared to', (12, 14)), ('manages to keep', (17, 20))]","[('our model', (5, 7)), ('higher precision values', (8, 11)), ('other approaches', (14, 16)), ('satisfactory level of recall', (21, 25))]",[],[],[],[]
research-problem,One Single Deep Bidirectional LSTM Network for Word Sense Disambiguation of Text Data,[],"[('Word Sense Disambiguation of Text Data', (7, 13))]",[],[],[],[]
research-problem,"To mine these data properly , attributable to their innate ambiguity , a Word Sense Disambiguation ( WSD ) algorithm can avoid numbers of difficulties in Natural Language Processing ( NLP ) pipeline .",[],"[('Word Sense Disambiguation ( WSD ) algorithm', (13, 20))]",[],[],[],[]
research-problem,"However , considering a large number of ambiguous words in one language or technical domain , we may encounter limiting constraints for proper deployment of existing WSD models .",[],[],[],[],[],[]
model,"In this effort , we develop our supervised WSD model that leverages a Bidirectional Long Short - Term Memory ( BLSTM ) network .","[('develop', (5, 6)), ('leverages', (11, 12))]","[('supervised WSD model', (7, 10)), ('Bidirectional Long Short - Term Memory ( BLSTM ) network', (13, 23))]",[],[],[],[]
model,"This network works with neural sense vectors ( i.e. sense embeddings ) , which are learned during model training , and employs neural word vectors ( i.e. word embeddings ) , which are learned through an unsupervised deep learning approach called GloVe ( Global Vectors for word representation ) for the context words .","[('works with', (2, 4)), ('learned during', (15, 17)), ('employs', (21, 22)), ('learned through', (33, 35)), ('called', (40, 41)), ('for', (49, 50))]","[('neural sense vectors ( i.e. sense embeddings )', (4, 12)), ('model training', (17, 19)), ('neural word vectors ( i.e. word embeddings )', (22, 30)), ('unsupervised deep learning approach', (36, 40)), ('context words', (51, 53))]",[],[],[],[]
results,Between - all - models comparisons,[],"[('Between - all - models comparisons', (0, 6))]",[],[],[],[]
results,"We show our single model sits among the 5 top - performing algorithms , considering that in other algorithms for each ambiguous word one separate classifier is trained ( i.e. in the same number of ambiguous words in a language there have to be classifiers ; which means 57 classifiers for this specific task ) .","[('show', (1, 2)), ('sits among', (5, 7)), ('among', (6, 7))]","[('5 top - performing algorithms', (8, 13))]",[],[],[],[]
results,shows the results of the top - performing and low - performing supervised algorithms .,"[('shows', (0, 1)), ('of', (3, 4))]","[('results', (2, 3)), ('top - performing and low - performing supervised algorithms', (5, 14))]",[],[],[],[]
results,Within - our - model comparisons,[],"[('Within - our - model comparisons', (0, 6))]",[],[],[],[]
results,"We observe if reverse the sequential follow of information into our Bidirectional LSTM , we shuffle the order of the context words , or even replace our Bidirectional LSTMs with two different fully - connected networks of the same size 50 ( the size of the LSTMs outputs ) , the achieved results were notably less than 72.5 % .","[('observe', (1, 2)), ('of', (7, 8)), ('into', (9, 10)), ('shuffle', (15, 16)), ('of', (18, 19)), ('replace', (25, 26)), ('with', (29, 30)), ('of', (36, 37))]","[('reverse', (3, 4)), ('sequential follow', (5, 7)), ('information', (8, 9)), ('our Bidirectional LSTM', (10, 13)), ('order', (17, 18)), ('context words', (20, 22)), ('our Bidirectional LSTMs', (26, 29)), ('two different fully - connected networks', (30, 36)), ('same size 50', (38, 41)), ('achieved results', (51, 53)), ('72.5 %', (57, 59))]",[],[],[],[]
research-problem,Neural Sequence Learning Models for Word Sense Disambiguation,[],"[('Word Sense Disambiguation', (5, 8))]",[],[],[],[]
research-problem,"As one of the long - standing challenges in Natural Language Processing ( NLP ) , Word Sense Disambiguation , WSD ) has received considerable attention over recent years .",[],"[('Word Sense Disambiguation , WSD )', (16, 22))]",[],[],[],[]
model,"In this paper our focus is on supervised WSD , but we depart from previous approaches and adopt a different perspective on the task : instead of framing a separate classification problem for each given word , we aim at modeling the joint disambiguation of the target text as a whole in terms of a sequence labeling problem .","[('in terms of', (51, 54))]","[('supervised WSD', (7, 9)), ('joint disambiguation', (42, 44)), ('sequence labeling problem', (55, 58))]",[],[],[],[]
model,"With this in mind , we design , analyze and compare experimentally various neural architectures of different complexities , ranging from a single bidirectional Long Short - Term Memory to a sequence - tosequence approach .","[('of', (15, 16))]","[('various neural architectures', (12, 15)), ('ranging', (19, 20)), ('single bidirectional Long Short - Term Memory', (22, 29)), ('sequence - tosequence approach', (31, 35))]",[],[],[],[]
model,"Each architecture reflects a particular way of modeling the disambiguation problem , but they all share some key features that set them apart from previous supervised approaches to WSD : they are trained end - to - end from sense - annotated text to sense labels , and learn a single all - words model from the training data , without fine tuning or explicit engineering of local features .","[('reflects', (2, 3)), ('trained', (32, 33)), ('from', (38, 39)), ('to', (43, 44)), ('learn', (48, 49)), ('from', (55, 56)), ('without', (60, 61))]","[('disambiguation problem', (9, 11)), ('WSD', (28, 29)), ('sense - annotated text', (39, 43)), ('sense labels', (44, 46)), ('single all - words model', (50, 55)), ('training data', (57, 59))]",[],[],[],[]
hyperparameters,"To set a level playing field with comparison systems on English all - words WSD , we followed and , for all our models , we used a layer of word embeddings pre-trained 8 on the English uk WaC corpus as initialization , and kept them fixed during the training process .","[('on', (9, 10)), ('used', (26, 27)), ('as', (40, 41))]","[('English all - words WSD', (10, 15)), ('layer of word embeddings', (28, 32)), ('pre-trained', (32, 33)), ('English uk WaC corpus', (36, 40)), ('initialization', (41, 42)), ('fixed', (46, 47)), ('training process', (49, 51))]",[],[],[],[]
hyperparameters,For all architectures we then employed 2 layers of bidirectional LSTM with 2048 hidden units ( 1024 units per direction ) .,"[('For', (0, 1)), ('employed', (5, 6)), ('of', (8, 9)), ('with', (11, 12))]","[('all architectures', (1, 3)), ('2 layers', (6, 8)), ('bidirectional LSTM', (9, 11)), ('2048 hidden units', (12, 15))]",[],[],[],[]
results,"We report the F1 - score on each in - dividual test set , as well as the F1- score obtained on the concatenation of all four test sets , divided by part - of - speech tag .","[('report', (1, 2)), ('on', (6, 7)), ('obtained on', (20, 22)), ('of', (24, 25)), ('divided by', (30, 32))]","[('F1 - score', (3, 6)), ('each in - dividual test set', (7, 13)), ('F1- score', (18, 20)), ('concatenation', (23, 24)), ('all four test sets', (25, 29)), ('part - of - speech tag', (32, 38))]",[],[],[],[]
hyperparameters,"As supervised systems , we considered Context2 Vec and It Makes Sense , both the original implementation and the best configuration reported by , which also integrates word embeddings using exponential decay .","[('As', (0, 1)), ('considered', (5, 6)), ('integrates', (26, 27)), ('using', (29, 30))]","[('supervised systems', (1, 3)), ('Context2 Vec', (6, 8)), ('word embeddings', (27, 29)), ('exponential decay', (30, 32))]",[],[],[],[]
results,"11 Overall , both BLSTM and Seq2Seq achieved results that are either state - of - the - art or statistically equivalent ( unpaired t- test , p < 0.05 ) to the best supervised system in each benchmark , performing on par with word experts tuned over explicitly engineered features .","[('achieved', (7, 8)), ('to', (31, 32)), ('on par with', (41, 44)), ('tuned over', (46, 48))]","[('BLSTM and Seq2Seq', (4, 7)), ('results', (8, 9)), ('state - of - the - art', (12, 19)), ('best supervised system', (33, 36)), ('performing', (40, 41)), ('word experts', (44, 46)), ('explicitly engineered features', (48, 51))]",[],[],[],[]
results,"Interestingly enough , BLSTM models tended consistently to outperform their Seq2Seq counterparts , suggesting that an encoder - decoder architecture , despite being more powerful , might be suboptimal for WSD .","[('tended', (5, 6)), ('to outperform', (7, 9))]","[('BLSTM models', (3, 5)), ('Seq2Seq counterparts', (10, 12))]",[],[],[],[]
results,English All - words WSD,[],"[('English All - words WSD', (0, 5))]",[],[],[],[]
results,"It is worth noting that RNN - based architectures outperformed classical supervised approaches when dealing with verbs , which are shown to be highly ambiguous .","[('outperformed', (9, 10)), ('when dealing with', (13, 16))]","[('RNN - based architectures', (5, 9)), ('classical supervised approaches', (10, 13)), ('verbs', (16, 17))]",[],[],[],[]
results,"Both BLSTM and Seq2Seq outperformed UKB and IMS trained on SemCor , as well as recent supervised approaches based on distributional semantics and neural architectures .","[('outperformed', (4, 5)), ('trained on', (8, 10))]","[('BLSTM and Seq2Seq', (1, 4)), ('UKB and IMS', (5, 8)), ('SemCor', (10, 11))]",[],[],[],[]
results,Multilingual All - words WSD,[],"[('Multilingual All - words WSD', (0, 5))]",[],[],[],[]
results,"F - score figures show that bilingual and multilingual models , despite being trained only on English data , consistently outperformed the MFS baseline and achieved results that are competitive with the best participating systems in the task .","[('show', (4, 5)), ('consistently outperformed', (19, 21)), ('achieved', (25, 26))]","[('bilingual and multilingual models', (6, 10)), ('MFS baseline', (22, 24)), ('competitive', (29, 30)), ('best participating systems', (32, 35))]",[],[],[],[]
results,"We also note that the overall F- score performance did not change substantially ( and slightly improved ) when moving from bilingual to multilingual models , despite the increase in the number of target languages treated simultaneously .","[('note', (2, 3)), ('when', (18, 19)), ('moving from', (19, 21))]","[('overall F- score performance', (5, 9)), ('bilingual to multilingual models', (21, 25))]",[],[],[],[]
research-problem,Does BERT Make Any Sense ? Interpretable Word Sense Disambiguation with Contextualized Embeddings,[],"[('Interpretable Word Sense Disambiguation', (6, 10))]",[],[],[],[]
research-problem,"Since vectors of the same word type can vary depending on the respective context , they implicitly provide a model for word sense disambiguation ( WSD ) .",[],"[('word sense disambiguation ( WSD )', (21, 27))]",[],[],[],[]
research-problem,We introduce a simple but effective approach to WSD using a nearest neighbor classification on CWEs .,"[('introduce', (1, 2)), ('to', (7, 8)), ('using', (9, 10)), ('on', (14, 15))]","[('WSD', (8, 9)), ('nearest neighbor classification', (11, 14)), ('CWEs', (15, 16))]",[],[],[],[]
research-problem,We show that CWEs can be utilized directly to approach the WSD task due to their nature of providing distinct vector representations for the same token depending on its context .,"[('show', (1, 2)), ('to approach', (8, 10))]","[('CWEs', (3, 4)), ('utilized directly', (6, 8)), ('WSD task', (11, 13))]",[],[],[],[]
model,"To learn the semantic capabilities of CWEs , we employ a simple , yet interpretable approach to WSD using a k -nearest neighbor classification ( kNN ) approach .","[('of', (5, 6)), ('employ', (9, 10)), ('to', (16, 17)), ('using', (18, 19))]","[('semantic capabilities', (3, 5)), ('CWEs', (6, 7)), ('simple , yet interpretable approach', (11, 16)), ('WSD', (17, 18)), ('k -nearest neighbor classification ( kNN ) approach', (20, 28))]",[],[],[],[]
results,Contextualized Embeddings,[],"[('Contextualized Embeddings', (0, 2))]",[],[],[],[]
results,Simple k NN with ELMo as well as BERT embeddings beats the state of the art of the lexical sample task SE - 2 ( cp. Table 3 ) .,"[('as well as', (5, 8)), ('beats', (10, 11)), ('of', (16, 17))]","[('Simple k NN', (0, 3)), ('ELMo', (4, 5)), ('BERT embeddings', (8, 10)), ('state of the art', (12, 16)), ('lexical sample task SE - 2', (18, 24))]",[],[],[],[]
results,BERT also outperforms all others on the SE - 3 task .,"[('on', (5, 6))]","[('BERT', (0, 1)), ('outperforms', (2, 3)), ('all others', (3, 5)), ('SE - 3 task', (7, 11))]",[],[],[],[]
results,"However , we observe a major performance drop of our approach for the two all - words WSD tasks in which no training data is provided along with the test set .","[('observe', (3, 4)), ('of', (8, 9)), ('for', (11, 12)), ('provided', (25, 26)), ('along with', (26, 28))]","[('major performance drop', (5, 8)), ('our approach', (9, 11)), ('two all - words WSD tasks', (13, 19)), ('test set', (29, 31))]",[],[],[],[]
results,"In fact , similarity of contextualized embeddings largely relies on semantically and structurally similar sentence contexts of polysemic target words .","[('of', (16, 17))]","[('similarity', (3, 4)), ('contextualized embeddings', (5, 7)), ('semantically and structurally similar sentence contexts', (10, 16)), ('polysemic target words', (17, 20))]",[],[],[],[]
results,"As can be seen in , the SE - 2 and SE - 3 training datasets provide more CWEs for each word and sense , and our approach performs better with a growing number of CWEs , even with a higher average number of senses per word as is the casein SE - 3 .","[('provide', (16, 17)), ('for', (19, 20)), ('performs', (28, 29)), ('with', (30, 31))]","[('SE - 2 and SE - 3 training datasets', (7, 16)), ('more CWEs', (17, 19)), ('each word and sense', (20, 24)), ('our approach', (26, 28)), ('better', (29, 30)), ('growing number of CWEs', (32, 36)), ('higher average number of senses per word', (40, 47))]",[],[],[],[]
results,"Moreover , CWEs actually do not organize well in spherically shaped form in the embedding space .","[('do not organize', (4, 7)), ('in', (8, 9)), ('in', (12, 13))]","[('CWEs', (2, 3)), ('well', (7, 8)), ('spherically shaped form', (9, 12)), ('embedding space', (14, 16))]",[],[],[],[]
results,Nearest Neighbors,[],"[('Nearest Neighbors', (0, 2))]",[],[],[],[]
baselines,K- Optimization :,[],"[('K- Optimization', (0, 2))]",[],[],[],[]
results,"For SensEval - 2 and SensEval - 3 , we achieve a new state - of - the - art result .","[('For', (0, 1)), ('achieve', (10, 11))]","[('SensEval - 2 and SensEval - 3', (1, 8)), ('new state - of - the - art result', (12, 21))]",[],[],[],[]
results,"For the S7 - T * , we also achieve minor improvements with a higher k , but still drastically lack behind the state of the art .","[('For', (0, 1)), ('achieve', (9, 10)), ('with', (12, 13))]","[('S7 - T *', (2, 6)), ('minor improvements', (10, 12)), ('higher k', (14, 16)), ('state of the art', (23, 27))]",[],[],[],[]
results,Senses in CWE space :,[],"[('Senses in CWE space', (0, 4))]",[],[],[],[]
results,We investigate how well different CWE models encode information such as distinguishable senses in their vector space .,"[('investigate', (1, 2)), ('encode', (7, 8)), ('such as', (9, 11)), ('in', (13, 14))]","[('different CWE models', (4, 7)), ('information', (8, 9)), ('distinguishable senses', (11, 13)), ('vector space', (15, 17))]",[],[],[],[]
results,The Flair embeddings hardly allow to distinguish any clusters as most senses are scattered across the entire plot .,"[('hardly allow to distinguish', (3, 7)), ('scattered across', (13, 15))]","[('Flair embeddings', (1, 3)), ('any clusters', (7, 9)), ('most senses', (10, 12)), ('entire plot', (16, 18))]",[],[],[],[]
results,"In the ELMo embedding space , the major senses are slightly more separated in different regions of the point cloud .","[('In', (0, 1)), ('are', (9, 10)), ('in', (13, 14)), ('of', (16, 17))]","[('ELMo embedding space', (2, 5)), ('major senses', (7, 9)), ('slightly more separated', (10, 13)), ('different regions', (14, 16)), ('point cloud', (18, 20))]",[],[],[],[]
research-problem,Learning Distributed Representations of Texts and Entities from Knowledge Base,[],[],[],[],[],[]
model,"In particular , we propose Neural Text - Entity Encoder ( NTEE ) , a neural network model to jointly learn distributed representations of texts ( i.e. , sentences and paragraphs ) and KB entities .","[('propose', (4, 5)), ('to jointly learn', (18, 21)), ('of', (23, 24))]","[('Neural Text - Entity Encoder ( NTEE )', (5, 13)), ('neural network model', (15, 18)), ('distributed representations', (21, 23)), ('KB entities', (33, 35))]",[],[],[],[]
model,"For every text in the KB , our model aims to predict its relevant entities , and places the text and the relevant entities close to each other in a continuous vector space .","[('For', (0, 1)), ('in', (3, 4)), ('aims to predict', (9, 12)), ('places', (17, 18)), ('close to', (24, 26)), ('in', (28, 29))]","[('every text', (1, 3)), ('KB', (5, 6)), ('relevant entities', (13, 15)), ('text and the relevant entities', (19, 24)), ('each other', (26, 28)), ('continuous vector space', (30, 33))]",[],[],[],[]
model,We use humanedited entity annotations obtained from Wikipedia ( see ) as supervised data of relevant entities to the texts containing these annotations .,"[('use', (1, 2)), ('obtained from', (5, 7)), ('as', (11, 12)), ('of', (14, 15)), ('to', (17, 18)), ('containing', (20, 21))]","[('humanedited entity annotations', (2, 5)), ('Wikipedia', (7, 8)), ('supervised data', (12, 14)), ('relevant entities', (15, 17)), ('texts', (19, 20))]",[],[],[],[]
model,"Note that , KB entities have been conventionally used to model semantics of texts .",[],"[('KB entities', (3, 5)), ('semantics', (11, 12)), ('texts', (13, 14))]",[],[],[],[]
research-problem,"A representative example is Explicit Semantic Analysis ( ESA ) , which represents the semantics of a text using a sparse vector space , where each dimension corresponds to the relevance score of the text to each entity .","[('represents', (12, 13)), ('using', (18, 19))]","[('Explicit Semantic Analysis ( ESA )', (4, 10)), ('semantics', (14, 15)), ('sparse vector space', (20, 23))]",[],[],[],[]
research-problem,"Essentially , ESA shows that text can be accurately represented using a small set of its relevant entities .","[('shows', (3, 4))]","[('ESA', (2, 3)), ('text', (5, 6)), ('relevant entities', (16, 18))]",[],[],[],[]
model,"Furthermore , we also consider that placing texts and entities into the same vector space enables us to easily compute the similarity between texts and entities , which can be beneficial for various KB - related tasks .","[('into', (10, 11)), ('enables', (15, 16)), ('easily compute', (18, 20)), ('between', (22, 23))]","[('placing', (6, 7)), ('texts and entities', (7, 10)), ('same vector space', (12, 15)), ('similarity', (21, 22)), ('texts and entities', (23, 26))]",[],[],[],[]
code,We release our code and trained models to the community at https://github.com/ studio-ousia /ntee to facilitate further academic research .,[],"[('https://github.com/ studio-ousia /ntee', (11, 14))]",[],[],[],[]
baselines,BOW is a conventional approach using a logistic regression ( LR ) classifier trained with binary BOW features to predict the correct answer .,"[('using', (5, 6)), ('trained with', (13, 15)), ('to predict', (18, 20))]","[('BOW', (0, 1)), ('conventional approach', (3, 5)), ('logistic regression ( LR ) classifier', (7, 13)), ('binary BOW features', (15, 18)), ('correct answer', (21, 23))]",[],[],[],[]
baselines,BOW - DT is based on the BOW baseline augmented with the feature set with dependency relation indicators .,"[('based on', (4, 6)), ('augmented with', (9, 11)), ('with', (14, 15))]","[('BOW - DT', (0, 3)), ('BOW baseline', (7, 9)), ('feature set', (12, 14)), ('dependency relation indicators', (15, 18))]",[],[],[],[]
baselines,QANTA is an approach based on a recursive neural network to derive the distributed representations of questions .,"[('based on', (4, 6)), ('to derive', (10, 12))]","[('QANTA', (0, 1)), ('recursive neural network', (7, 10)), ('distributed representations', (13, 15))]",[],[],[],[]
baselines,FTS - BRNN is based on the bidirectional recurrent neural network ( RNN ) with gated recurrent units ( GRU ) .,"[('based on', (4, 6)), ('with', (14, 15))]","[('FTS - BRNN', (0, 3)), ('bidirectional recurrent neural network ( RNN )', (7, 14)), ('gated recurrent units ( GRU )', (15, 21))]",[],[],[],[]
results,"In particular , despite the simplicity of the neural network architecture of our method compared to the state - of - the - art methods ( i.e. , QANTA and FTS - BRNN ) , our method clearly outperformed these methods .","[('of', (11, 12)), ('compared to', (14, 16))]","[('our method', (35, 37))]",[],[],[],[]
results,"Our observations indicated that our method mostly performed perfect in terms of predicting the types of target answers ( e.g. , locations , events , and people ) .","[('indicated', (2, 3)), ('mostly performed', (6, 8)), ('in terms of predicting', (9, 13))]","[('our method', (4, 6)), ('perfect', (8, 9))]",[],[],[],[]
research-problem,Improving the Coverage and the Generalization Ability of Neural Word Sense Disambiguation through Hypernymy and Hyponymy Relationships,[],"[('Neural Word Sense Disambiguation', (8, 12))]",[],[],[],[]
research-problem,"In Word Sense Disambiguation ( WSD ) , the predominant approach generally involves a supervised system trained on sense annotated corpora .",[],"[('Word Sense Disambiguation ( WSD )', (1, 7))]",[],[],[],[]
research-problem,"Our method leads to state of the art results on most WSD evaluation tasks , while improving the coverage of supervised systems , reducing the training time and the size of the models , without additional training data .","[('leads to', (2, 4)), ('on', (9, 10)), ('improving', (16, 17)), ('of', (19, 20)), ('reducing', (23, 24)), ('without', (34, 35))]","[('state of the art results', (4, 9)), ('most WSD evaluation tasks', (10, 14)), ('coverage', (18, 19)), ('supervised systems', (20, 22))]",[],[],[],[]
approach,We propose a method for reducing the vocabulary of senses of Word Net by selecting the minimal set of senses required for differentiating the meaning of every word .,"[('propose', (1, 2)), ('for', (4, 5)), ('reducing', (5, 6)), ('of', (10, 11)), ('by selecting', (13, 15)), ('required for differentiating', (20, 23))]","[('method', (3, 4)), ('vocabulary of senses', (7, 10)), ('Word Net', (11, 13)), ('minimal set of senses', (16, 20)), ('meaning', (24, 25)), ('every word', (26, 28))]",[],[],[],[]
code,The code for using our system or reproducing our results is available at the following URL : https://github.com/getalp/disambiguate,[],"[('https://github.com/getalp/disambiguate', (17, 18))]",[],[],[],[]
results,"In subsection 3.2 , we showed that our vocabulary reduction method improves the coverage of supervised systems overall WordNet vocabulary .","[('improves', (11, 12)), ('of', (14, 15))]","[('our vocabulary reduction method', (7, 11)), ('coverage', (13, 14)), ('supervised systems', (15, 17)), ('overall WordNet vocabulary', (17, 20))]",[],[],[],[]
results,"In , we can see that this coverage improvement holds true on the evaluation tasks , for both training sets .","[('see that', (4, 6)), ('on', (11, 12)), ('for', (16, 17))]","[('coverage improvement', (7, 9)), ('holds true', (9, 11)), ('evaluation tasks', (13, 15)), ('both training sets', (17, 20))]",[],[],[],[]
results,"Now if we look at the results in , the difference of scores obtained by our system using the sense vocabulary reduction or not is overall not significant ( regarding the "" ALL "" column ) .","[('obtained by', (13, 15)), ('using', (17, 18))]","[('difference of scores', (10, 13)), ('our system', (15, 17)), ('sense vocabulary reduction or not', (19, 24)), ('sense vocabulary reduction', (19, 22)), ('overall', (25, 26)), ('not significant', (26, 28))]",[],[],[],[]
results,"However we can notice a very large gap on the SemEval 2013 task , especially when the SemCor is used alone for training .","[('notice', (3, 4)), ('on', (8, 9))]","[('very large gap', (5, 8)), ('SemEval 2013 task', (10, 13)), ('SemCor', (17, 18))]",[],[],[],[]
results,"When we add the WordNet Gloss Tagged to the training data however , we obtain systematically state of the art results on all tasks except on SensEval 3 .","[('add', (2, 3)), ('to', (7, 8)), ('obtain', (14, 15)), ('on', (21, 22)), ('except on', (24, 26))]","[('WordNet Gloss Tagged', (4, 7)), ('training data', (9, 11)), ('systematically state of the art results', (15, 21)), ('all tasks', (22, 24)), ('SensEval', (26, 27))]",[],[],[],[]
results,"Once again , the sense reduction method does not consistently improves or decreases the score on every task , and in overall ( task "" ALL "" ) , the result is roughly the same as without sense reduction applied .","[('does not consistently improves or decreases', (7, 13)), ('on', (15, 16)), ('roughly', (32, 33))]","[('sense reduction method', (4, 7)), ('score', (14, 15)), ('every task', (16, 18)), ('result', (30, 31))]",[],[],[],[]
results,"As we can see , ensembling is a very efficient method in WSD as it improves systematically all our results .","[('is', (6, 7)), ('in', (11, 12)), ('improves', (15, 16))]","[('ensembling', (5, 6)), ('very efficient method', (8, 11)), ('WSD', (12, 13))]",[],[],[],[]
results,"Interestingly , with ensembles , the scores are significantly higher when applying the vocabulary reduction algorithm .","[('with', (2, 3)), ('are', (7, 8)), ('when applying', (10, 12))]","[('ensembles', (3, 4)), ('scores', (6, 7)), ('significantly higher', (8, 10)), ('vocabulary reduction algorithm', (13, 16))]",[],[],[],[]
research-problem,Incorporating Glosses into Neural Word Sense Disambiguation,[],"[('Neural Word Sense Disambiguation', (3, 7))]",[],[],[],[]
research-problem,Word Sense Disambiguation ( WSD ) aims to identify the correct meaning of polysemous words in the particular context .,[],"[('Word Sense Disambiguation ( WSD )', (0, 6))]",[],[],[],[]
research-problem,Lexical resources like WordNet which are proved to be of great help for WSD in the knowledge - based methods .,"[('like', (2, 3)), ('for', (12, 13))]","[('Lexical resources', (0, 2)), ('WordNet', (3, 4)), ('WSD', (13, 14))]",[],[],[],[]
model,"In this paper , we propose a novel model GAS : a gloss - augmented WSD neural network which is a variant of the memory network .","[('propose', (5, 6)), ('variant of', (21, 23))]","[('novel model GAS', (7, 10)), ('gloss - augmented WSD neural network', (12, 18)), ('memory network', (24, 26))]",[],[],[],[]
model,GAS jointly encodes the context and glosses of the target word and models the semantic relationship between the context and glosses in the memory module .,"[('jointly encodes', (1, 3)), ('of', (7, 8)), ('models', (12, 13)), ('between', (16, 17)), ('in', (21, 22))]","[('GAS', (0, 1)), ('context and glosses', (4, 7)), ('target word', (9, 11)), ('semantic relationship', (14, 16)), ('context and glosses', (18, 21)), ('memory module', (23, 25))]",[],[],[],[]
model,"In order to measure the inner relationship between glosses and context more accurately , we employ multiple passes operation within the memory as the re-reading process and adopt two memory updating mechanisms .","[('between', (7, 8)), ('employ', (15, 16)), ('within', (19, 20)), ('as', (22, 23)), ('adopt', (27, 28))]","[('inner relationship', (5, 7)), ('glosses and context', (8, 11)), ('multiple passes operation', (16, 19)), ('memory', (21, 22)), ('re-reading process', (24, 26)), ('two memory updating mechanisms', (28, 32))]",[],[],[],[]
hyperparameters,"We use pre-trained word embeddings with 300 dimensions 10 , and keep them fixed during the training process .","[('use', (1, 2)), ('with', (5, 6))]","[('pre-trained word embeddings', (2, 5)), ('300 dimensions', (6, 8)), ('fixed', (13, 14)), ('training process', (16, 18))]",[],[],[],[]
hyperparameters,"We employ 256 hidden units in both the gloss module and the context module , which means n = 256 .","[('employ', (1, 2)), ('in', (5, 6))]","[('256 hidden units', (2, 5)), ('context module', (12, 14))]",[],[],[],[]
hyperparameters,"Orthogonal initialization is used for weights in LSTM and random uniform initialization with range [ - 0.1 , 0.1 ] is used for others .","[('used for', (3, 5)), ('in', (6, 7)), ('with', (12, 13)), ('used for', (21, 23))]","[('Orthogonal initialization', (0, 2)), ('weights', (5, 6)), ('LSTM', (7, 8)), ('random uniform initialization', (9, 12)), ('range [ - 0.1 , 0.1 ]', (13, 20)), ('others', (23, 24))]",[],[],[],[]
hyperparameters,We assign gloss expansion depth K the value of 4 .,"[('assign', (1, 2))]","[('gloss expansion depth K', (2, 6)), ('value', (7, 8)), ('4', (9, 10))]",[],[],[],[]
hyperparameters,"We also experiment with the number of passes | T M | from 1 to 5 in our framework , finding | T M | = 3 performs best .","[('experiment with', (2, 4)), ('from', (12, 13)), ('in', (16, 17)), ('performs', (27, 28))]","[('number of passes | T M |', (5, 12)), ('1 to 5', (13, 16)), ('our framework', (17, 19)), ('finding', (20, 21)), ('best', (28, 29))]",[],[],[],[]
hyperparameters,We use Adam optimizer in the training process with 0.001 initial learning rate .,"[('use', (1, 2)), ('in', (4, 5)), ('with', (8, 9))]","[('Adam optimizer', (2, 4)), ('training process', (6, 8)), ('0.001 initial learning rate', (9, 13))]",[],[],[],[]
hyperparameters,"In order to avoid overfitting , we use dropout regularization and set drop rate to 0.5 .","[('to avoid', (2, 4)), ('use', (7, 8)), ('set', (11, 12)), ('to', (14, 15))]","[('overfitting', (4, 5)), ('dropout regularization', (8, 10)), ('drop rate', (12, 14)), ('0.5', (15, 16))]",[],[],[],[]
hyperparameters,Training runs for up to 100 epochs with early stopping if the validation loss does n't improve within the last 10 epochs .,"[('for', (2, 3)), ('with', (7, 8)), ('if', (10, 11)), ('within', (17, 18))]","[('Training', (0, 1)), ('up to 100 epochs', (3, 7)), ('early stopping', (8, 10)), ('validation loss', (12, 14)), (""does n't improve"", (14, 17)), ('last 10 epochs', (19, 22))]",[],[],[],[]
results,English all - words results,[],"[('English all - words results', (0, 5))]",[],[],[],[]
results,GAS and GAS ext achieves the state - of - theart performance on the concatenation of all test datasets .,"[('achieves', (4, 5)), ('on', (12, 13)), ('concatenation of', (14, 16))]","[('GAS and GAS ext', (0, 4)), ('state - of - theart performance', (6, 12)), ('all test datasets', (16, 19))]",[],[],[],[]
results,". ways performs best on all the test sets 11 , we can find that GAS ext with concatenation memory updating strategy achieves the best results 70.6 on the concatenation of the four test datasets .","[('performs', (2, 3)), ('on', (4, 5)), ('find that', (13, 15)), ('with', (17, 18)), ('achieves', (22, 23)), ('on', (27, 28)), ('concatenation of', (29, 31))]","[('best', (3, 4)), ('all the test sets', (5, 9)), ('GAS ext', (15, 17)), ('concatenation memory updating strategy', (18, 22)), ('best results', (24, 26)), ('70.6', (26, 27)), ('four test datasets', (32, 35))]",[],[],[],[]
results,"Compared with other three neural - based methods in the fourth block , we can find that our best model outperforms the previous best neural network models on every individual test set .","[('Compared with', (0, 2)), ('find that', (15, 17)), ('outperforms', (20, 21)), ('on', (27, 28))]","[('other three neural - based methods', (2, 8)), ('our best model', (17, 20)), ('previous best neural network models', (22, 27)), ('every individual test set', (28, 32))]",[],[],[],[]
results,"However , our best model can also beat IMS + emb on the SE3 , SE13 and SE15 test sets .","[('beat', (7, 8)), ('on', (11, 12))]","[('IMS + emb', (8, 11)), ('SE3 , SE13 and SE15 test sets', (13, 20))]",[],[],[],[]
results,Incorporating glosses into neural WSD can greatly improve the performance and extending the original gloss can further boost the results .,"[('Incorporating', (0, 1)), ('into', (2, 3)), ('greatly improve', (6, 8)), ('extending', (11, 12)), ('further boost', (16, 18))]","[('glosses', (1, 2)), ('neural WSD', (3, 5)), ('performance', (9, 10)), ('original gloss', (13, 15)), ('results', (19, 20))]",[],[],[],[]
results,"Compared with the Bi - LSTM baseline which only uses labeled data , our proposed model greatly improves the WSD task by 2.2 % F1 - score with the help of gloss knowledge .","[('Compared with', (0, 2)), ('greatly improves', (16, 18)), ('by', (21, 22)), ('with the help of', (27, 31))]","[('Bi - LSTM baseline', (3, 7)), ('labeled data', (10, 12)), ('our proposed model', (13, 16)), ('WSD task', (19, 21)), ('2.2 % F1 - score', (22, 27)), ('gloss knowledge', (31, 33))]",[],[],[],[]
results,"Furthermore , compared with the GAS which only uses original gloss as the background knowledge , GAS ext can further improve the performance with the help of the extended glosses through the semantic relations .","[('compared with', (2, 4)), ('as', (11, 12)), ('further improve', (19, 21)), ('with the help of', (23, 27)), ('through', (30, 31))]","[('GAS', (5, 6)), ('original gloss', (9, 11)), ('background knowledge', (13, 15)), ('GAS', (16, 17)), ('performance', (22, 23)), ('extended glosses', (28, 30)), ('semantic relations', (32, 34))]",[],[],[],[]
research-problem,Semi-supervised Word Sense Disambiguation with Neural Models,[],"[('Semi-supervised Word Sense Disambiguation', (0, 4))]",[],[],[],[]
research-problem,Determining the intended sense of words in text - word sense disambiguation ( WSD ) - is a longstanding problem in natural language processing .,[],"[('word sense disambiguation ( WSD )', (9, 15))]",[],[],[],[]
research-problem,"Recently , researchers have shown promising results using word vectors extracted from a neural network language model as features in WSD algorithms .","[('extracted from', (10, 12))]","[('word vectors', (8, 10)), ('WSD', (20, 21))]",[],[],[],[]
model,"In this paper , we describe two novel WSD algorithms .",[],"[('two novel WSD algorithms', (6, 10))]",[],[],[],[]
model,The first is based on a Long Short Term Memory ( LSTM ) ) .,"[('based on', (3, 5))]","[('Long Short Term Memory ( LSTM )', (6, 13))]",[],[],[],[]
experiments,"Since this model is able to take into account word order when classifying , it performs significantly better than an algorithm based on a continuous bag of words model ( Word2 vec ) , especially on verbs .","[('when', (11, 12)), ('performs', (15, 16)), ('than', (18, 19)), ('based on', (21, 23)), ('especially on', (34, 36))]","[('significantly better', (16, 18)), ('algorithm', (20, 21)), ('continuous bag of words model ( Word2 vec )', (24, 33)), ('verbs', (36, 37))]",[],[],[],[]
model,We then present a semi-supervised algorithm which uses label propagation to label unlabeled sentences based on their similarity to labeled ones .,"[('present', (2, 3)), ('uses', (7, 8)), ('to label', (10, 12)), ('based on', (14, 16)), ('to', (18, 19))]","[('semi-supervised algorithm', (4, 6)), ('label propagation', (8, 10)), ('unlabeled sentences', (12, 14)), ('similarity', (17, 18)), ('labeled ones', (19, 21))]",[],[],[],[]
experiments,Sem Eval Tasks,[],"[('Sem Eval Tasks', (0, 3))]",[],[],[],[]
results,Our proposed algorithms achieve the highest all - words F 1 scores except for Sem - Eval 2013 .,"[('achieve', (3, 4)), ('except for', (12, 14))]","[('Our proposed algorithms', (0, 3)), ('highest all - words F 1 scores', (5, 12)), ('Sem - Eval 2013', (14, 18))]",[],[],[],[]
results,"Unified WSD has the highest F 1 score on Nouns ( Sem - Eval - 7 Coarse ) , but our algorithms outperform Unified WSD on other part - of - speech tags .","[('on', (8, 9)), ('outperform', (22, 23)), ('on', (25, 26))]","[('Unified WSD', (0, 2)), ('highest F 1 score', (4, 8)), ('Nouns ( Sem - Eval - 7 Coarse )', (9, 18)), ('our algorithms', (20, 22)), ('Unified WSD', (23, 25)), ('other part - of - speech tags', (26, 33))]",[],[],[],[]
results,Word2 Vec vectors Vs. LSTM,[],"[('Word2 Vec vectors', (0, 3))]",[],[],[],[]
results,"It performs similar to IMS + Word2 Vec ( T: SemCor ) , a SVM - based classifier studied in .","[('performs', (1, 2)), ('similar to', (2, 4))]","[('IMS + Word2 Vec ( T: SemCor )', (4, 12)), ('SVM - based classifier', (14, 18))]",[],[],[],[]
results,shows that the LSTM classifier outperforms the Word2 Vec classifier across the board .,"[('shows', (0, 1)), ('outperforms', (5, 6))]","[('LSTM classifier', (3, 5)), ('Word2 Vec classifier', (7, 10))]",[],[],[],[]
results,Sem Cor Vs. OMSTI,[],"[('Sem Cor Vs. OMSTI', (0, 4))]",[],[],[],[]
results,"Contrary to the results observed in , the LSTM classifier trained with OMSTI performs worse than that trained with SemCor .","[('trained with', (10, 12)), ('performs', (13, 14)), ('than', (15, 16)), ('trained with', (17, 19))]","[('LSTM classifier', (8, 10)), ('OMSTI', (12, 13)), ('worse', (14, 15)), ('SemCor', (19, 20))]",[],[],[],[]
baselines,"While the SVM classifier studied in maybe able to learn a model which copes with this noise , our naive nearest neighbor classifiers do not have a learned model and deal less well with noisy labels .","[('do not have', (23, 26)), ('deal', (30, 31)), ('with', (33, 34))]","[('our naive nearest neighbor classifiers', (18, 23)), ('learned model', (27, 29)), ('noisy labels', (34, 36))]",[],[],[],[]
experiments,NOAD Eval,[],"[('NOAD Eval', (0, 2))]",[],[],[],[]
experiments,LSTM classifier,[],"[('LSTM classifier', (0, 2))]",[],[],[],[]
baselines,Most frequent sense :,[],"[('Most frequent sense', (0, 3))]",[],[],[],[]
results,"LSTM outperforms Word2Vec by more than 10 % overall words , where most of the gains are from verbs and adverbs .","[('outperforms', (1, 2)), ('by', (3, 4))]","[('LSTM', (0, 1)), ('Word2Vec', (2, 3)), ('more than 10 % overall words', (4, 10))]",[],[],[],[]
experiments,Change of training data,[],"[('Change of training data', (0, 4))]",[],[],[],[]
results,The SemCor ( or MASC ) trained classifier is on a par with the NOAD trained classifier on F1 score .,"[('on a par with', (9, 13)), ('on', (17, 18))]","[('SemCor ( or MASC ) trained classifier', (1, 8)), ('NOAD trained classifier', (14, 17)), ('F1 score', (18, 20))]",[],[],[],[]
ablation-analysis,Change of language model capacity,[],"[('Change of language model capacity', (0, 5))]",[],[],[],[]
hyperparameters,"To balance the accuracy and resource usage , we use the second best LSTM model ( h = 2048 and p = 512 ) by default .","[('To balance', (0, 2)), ('use', (9, 10))]","[('accuracy and resource usage', (3, 7)), ('second best LSTM model ( h = 2048 and p = 512 )', (11, 24))]",[],[],[],[]
ablation-analysis,Semi-supervised WSD,[],"[('Semi-supervised WSD', (0, 2))]",[],[],[],[]
results,"As can be observed from , LP did not yield clear benefits when using the Word2 Vec language model .","[('did not yield', (7, 10)), ('when using', (12, 14))]","[('LP', (6, 7)), ('clear benefits', (10, 12)), ('Word2 Vec language model', (15, 19))]",[],[],[],[]
results,"We did see significant improvements , 6.3 % increase on SemCor and 7.3 % increase on MASC , using LP with the LSTM language model .","[('see', (2, 3)), ('on', (9, 10)), ('on', (15, 16)), ('using', (18, 19)), ('with', (20, 21))]","[('significant improvements', (3, 5)), ('6.3 % increase', (6, 9)), ('SemCor', (10, 11)), ('7.3 % increase', (12, 15)), ('MASC', (16, 17)), ('LP', (19, 20)), ('LSTM language model', (22, 25))]",[],[],[],[]
ablation-analysis,Change of seed data :,[],"[('Change of seed data', (0, 4))]",[],[],[],[]
ablation-analysis,"As can be seen in , LP substantially improves classifier F1 when the training datasets are SemCor + NOAD or MASC + NOAD .","[('when', (11, 12)), ('are', (15, 16))]","[('LP', (6, 7)), ('substantially improves', (7, 9)), ('classifier F1', (9, 11)), ('training datasets', (13, 15)), ('SemCor + NOAD', (16, 19)), ('MASC + NOAD', (20, 23))]",[],[],[],[]
ablation-analysis,Change of graph density :,[],"[('Change of graph density', (0, 4))]",[],[],[],[]
hyperparameters,"By default , we construct the LP graph by connecting two nodes if their affinity is above 95 % percentile .","[('construct', (4, 5)), ('by connecting', (8, 10)), ('if', (12, 13)), ('is', (15, 16)), ('above', (16, 17))]","[('LP graph', (6, 8)), ('two nodes', (10, 12)), ('affinity', (14, 15)), ('95 % percentile', (17, 20))]",[],[],[],[]
ablation-analysis,"The F1 scores are relatively stable when the percentile ranges between 85 to 98 , but decrease when the percentile drops to 80 .","[('are', (3, 4)), ('when', (6, 7)), ('between', (10, 11)), ('when', (17, 18)), ('drops to', (20, 22))]","[('F1 scores', (1, 3)), ('relatively stable', (4, 6)), ('percentile', (8, 9)), ('ranges', (9, 10)), ('85 to 98', (11, 14)), ('decrease', (16, 17)), ('percentile', (19, 20)), ('80', (22, 23))]",[],[],[],[]
research-problem,"Language modeling tasks , in which words , or word - pieces , are predicted on the basis of a local context , have been very effective for learning word embeddings and context dependent representations of phrases .",[],"[('Language modeling', (0, 2))]",[],[],[],[]
approach,"We present RELIC ( Representations of Entities Learned in Context ) , a table of independent entity embeddings that have been trained to match fixed length vector representations of the textual context in which those entities have been seen .","[('present', (1, 2)), ('trained to match', (21, 24)), ('of', (28, 29))]","[('RELIC ( Representations of Entities Learned in Context )', (2, 11)), ('independent entity embeddings', (15, 18)), ('fixed length vector representations', (24, 28)), ('textual context', (30, 32))]",[],[],[],[]
approach,"We apply RELIC to entity typing ( mapping each entity to its properties in an external , curated , ontology ) ; entity linking ( identifying which entity is referred to by a textual context ) , and trivia question answering ( retrieving the entity that best answers a question ) .","[('apply', (1, 2)), ('to', (3, 4))]","[('RELIC', (2, 3)), ('entity typing', (4, 6)), ('entity linking', (22, 24)), ('trivia question answering', (38, 41))]",[],[],[],[]
experiments,"To train RELIC , we obtain data from the 2018 - 10 - 22 dump of English Wikipedia .","[('train', (1, 2)), ('obtain', (5, 6)), ('from', (7, 8)), ('of', (15, 16))]","[('RELIC', (2, 3)), ('data', (6, 7)), ('2018 - 10 - 22 dump', (9, 15)), ('English Wikipedia', (16, 18))]",[],[],[],[]
hyperparameters,We limit each context sentence to 128 tokens .,"[('limit', (1, 2)), ('to', (5, 6))]","[('each context sentence', (2, 5)), ('128 tokens', (6, 8))]",[],[],[],[]
hyperparameters,We set the entity embedding size to d = 300 .,"[('set', (1, 2)), ('to', (6, 7))]","[('entity embedding size', (3, 6)), ('d = 300', (7, 10))]",[],[],[],[]
approach,We train the model using Tensor Flow,"[('train', (1, 2)), ('using', (4, 5))]","[('model', (3, 4)), ('Tensor Flow', (5, 7))]",[],[],[],[]
experiments,ENTITY LINKING,[],"[('ENTITY LINKING', (0, 2))]",[],[],[],[]
results,"However , when we do adopt the standard CoNLL - Aida training set and alias table , RELIC matches the state of the art on this benchmark , despite using far fewer hand engineered resources use the large Wikidata knowledge base to create entity representations ) .","[('adopt', (5, 6)), ('matches', (18, 19))]","[('standard CoNLL - Aida training set', (7, 13)), ('RELIC', (17, 18)), ('state of the art', (20, 24))]",[],[],[],[]
results,"Finally , we believe that RELIC 's entity linking performance could be boosted even higher through the adoption of commonly used entity linking features .","[('could be', (10, 12)), ('through', (15, 16))]","[(""RELIC 's"", (5, 7)), ('entity linking performance', (7, 10)), ('boosted even higher', (12, 15)), ('adoption of', (17, 19)), ('commonly used entity linking features', (19, 24))]",[],[],[],[]
results,"RELIC outperforms prior work , even with only 5 % of the training data .","[('outperforms', (1, 2)), ('of', (10, 11))]","[('RELIC', (0, 1)), ('prior work', (2, 4)), ('training data', (12, 14))]",[],[],[],[]
results,ENTITY - LEVEL FINE TYPING,[],"[('ENTITY - LEVEL FINE TYPING', (0, 5))]",[],[],[],[]
results,show that RELIC significantly outperforms prior results on both datasets .,"[('show', (0, 1)), ('on', (7, 8))]","[('RELIC', (2, 3)), ('significantly outperforms', (3, 5)), ('prior results', (5, 7)), ('both datasets', (8, 10))]",[],[],[],[]
results,"For TypeNet , aggregate mention - level types and train with a structured loss based on the TypeNet hierarchy , but is still outperformed by our flat classifier of binary labels .","[('For', (0, 1)), ('train with', (9, 11)), ('based on', (14, 16)), ('outperformed by', (23, 25)), ('of', (28, 29))]","[('TypeNet', (1, 2)), ('aggregate mention - level types', (3, 8)), ('aggregate', (3, 4)), ('mention - level types', (4, 8)), ('structured loss', (12, 14)), ('TypeNet hierarchy', (17, 19)), ('our flat classifier', (25, 28)), ('binary labels', (29, 31))]",[],[],[],[]
results,EFFECT OF MASKING,[],"[('EFFECT OF MASKING', (0, 3))]",[],[],[],[]
results,"It is clear that masking mentions during training is beneficial for entity typing tasks , but detrimental for entity linking .","[('during', (6, 7)), ('beneficial for', (9, 11)), ('detrimental for', (16, 18))]","[('masking mentions', (4, 6)), ('training', (7, 8)), ('entity typing tasks', (11, 14)), ('entity linking', (18, 20))]",[],[],[],[]
results,"A higher mask rate leads to better performance , both in low and high - data situations .","[('leads to', (4, 6))]","[('higher mask rate', (1, 4)), ('better performance', (6, 8)), ('low and high - data situations', (11, 17))]",[],[],[],[]
results,"However , we would like to point out that that a mask rate of 10 % , RELIC nears optimum performance on most tasks .","[('of', (13, 14)), ('nears', (18, 19)), ('on', (21, 22))]","[('mask rate', (11, 13)), ('10 %', (14, 16)), ('RELIC', (17, 18)), ('optimum performance', (19, 21)), ('most tasks', (22, 24))]",[],[],[],[]
results,FEW - SHOT CATEGORY COMPLETION,[],"[('FEW - SHOT CATEGORY COMPLETION', (0, 5))]",[],[],[],[]
results,"Furthermore , due to the incompleteness of the the FIGMENT and TypeNet type systems , we also believe that RELIC 's performance is approaching the upper bound on both of these supervised tasks .","[('believe that', (17, 19)), ('approaching', (23, 24)), ('on', (27, 28))]","[(""RELIC 's performance"", (19, 22)), ('upper bound', (25, 27)), ('supervised tasks', (31, 33))]",[],[],[],[]
results,TRIVIA QUESTION ANSWERING,[],"[('TRIVIA QUESTION ANSWERING', (0, 3))]",[],[],[],[]
results,We observe that the retrieve - then - read approach taken by ORQA outperforms the direct answer retrieval approach taken by RELIC .,"[('observe', (1, 2)), ('taken by', (10, 12)), ('outperforms', (13, 14)), ('taken by', (19, 21))]","[('retrieve - then - read approach', (4, 10)), ('ORQA', (12, 13)), ('direct answer retrieval approach', (15, 19)), ('RELIC', (21, 22))]",[],[],[],[]
results,"However , ORQA runs a BERT based reading comprehension model over multiple evidence passages at inference time and we are encouraged to see that RELIC 's much faster nearest neighbor lookup captures 80 % of ORQA 's performance .","[('runs', (3, 4)), ('over', (10, 11)), ('at', (14, 15)), ('captures', (31, 32)), ('of', (34, 35))]","[('ORQA', (2, 3)), ('BERT based reading comprehension model', (5, 10)), ('multiple evidence passages', (11, 14)), ('80 %', (32, 34))]",[],[],[],[]
results,"It is also significant that RELIC outperforms 's reading comprehension baseline by 20 points , despite the fact that the baseline has access to a single document that is known to and TypeNet , even when only training on a small fraction of the task - specific training data .","[('by', (11, 12))]","[('significant', (3, 4)), ('RELIC', (5, 6)), ('outperforms', (6, 7)), ('reading comprehension baseline', (8, 11)), ('20 points', (12, 14))]",[],[],[],[]
research-problem,Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation,[],"[('Named Entity Disambiguation', (10, 13))]",[],[],[],[]
research-problem,"Named Entity Disambiguation ( NED ) refers to the task of resolving multiple named entity mentions in a document to their correct references in a knowledge base ( KB ) ( e.g. , Wikipedia ) .",[],"[('Named Entity Disambiguation ( NED )', (0, 6))]",[],[],[],[]
research-problem,"In this paper , we propose a novel embedding method specifically designed for NED .","[('propose', (5, 6)), ('specifically designed for', (10, 13))]","[('novel embedding method', (7, 10)), ('NED', (13, 14))]",[],[],[],[]
model,"In this paper , we propose a method to construct a novel embedding that jointly maps words and entities into the same continuous vector space .","[('propose', (5, 6)), ('to construct', (8, 10)), ('jointly maps', (14, 16)), ('into', (19, 20))]","[('method', (7, 8)), ('novel embedding', (11, 13)), ('words and entities', (16, 19)), ('same continuous vector space', (21, 25))]",[],[],[],[]
model,"In this model , similar words and entities are placed close to one another in a vector space .","[('placed', (9, 10)), ('close to', (10, 12)), ('in', (14, 15))]","[('similar words and entities', (4, 8)), ('one another', (12, 14)), ('vector space', (16, 18))]",[],[],[],[]
model,"Hence , we can measure the similarity between any pair of items ( i.e. , words , entities , and a word and an entity ) by simply computing their cosine similarity .","[('measure', (4, 5)), ('between', (7, 8)), ('by', (26, 27))]","[('similarity', (6, 7)), ('any pair of items', (8, 12)), ('cosine similarity', (30, 32))]",[],[],[],[]
model,"Our model is based on the skip - gram model , a recently proposed embedding model that learns to predict each context word given the target word .","[('based on', (3, 5)), ('given', (23, 24))]","[('skip - gram model', (6, 10)), ('each context word', (20, 23)), ('target word', (25, 27))]",[],[],[],[]
model,Our model consists of the following three models based on the skip - gram model :,"[('consists of', (2, 4)), ('based on', (8, 10))]","[('skip - gram model', (11, 15))]",[],[],[],[]
model,"1 ) the conventional skip - gram model that learns to predict neighboring words given the target word in text corpora , 2 ) the KB graph model that learns to estimate neighboring entities given the target entity in the link graph of the KB , and 3 ) the anchor context model that learns to predict neighboring words given the target entity using anchors and their context words in the KB .","[('learns to predict', (9, 12)), ('given', (14, 15)), ('in', (18, 19)), ('learns to estimate', (29, 32)), ('given', (34, 35)), ('in', (38, 39)), ('of', (42, 43)), ('learns to predict', (54, 57)), ('given', (59, 60)), ('using', (63, 64)), ('in', (69, 70))]","[('conventional skip - gram model', (3, 8)), ('neighboring words', (12, 14)), ('target word', (16, 18)), ('text corpora', (19, 21)), ('KB graph model', (25, 28)), ('neighboring entities', (32, 34)), ('target entity', (36, 38)), ('link graph', (40, 42)), ('KB', (44, 45)), ('anchor context model', (50, 53)), ('neighboring words', (57, 59)), ('target entity', (61, 63)), ('anchors and their context words', (64, 69)), ('KB', (71, 72))]",[],[],[],[]
model,"Based on our proposed embedding , we also develop a straightforward NED method that computes two contexts using the proposed embedding : textual context similarity , and coherence .","[('develop', (8, 9)), ('computes', (14, 15)), ('using', (17, 18))]","[('straightforward NED method', (10, 13)), ('two contexts', (15, 17)), ('proposed embedding', (19, 21)), ('textual context similarity', (22, 25)), ('coherence', (27, 28))]",[],[],[],[]
model,"Our NED method combines these contexts with several standard features ( e.g. , prior probability ) using supervised machine learning .","[('combines', (3, 4)), ('with', (6, 7)), ('using', (16, 17))]","[('NED method', (1, 3)), ('contexts', (5, 6)), ('several standard features', (7, 10)), ('supervised machine learning', (17, 20))]",[],[],[],[]
results,Our method successfully achieved enhanced performance on both the CoNLL and the TAC 2010 datasets .,"[('successfully achieved', (2, 4)), ('on', (6, 7))]","[('Our method', (0, 2)), ('enhanced performance', (4, 6)), ('CoNLL and the TAC 2010 datasets', (9, 15))]",[],[],[],[]
results,"Moreover , we found that the choice of candidate generation method considerably affected performance on the CoNLL dataset .","[('choice of', (6, 8)), ('on', (14, 15))]","[('candidate generation method', (8, 11)), ('considerably affected', (11, 13)), ('performance', (13, 14)), ('CoNLL dataset', (16, 18))]",[],[],[],[]
results,Our method outperformed all the state - of - the - art methods on both datasets .,"[('outperformed', (2, 3)), ('on', (13, 14))]","[('Our method', (0, 2)), ('all the state - of - the - art methods', (3, 13)), ('both datasets', (14, 16))]",[],[],[],[]
research-problem,"3D Morphable Models ( 3 DMMs ) are powerful statistical models of 3D facial shape and texture , and among the stateof - the - art methods for reconstructing facial shape from single images .",[],"[('3D Morphable Models ( 3 DMMs )', (0, 7))]",[],[],[],[]
research-problem,3 D facial shape estimation from single images has attracted the attention of many researchers the past twenty years .,[],"[('3 D facial shape estimation from single images', (0, 8))]",[],[],[],[]
model,"We propose a methodology for learning a statistical texture model from "" in - the -wild "" facial images , which is in full correspondence with a statistical shape prior that exhibits both identity and expression variations .","[('propose', (1, 2)), ('for learning', (4, 6)), ('from', (10, 11))]","[('methodology', (3, 4)), ('statistical texture model', (7, 10)), ('"" in - the -wild "" facial images', (11, 19)), ('statistical shape prior', (27, 30)), ('identity and expression variations', (33, 37))]",[],[],[],[]
model,"Motivated by the success of feature - based ( e.g. , HOG , SIFT ) Active Appearance Models ( AAMs ) we further show how to learn featurebased texture models for 3 DMMs .","[('for', (30, 31))]","[('featurebased texture models', (27, 30)), ('3 DMMs', (31, 33))]",[],[],[],[]
model,"We show that the advantage of using the "" in - the -wild "" feature - based texture model is that the fitting strategy gets simplified since there is not need to optimize with respect to the illumination parameters .","[('show', (1, 2)), ('of using', (5, 7)), ('is', (19, 20)), ('gets', (24, 25))]","[('advantage', (4, 5)), ('"" in - the -wild "" feature - based texture model', (8, 19)), ('fitting strategy', (22, 24)), ('simplified', (25, 26))]",[],[],[],[]
experiments,3D Shape Recovery,[],"[('3D Shape Recovery', (0, 3))]",[],[],[],[]
results,"The Classic model struggles to fit to the "" in - the -wild "" conditions present in the test set , and performs the worst .","[('to', (6, 7)), ('present in', (15, 17)), ('performs', (22, 23))]","[('Classic model', (1, 3)), ('struggles', (3, 4)), ('"" in - the -wild "" conditions', (8, 15)), ('test set', (18, 20)), ('worst', (24, 25))]",[],[],[],[]
results,"The texture - free Linear model does better , but the ITW model is most able to recover the facial shapes due to its ideal feature basis for the "" in - the -wild "" conditions .","[('does', (6, 7)), ('most able to recover', (14, 18)), ('due to', (21, 23)), ('for', (27, 28))]","[('texture - free Linear model', (1, 6)), ('better', (7, 8)), ('ITW model', (11, 13)), ('facial shapes', (19, 21)), ('ideal feature basis', (24, 27)), ('"" in - the -wild "" conditions', (29, 36))]",[],[],[],[]
results,"We note that in a wide variety of expression , identity , lighting and occlusion conditions our model is able to robustly reconstruct a realistic 3 D facial shape that stands up to scrutiny .","[('note', (1, 2)), ('in', (3, 4)), ('able to', (19, 21)), ('robustly reconstruct', (21, 23))]","[('wide variety of expression , identity , lighting and occlusion conditions', (5, 16)), ('realistic 3 D facial shape', (24, 29))]",[],[],[],[]
results,Quantitative Normal Recovery,[],"[('Quantitative Normal Recovery', (0, 3))]",[],[],[],[]
experiments,ITW slightly outperforms IMM even though both IMM and PS - NL use all four available images of each subject .,[],"[('ITW', (0, 1)), ('slightly outperforms', (1, 3)), ('IMM', (3, 4))]",[],[],[],[]
research-problem,Large Pose 3D Face Reconstruction from a Single Image via Direct Volumetric CNN Regression,[],"[('Large Pose 3D Face Reconstruction', (0, 5))]",[],[],[],[]
research-problem,Abstract 3 D face reconstruction is a fundamental Computer Vision problem of extraordinary difficulty .,[],"[('3 D face reconstruction', (1, 5))]",[],[],[],[]
model,"We describe a very simple approach which bypasses many of the difficulties encountered in 3D face reconstruction by using a novel volumetric representation of the 3D facial geometry , and an appropriate CNN architecture that is trained to regress directly from a 2 D facial image to the corresponding 3D volume .","[('bypasses', (7, 8)), ('by using', (17, 19)), ('of', (23, 24)), ('trained to', (36, 38)), ('directly from', (39, 41)), ('to', (46, 47))]","[('3D face reconstruction', (14, 17)), ('novel volumetric representation', (20, 23)), ('appropriate CNN architecture', (31, 34)), ('regress', (38, 39)), ('2 D facial image', (42, 46)), ('corresponding 3D volume', (48, 51))]",[],[],[],[]
hyperparameters,"Each of our architectures was trained end - to - end using RMSProp with an initial learning rate of 10 ? 4 , which was lowered after 40 epochs to 10 ?5 .","[('trained', (5, 6)), ('using', (11, 12)), ('with', (13, 14)), ('of', (18, 19)), ('after', (26, 27)), ('to', (29, 30))]","[('end - to - end', (6, 11)), ('RMSProp', (12, 13)), ('initial learning rate', (15, 18)), ('10 ? 4', (19, 22)), ('lowered', (25, 26)), ('40 epochs', (27, 29)), ('10 ?5', (30, 32))]",[],[],[],[]
hyperparameters,"During training , random augmentation was applied to each input sample ( face image ) and its corresponding target ( 3D volume ) : we applied in - plane rotation r ? [ ?45 , ... , 45 ] , translation t z , t y ? [ ? 15 , ... , 15 ] and scale s ? [ 0.85 , ... , 1.15 ] jitter .","[('During', (0, 1)), ('applied to', (6, 8)), ('applied', (25, 26))]","[('training', (1, 2)), ('random augmentation', (3, 5)), ('each input sample ( face image )', (8, 15)), ('corresponding target ( 3D volume )', (17, 23)), ('scale s', (56, 58))]",[],[],[],[]
hyperparameters,"In 20 % of cases , the input and target were flipped horizontally .","[('In', (0, 1)), ('flipped', (11, 12))]","[('input and target', (7, 10)), ('horizontally', (12, 13))]",[],[],[],[]
hyperparameters,"Finally , the input samples were adjusted with some colour scaling on each RGB channel .","[('adjusted with', (6, 8)), ('on', (11, 12))]","[('input samples', (3, 5)), ('some colour scaling', (8, 11)), ('each RGB channel', (12, 15))]",[],[],[],[]
hyperparameters,"In the case of the VRN - Guided , the landmark detection module was trained to regress Gaussians with standard deviation of approximately 3 pixels (? = 1 ) .","[('trained to regress', (14, 17)), ('with', (18, 19)), ('of', (21, 22))]","[('VRN - Guided', (5, 8)), ('landmark detection module', (10, 13)), ('Gaussians', (17, 18)), ('standard deviation', (19, 21))]",[],[],[],[]
results,Volumetric Regression Networks largely outperform,[],"[('Volumetric Regression Networks', (0, 3)), ('largely outperform', (3, 5))]",[],[],[],[]
results,"3DDFA and EOS on all datasets , verifying that directly regressing the 3D facial structure is a much easier problem for CNN learning .","[('on', (3, 4))]","[('3DDFA and EOS', (0, 3)), ('all datasets', (4, 6))]",[],[],[],[]
results,"2 . All VRNs perform well across the whole spectrum of facial poses , expressions and occlusions .","[('perform', (4, 5)), ('across', (6, 7))]","[('All VRNs', (2, 4)), ('well', (5, 6)), ('whole spectrum of facial poses , expressions and occlusions', (8, 17))]",[],[],[],[]
results,"3 . The best performing VRN is the one guided by detected landmarks , however at the cost of higher computational complexity :","[('is', (6, 7)), ('guided by', (9, 11))]","[('best performing VRN', (3, 6)), ('detected landmarks', (11, 13))]",[],[],[],[]
results,"4 . VRN - Multitask does not always perform particularly better than the plain VRN ( in fact on BU - 4 DFE it performs worse ) , not justifying the increase of network complexity .","[('than', (11, 12))]","[('VRN - Multitask', (2, 5)), ('particularly better', (9, 11)), ('plain VRN', (13, 15))]",[],[],[],[]
ablation-analysis,Effect of pose .,[],"[('Effect of pose', (0, 3))]",[],[],[],[]
ablation-analysis,"As shown in , the performance of our method decreases as the pose increases .","[('of', (6, 7)), ('as', (10, 11))]","[('performance', (5, 6)), ('our method', (7, 9)), ('decreases', (9, 10)), ('pose', (12, 13)), ('increases', (13, 14))]",[],[],[],[]
ablation-analysis,Effect of expression .,[],"[('Effect of expression', (0, 3))]",[],[],[],[]
ablation-analysis,"This kind of extreme acted facial expressions generally do not occur in the training set , yet as shown in , the performance variation across different expressions is quite minor .","[('across', (24, 25)), ('is', (27, 28))]","[('training set', (13, 15)), ('performance variation', (22, 24)), ('quite minor', (28, 30))]",[],[],[],[]
ablation-analysis,Effect of Gaussian size for guidance .,"[('for', (4, 5))]","[('Effect of Gaussian size', (0, 4)), ('guidance', (5, 6))]",[],[],[],[]
ablation-analysis,"The performance of the 3D reconstruction dropped by a negligible amount , suggesting that as long as the Gaussians are of a sensible size , guidance will always help .","[('of', (2, 3)), ('dropped by', (6, 8))]","[('performance', (1, 2)), ('3D reconstruction', (4, 6)), ('negligible amount', (9, 11))]",[],[],[],[]
research-problem,Wing Loss for Robust Facial Landmark Localisation with Convolutional Neural Networks,[],"[('Robust Facial Landmark Localisation', (3, 7))]",[],[],[],[]
research-problem,"Facial landmark localisation , or face alignment , aims at finding the coordinates of a set of pre-defined key points for 2 D face images .",[],"[('Facial landmark localisation', (0, 3)), ('face alignment', (5, 7))]",[],[],[],[]
model,"a novel loss function , namely the Wing loss , which is designed to improve the deep neural network training capability for small and medium range errors .","[('namely', (5, 6)), ('designed to improve', (12, 15)), ('for', (21, 22))]","[('novel loss function', (1, 4)), ('Wing loss', (7, 9)), ('deep neural network training capability', (16, 21)), ('small and medium range errors', (22, 27))]",[],[],[],[]
model,"a data augmentation strategy , i.e. pose - based data balancing , that compensates the low frequency of occurrence of samples with large out - of - plane head rotations in the training set .","[('i.e.', (5, 6)), ('compensates', (13, 14)), ('of', (19, 20)), ('with', (21, 22)), ('in', (30, 31))]","[('data augmentation strategy', (1, 4)), ('pose - based data balancing', (6, 11)), ('low frequency of occurrence', (15, 19)), ('samples', (20, 21)), ('large out - of - plane head rotations', (22, 30)), ('training set', (32, 34))]",[],[],[],[]
research-problem,a two - stage facial landmark localisation framework for performance boosting .,"[('for', (8, 9))]","[('two - stage facial landmark localisation framework', (1, 8)), ('performance boosting', (9, 11))]",[],[],[],[]
experimental-setup,"In our experiments , we used Matlab 2017a and the Mat - ConvNet toolbox 2 .","[('used', (5, 6))]","[('Matlab 2017a', (6, 8)), ('Mat - ConvNet toolbox', (10, 14))]",[],[],[],[]
experimental-setup,"The training and testing of our networks were conducted on a server running Ubuntu 16.04 with 2 Intel Xeon E5-2667 v4 CPU , 256 GB RAM and 4 NVIDIA GeForce GTX Titan X ( Pascal ) cards .","[('of', (4, 5)), ('conducted on', (8, 10)), ('running', (12, 13)), ('with', (15, 16))]","[('training and testing', (1, 4)), ('our networks', (5, 7)), ('server', (11, 12)), ('Ubuntu 16.04', (13, 15)), ('2 Intel Xeon E5-2667 v4 CPU', (16, 22)), ('256 GB RAM', (23, 26)), ('4 NVIDIA GeForce GTX Titan X ( Pascal ) cards', (27, 37))]",[],[],[],[]
experimental-setup,Note that we only use one GPU card for measuring the run time .,"[('use', (4, 5)), ('for measuring', (8, 10))]","[('one GPU card', (5, 8)), ('run time', (11, 13))]",[],[],[],[]
experimental-setup,"We set the weight decay to 5 10 ? 4 , momentum to 0.9 and batch size to 8 for network training .","[('set', (1, 2)), ('to', (5, 6)), ('to', (12, 13)), ('to', (17, 18)), ('for', (19, 20))]","[('weight decay', (3, 5)), ('5 10 ? 4', (6, 10)), ('momentum', (11, 12)), ('0.9', (13, 14)), ('batch size', (15, 17)), ('8', (18, 19)), ('network training', (20, 22))]",[],[],[],[]
experimental-setup,Each model was trained for 120 k iterations .,"[('trained for', (3, 5))]","[('120 k iterations', (5, 8))]",[],[],[],[]
experimental-setup,"The standard ReLu function was used for nonlinear activation , and Max pooling with the stride of 2 was used to downsize feature maps .","[('used for', (5, 7)), ('with', (13, 14)), ('stride of', (15, 17))]","[('standard ReLu function', (1, 4)), ('nonlinear activation', (7, 9)), ('Max pooling', (11, 13)), ('2', (17, 18)), ('downsize', (21, 22)), ('feature maps', (22, 24))]",[],[],[],[]
experimental-setup,"For the convolutional layer , we used 3 3 kernels with the stride of 1 .","[('For', (0, 1)), ('used', (6, 7)), ('with', (10, 11)), ('of', (13, 14))]","[('convolutional layer', (2, 4)), ('3 3 kernels', (7, 10)), ('stride', (12, 13)), ('1', (14, 15))]",[],[],[],[]
experimental-setup,"For the proposed PDB strategy , the number of bins K was set to 17 for AFLW and 9 for 300W .","[('For', (0, 1)), ('set to', (12, 14)), ('for', (15, 16)), ('for', (19, 20))]","[('proposed PDB strategy', (2, 5)), ('number of bins K', (7, 11)), ('17', (14, 15)), ('AFLW', (16, 17)), ('9', (18, 19)), ('300W', (20, 21))]",[],[],[],[]
experimental-setup,"For CNN - 6 , the input image size is 64 64 3 . We reduced the learning rate from 3 10 ? 6 to 3 10 ?8 for the L2 loss , and from 3 10 ?5 to 3 10 ? 7 for the other loss functions .","[('For', (0, 1)), ('is', (9, 10)), ('reduced', (15, 16)), ('from', (19, 20)), ('to', (24, 25)), ('for', (28, 29)), ('from', (34, 35)), ('for', (43, 44))]","[('CNN - 6', (1, 4)), ('input image size', (6, 9)), ('64 64 3', (10, 13)), ('learning rate', (17, 19)), ('3 10 ? 6', (20, 24)), ('3 10 ?8', (25, 28)), ('L2 loss', (30, 32)), ('3 10 ?5 to 3 10 ? 7', (35, 43)), ('other loss functions', (45, 48))]",[],[],[],[]
experimental-setup,"The parameters of the Wing loss were set tow = 10 and = 2 . For CNN - 7 , the input image size is 128 128 3 . We reduced the learning rate from 1 10 ? 6 to 1 10 ?8 for the L2 loss , and from 1 10 ? 5 to 1 10 ? 7 for the other loss functions .","[('of', (2, 3)), ('set tow', (7, 9)), ('For', (15, 16)), ('is', (24, 25)), ('reduced', (30, 31)), ('from', (34, 35)), ('for', (43, 44)), ('from', (49, 50)), ('for', (59, 60))]","[('parameters', (1, 2)), ('Wing loss', (4, 6)), ('CNN - 7', (16, 19)), ('input image size', (21, 24)), ('128 128 3', (25, 28)), ('learning rate', (32, 34)), ('1 10 ? 6 to 1 10 ?8', (35, 43)), ('L2 loss', (45, 47)), ('1 10 ? 5 to 1 10 ? 7', (50, 59)), ('other loss functions', (61, 64))]",[],[],[],[]
experimental-setup,"To perform data augmentation , we randomly rotated each training image between [ ? 30 , 30 ] degrees for CNN - 6 and between [ ? 10 , 10 ] degrees for CNN - 7 .","[('To perform', (0, 2)), ('randomly rotated', (6, 8)), ('between', (11, 12)), ('for', (19, 20)), ('between', (24, 25)), ('for', (32, 33))]","[('data augmentation', (2, 4)), ('each training image', (8, 11)), ('[ ? 30 , 30 ] degrees', (12, 19)), ('CNN - 6', (20, 23)), ('[ ? 10 , 10 ] degrees', (25, 32)), ('CNN - 7', (33, 36))]",[],[],[],[]
experimental-setup,"For bounding box perturbation , we applied random translations to the upper-left and bottom - right corners of the face bounding box within 5 % of the bounding .","[('For', (0, 1)), ('applied', (6, 7)), ('to', (9, 10)), ('of', (17, 18)), ('within', (22, 23)), ('of', (25, 26))]","[('bounding box perturbation', (1, 4)), ('random translations', (7, 9)), ('upper-left and bottom - right corners', (11, 17)), ('face bounding box', (19, 22)), ('5 %', (23, 25)), ('bounding', (27, 28))]",[],[],[],[]
experimental-setup,"We compare our method with a set of state - of - the - art approaches , including SDM , ERT , RCPR , CFSS , LBF , GRF , CCL , DAC - CSR and TR - DRN. box size .","[('including', (17, 18))]","[('SDM', (18, 19)), ('ERT', (20, 21)), ('RCPR', (22, 23)), ('CFSS', (24, 25)), ('LBF', (26, 27)), ('GRF', (28, 29)), ('CCL', (30, 31)), ('DAC - CSR', (32, 35)), ('TR - DRN.', (36, 39))]",[],[],[],[]
experimental-setup,"Last , we randomly injected Gaussian blur (? = 1 ) to each training image with the probability of 50 % .","[('randomly injected', (3, 5)), ('to', (11, 12)), ('with', (15, 16)), ('of', (18, 19))]","[('Gaussian blur (? = 1 )', (5, 11)), ('each training image', (12, 15)), ('probability', (17, 18)), ('50 %', (19, 21))]",[],[],[],[]
results,Comparison with state of the art 7.2.1 AFLW,[],"[('AFLW', (7, 8))]",[],[],[],[]
results,"As shown in , our CNN - 6/7 network outperforms all the other approaches even when trained with the commonly used L2 loss function ( magenta solid line ) .","[('outperforms', (9, 10)), ('trained with', (16, 18))]","[('CNN - 6/7 network', (5, 9)), ('all the other approaches', (10, 14)), ('commonly used L2 loss function', (19, 24))]",[],[],[],[]
results,"Second , by simply switching the loss function from L2 to L1 or smooth L1 , the performance of our method has been improved significantly ( red solid and black dashed lines ) .","[('by', (2, 3)), ('from', (8, 9)), ('to', (10, 11)), ('of', (18, 19))]","[('loss function', (6, 8)), ('L2', (9, 10)), ('L1', (11, 12)), ('smooth L1', (13, 15)), ('performance', (17, 18)), ('our method', (19, 21)), ('improved significantly', (23, 25))]",[],[],[],[]
results,"Last , the use of our newly proposed Wing loss function further improves the accuracy ( black solid line ) .","[('use of', (3, 5)), ('further improves', (11, 13))]","[('newly proposed Wing loss function', (6, 11)), ('accuracy', (14, 15))]",[],[],[],[]
experimental-setup,300 W,[],"[('300 W', (0, 2))]",[],[],[],[]
results,"As shown in , our two - stage landmark localisation framework with the PDB strategy and the newly proposed Wing loss function outperforms all the other stateof - the - art algorithms on the 300 W dataset inaccuracy .","[('with', (11, 12)), ('outperforms', (22, 23)), ('on', (32, 33))]","[('two - stage landmark localisation framework', (5, 11)), ('PDB strategy', (13, 15)), ('newly proposed Wing loss function', (17, 22)), ('all the other stateof - the - art algorithms', (23, 32)), ('300 W dataset inaccuracy', (34, 38))]",[],[],[],[]
results,The error has been reduced by almost 20 % as compared to the current best result reported by the RAR algorithm .,"[('reduced by', (4, 6)), ('compared to', (10, 12)), ('reported by', (16, 18))]","[('error', (1, 2)), ('almost 20 %', (6, 9)), ('current best result', (13, 16)), ('RAR algorithm', (19, 21))]",[],[],[],[]
research-problem,Unsupervised Training for 3D Morphable Model Regression,[],"[('3D Morphable Model Regression', (3, 7))]",[],[],[],[]
model,This paper presents a method for training a regression network that removes both the need for supervised training data and the reliance on inverse rendering to reproduce image pixels .,"[('removes', (11, 12)), ('need for', (14, 16)), ('reliance on', (21, 23)), ('to reproduce', (25, 27))]","[('training', (6, 7)), ('regression network', (8, 10)), ('supervised training data', (16, 19)), ('inverse rendering', (23, 25)), ('image pixels', (27, 29))]",[],[],[],[]
model,"Instead , the network learns to minimize a loss based on the facial identity features produced by a face recognition network such as VGG - Face or Google 's FaceNet .","[('learns to', (4, 6)), ('minimize', (6, 7)), ('based on', (9, 11)), ('produced by', (15, 17)), ('such as', (21, 23))]","[('loss', (8, 9)), ('facial identity features', (12, 15)), ('face recognition network', (18, 21)), ('VGG - Face', (23, 26)), (""Google 's FaceNet"", (27, 30))]",[],[],[],[]
model,We exploit this invariance to apply a loss that matches the identity features between the input photograph and a synthetic rendering of the predicted face .,"[('exploit', (1, 2)), ('to apply', (4, 6)), ('matches', (9, 10)), ('between', (13, 14)), ('of', (21, 22))]","[('invariance', (3, 4)), ('loss', (7, 8)), ('identity features', (11, 13)), ('input photograph', (15, 17)), ('synthetic rendering', (19, 21)), ('predicted face', (23, 25))]",[],[],[],[]
model,"We alleviate the fooling problem by applying three novel losses : a batch distribution loss to match the statistics of each training batch to the statistics of the morphable model , a loopback loss to ensure the regression network can correctly reinterpret its own output , and a multi-view identity loss that combines features from multiple , independent views of the predicted shape .","[('alleviate', (1, 2)), ('by applying', (5, 7)), ('to match', (15, 17)), ('of', (19, 20)), ('to', (23, 24)), ('of', (26, 27)), ('to ensure', (34, 36)), ('correctly reinterpret', (40, 42)), ('from', (54, 55)), ('of', (59, 60))]","[('fooling problem', (3, 5)), ('three novel losses', (7, 10)), ('batch distribution loss', (12, 15)), ('statistics', (18, 19)), ('each training batch', (20, 23)), ('statistics', (25, 26)), ('morphable model', (28, 30)), ('loopback loss', (32, 34)), ('regression network', (37, 39)), ('own output', (43, 45)), ('multi-view identity loss', (48, 51)), ('features', (53, 54)), ('multiple , independent views', (55, 59)), ('predicted shape', (61, 63))]",[],[],[],[]
model,"Using this scheme , we train a 3D shape and texture regression network using only a face recognition network , a morphable face model , and a dataset of unlabeled face images .","[('train', (5, 6)), ('using', (13, 14))]","[('3D shape and texture regression network', (7, 13)), ('face recognition network', (16, 19)), ('morphable face model', (21, 24)), ('unlabeled face images', (29, 32))]",[],[],[],[]
experiments,"We show that despite learning from unlabeled photographs , the 3D face results improve on the accuracy of previous work and are often recognizable as the original subjects .","[('show', (1, 2)), ('learning from', (4, 6)), ('improve on', (13, 15)), ('of', (17, 18))]","[('unlabeled photographs', (6, 8)), ('3D face results', (10, 13)), ('accuracy', (16, 17)), ('previous work', (18, 20))]",[],[],[],[]
results,Neutral Pose Reconstruction on MICC,[],"[('Neutral Pose Reconstruction', (0, 3))]",[],[],[],[]
results,"Our results indicate that we have improved absolute error to the ground truth by 20 - 25 % , and our results are more consistent from person to person , with less than half the standard deviation when compared to .","[('indicate', (2, 3)), ('improved', (6, 7)), ('to', (9, 10)), ('by', (13, 14)), ('from', (25, 26)), ('with', (30, 31))]","[('absolute error', (7, 9)), ('ground truth', (11, 13)), ('20 - 25 %', (14, 18)), ('more consistent', (23, 25))]",[],[],[],[]
results,"We are also more stable across changing environments , with similar results for all three test sets .","[('across', (5, 6))]","[('more stable', (3, 5)), ('changing environments', (6, 8))]",[],[],[],[]
results,Face Recognition Results,[],"[('Face Recognition Results', (0, 3))]",[],[],[],[]
results,Our method achieves an average similarity between rendering and photo of 0.403 on MoFA test ( the dataset for which results for all methods are available ) .,"[('achieves', (2, 3)), ('between', (6, 7)), ('of', (10, 11)), ('on', (12, 13))]","[('Our method', (0, 2)), ('average similarity', (4, 6)), ('rendering and photo', (7, 10)), ('0.403', (11, 12)), ('MoFA test', (13, 15))]",[],[],[],[]
results,"Our method 's results are closer to the same - person distribution than the differentperson distribution in all cases , while the other methods results ' are closer to the different - person distribution .","[('closer to', (5, 7)), ('than', (12, 13)), ('in', (16, 17)), ('closer to', (27, 29))]","[(""Our method 's results"", (0, 4)), ('same - person distribution', (8, 12)), ('differentperson distribution', (14, 16)), ('all cases', (17, 19)), ('different - person distribution', (30, 34))]",[],[],[],[]
results,"Notably , the distance between the GT distribution and the same - person LFW distribution is very low , with almost the same mean ( 0.51 vs 0.50 ) , indicating the VGG - Face network has little trouble bridging the domain gap between photograph and rendering , and that our method does not yet reach the ground - truth baseline .","[('between', (4, 5)), ('is', (15, 16)), ('with', (19, 20))]","[('distance', (3, 4)), ('GT distribution and the same - person LFW distribution', (6, 15)), ('very low', (16, 18)), ('almost the same mean ( 0.51 vs 0.50 )', (20, 29))]",[],[],[],[]
research-problem,Dense Face Alignment,[],"[('Dense Face Alignment', (0, 3))]",[],[],[],[]
research-problem,Face alignment is a classic problem in the computer vision field .,[],"[('Face alignment', (0, 2))]",[],[],[],[]
model,"With the objective of addressing both challenges , we learn a CNN to fit a 3 D face model to the face image .","[('learn', (9, 10)), ('to fit', (12, 14)), ('to', (19, 20))]","[('CNN', (11, 12)), ('3 D face model', (15, 19)), ('face image', (21, 23))]",[],[],[],[]
model,"To tackle first challenge of limited landmark labeling , we propose to employ additional constraints .",[],"[('limited landmark labeling', (5, 8)), ('additional constraints', (13, 15))]",[],[],[],[]
model,"We include contour constraint where the contour of the predicted shape should match the detected 2 D face boundary , and SIFT constraint where the SIFT key points detected on two face images of the same individual should map to the same vertexes on the 3D face model .","[('include', (1, 2)), ('where', (4, 5)), ('of', (7, 8)), ('should match', (11, 13)), ('where', (23, 24)), ('detected on', (28, 30)), ('on', (43, 44))]","[('contour constraint', (2, 4)), ('contour', (6, 7)), ('predicted shape', (9, 11)), ('detected 2 D face boundary', (14, 19)), ('SIFT constraint', (21, 23)), ('SIFT key points', (25, 28)), ('same vertexes', (41, 43)), ('3D face model', (45, 48))]",[],[],[],[]
model,"Both constraints are integrated into the CNN training as additional loss function terms , where the end - to - end training results in an enhanced CNN for 3 D face model fitting .","[('integrated into', (3, 5)), ('as', (8, 9)), ('results in', (22, 24)), ('for', (27, 28))]","[('CNN training', (6, 8)), ('additional loss function terms', (9, 13)), ('end - to - end training', (16, 22)), ('enhanced CNN', (25, 27)), ('3 D face model fitting', (28, 33))]",[],[],[],[]
model,"For the second challenge of leveraging multiple datasets , the 3D face model fitting approach has the inherent advantage in handling multiple training databases .","[('leveraging', (5, 6)), ('in handling', (19, 21))]","[('3D face model fitting approach', (10, 15)), ('inherent advantage', (17, 19)), ('multiple training databases', (21, 24))]",[],[],[],[]
experiments,Dense Face Alignment,[],"[('Dense Face Alignment', (0, 3))]",[],[],[],[]
hyperparameters,"To train the network , we use 20 , 10 , and 10 epochs for stage 1 to 3 .","[('use', (6, 7)), ('for', (14, 15))]","[('network', (3, 4)), ('20 , 10 , and 10 epochs', (7, 14)), ('stage 1 to 3', (15, 19))]",[],[],[],[]
hyperparameters,"We set the initial global learning rate as 1 e ? 3 , and reduce the learning rate by a factor of 10 when the training error approaches a plateau .","[('set', (1, 2)), ('as', (7, 8)), ('reduce', (14, 15)), ('by', (18, 19)), ('when', (23, 24)), ('approaches', (27, 28))]","[('initial global learning rate', (3, 7)), ('1 e ? 3', (8, 12)), ('learning rate', (16, 18)), ('factor of 10', (20, 23)), ('training error', (25, 27)), ('plateau', (29, 30))]",[],[],[],[]
hyperparameters,"The minibatch size is 32 , weight decay is 0.005 , and the leak factor for Leaky ReLU is 0.01 .","[('is', (3, 4)), ('is', (8, 9)), ('for', (15, 16)), ('is', (18, 19))]","[('minibatch size', (1, 3)), ('32', (4, 5)), ('weight decay', (6, 8)), ('0.005', (9, 10)), ('leak factor', (13, 15)), ('Leaky ReLU', (16, 18)), ('0.01', (19, 20))]",[],[],[],[]
results,"For AFLW - LFPA , our method outperforms the best methods with a large margin of 17.8 % improvement .","[('For', (0, 1)), ('outperforms', (7, 8)), ('with', (11, 12)), ('of', (15, 16))]","[('AFLW - LFPA', (1, 4)), ('our method', (5, 7)), ('best methods', (9, 11)), ('large margin', (13, 15)), ('17.8 % improvement', (16, 19))]",[],[],[],[]
results,"For AFLW2000 - 3D , our method also shows a large improvement .","[('For', (0, 1)), ('shows', (8, 9))]","[('AFLW2000 - 3D', (1, 4)), ('our method', (5, 7)), ('large improvement', (10, 12))]",[],[],[],[]
results,"Specifically , for images with yaw angle in [ 60 , 90 ] , our method improves the performance by 28 % ( from 7.93 to 5.68 ) .","[('for', (2, 3)), ('with', (4, 5)), ('in', (7, 8)), ('improves', (16, 17)), ('by', (19, 20)), ('from', (23, 24))]","[('images', (3, 4)), ('yaw angle', (5, 7)), ('[ 60 , 90 ]', (8, 13)), ('our method', (14, 16)), ('performance', (18, 19)), ('28 %', (20, 22)), ('7.93 to 5.68', (24, 27))]",[],[],[],[]
results,"For the IJB - A dataset , even though we are able to only compare the accuracy for the three labeled landmarks , our method still reaches a higher accuracy .","[('For', (0, 1)), ('reaches', (26, 27))]","[('IJB - A dataset', (2, 6)), ('our method', (23, 25)), ('higher accuracy', (28, 30))]",[],[],[],[]
results,"Even though the proposed method can handle largepose alignment , to show its performance on the near- frontal datasets , we evaluate our method on the 300W dataset .","[('on', (24, 25))]","[('300W dataset', (26, 28))]",[],[],[],[]
results,Our method is the second best method on the challenging set .,"[('is', (2, 3)), ('on', (7, 8))]","[('Our method', (0, 2)), ('second best method', (4, 7)), ('challenging set', (9, 11))]",[],[],[],[]
results,"In general , the performance of our method is comparable to other methods that are designed for near - frontal datasets , especially under the following consideration .","[('of', (5, 6)), ('comparable to', (9, 11)), ('designed for', (15, 17))]","[('performance', (4, 5)), ('our method', (6, 8)), ('other methods', (11, 13)), ('near - frontal datasets', (17, 21))]",[],[],[],[]
ablation-analysis,The accuracy of our method on the AFLW2000 - 3D consistently improves by adding more datasets .,"[('of', (2, 3)), ('on', (5, 6)), ('adding', (13, 14))]","[('accuracy', (1, 2)), ('our method', (3, 5)), ('AFLW2000 - 3D', (7, 10)), ('consistently improves', (10, 12)), ('more datasets', (14, 16))]",[],[],[],[]
ablation-analysis,"For the AFLW - PIFA dataset , our method achieves 9.5 % and 20 % relative improvement by utilizing the datasets in the stage 2 and stage 3 over the first stage , respectively .","[('For', (0, 1)), ('achieves', (9, 10)), ('by utilizing', (17, 19)), ('in', (21, 22)), ('over', (28, 29))]","[('AFLW - PIFA dataset', (2, 6)), ('our method', (7, 9)), ('9.5 % and 20 % relative improvement', (10, 17)), ('datasets', (20, 21)), ('stage 2 and stage 3', (23, 28)), ('first stage', (30, 32))]",[],[],[],[]
ablation-analysis,"If including the datasets from both the second and third stages , we can have 26 % relative improvement and achieve NME of 3.86 % .","[('including', (1, 2)), ('from', (4, 5)), ('achieve', (20, 21)), ('of', (22, 23))]","[('datasets', (3, 4)), ('second and third stages', (7, 11)), ('26 % relative improvement', (15, 19)), ('NME', (21, 22)), ('3.86 %', (23, 25))]",[],[],[],[]
ablation-analysis,Comparing LFC + SPC and LFC + CFC performances shows that the CFC is more helpful than the SPC .,"[('Comparing', (0, 1)), ('shows', (9, 10)), ('is', (13, 14)), ('than', (16, 17))]","[('LFC + SPC and LFC + CFC performances', (1, 9)), ('CFC', (12, 13)), ('more helpful', (14, 16)), ('SPC', (18, 19))]",[],[],[],[]
ablation-analysis,Using all constraints achieves the best performance .,"[('Using', (0, 1)), ('achieves', (3, 4))]","[('all constraints', (1, 3)), ('best performance', (5, 7))]",[],[],[],[]
ablation-analysis,This result shows that for the images with NME - lp between 5 % and 15 % the SPC is helpful .,"[('shows', (2, 3)), ('for', (4, 5)), ('with', (7, 8)), ('between', (11, 12)), ('is', (19, 20))]","[('images', (6, 7)), ('NME - lp', (8, 11)), ('5 % and 15 %', (12, 17)), ('SPC', (18, 19)), ('helpful', (20, 21))]",[],[],[],[]
research-problem,"We demonstrate the superior representation power of our nonlinear 3 DMM over its linear counterpart , and its contribution to face alignment and 3D reconstruction .","[('demonstrate', (1, 2)), ('of', (6, 7)), ('over', (11, 12)), ('to', (19, 20))]","[('superior representation power', (3, 6)), ('nonlinear 3 DMM', (8, 11)), ('linear counterpart', (13, 15)), ('contribution', (18, 19)), ('face alignment and 3D reconstruction', (20, 25))]",[],[],[],[]
model,"Hence , we utilize two network decoders , instead of two PCA spaces , as the shape and texture model components , respectively .","[('utilize', (3, 4)), ('instead of', (8, 10)), ('as', (14, 15))]","[('two network decoders', (4, 7)), ('two PCA spaces', (10, 13)), ('shape and texture model components', (16, 21))]",[],[],[],[]
model,"With careful consideration of each component , we design different networks for shape and texture : the multi - layer perceptron ( MLP ) for shape and convolutional neural network ( CNN ) for texture .","[('design', (8, 9)), ('for', (11, 12)), ('for', (24, 25)), ('for', (33, 34))]","[('different networks', (9, 11)), ('shape and texture', (12, 15)), ('multi - layer perceptron ( MLP )', (17, 24)), ('shape', (25, 26)), ('convolutional neural network ( CNN )', (27, 33)), ('texture', (34, 35))]",[],[],[],[]
model,Each decoder will take a shape or texture representation as input and output the dense 3 D face or a face texture .,"[('take', (3, 4)), ('as', (9, 10)), ('output', (12, 13))]","[('Each decoder', (0, 2)), ('shape or texture representation', (5, 9)), ('input', (10, 11)), ('dense 3 D face or a face texture', (14, 22)), ('face texture', (20, 22))]",[],[],[],[]
model,"Further , we learn the fitting algorithm to our nonlinear 3 DMM , which is formulated as a CNN encoder .","[('learn', (3, 4)), ('to', (7, 8)), ('formulated as', (15, 17))]","[('fitting algorithm', (5, 7)), ('nonlinear 3 DMM', (9, 12)), ('CNN encoder', (18, 20))]",[],[],[],[]
model,"The encoder takes a 2 D face image as input and generates the shape and texture parameters , from which two decoders estimate the 3D face and texture .","[('takes', (2, 3)), ('as', (8, 9)), ('generates', (11, 12)), ('from', (18, 19)), ('estimate', (22, 23))]","[('encoder', (1, 2)), ('2 D face image', (4, 8)), ('input', (9, 10)), ('shape and texture parameters', (13, 17)), ('two decoders', (20, 22)), ('3D face and texture', (24, 28))]",[],[],[],[]
model,"The 3 D face and texture would perfectly reconstruct the input face , if the fitting algorithm and 3 DMM are well learnt .","[('perfectly reconstruct', (7, 9)), ('if', (13, 14)), ('are', (20, 21))]","[('3 D face and texture', (1, 6)), ('input face', (10, 12)), ('fitting algorithm', (15, 17)), ('well learnt', (21, 23))]",[],[],[],[]
model,"Therefore , we design a differentiable rendering layer to generate a reconstructed face by fusing the 3D face , texture , and the camera projection parameters estimated by the encoder .","[('design', (3, 4)), ('to generate', (8, 10)), ('by fusing', (13, 15)), ('estimated by', (26, 28))]","[('differentiable rendering layer', (5, 8)), ('reconstructed face', (11, 13)), ('3D face , texture , and the camera projection parameters', (16, 26)), ('encoder', (29, 30))]",[],[],[],[]
model,"Finally , the endto - end learning scheme is constructed where the encoder and two decoders are learnt jointly to minimize the difference between the reconstructed face and the input face .","[('constructed', (9, 10)), ('where', (10, 11)), ('to minimize', (19, 21)), ('between', (23, 24))]","[('endto - end learning scheme', (3, 8)), ('encoder and two decoders', (12, 16)), ('learnt jointly', (17, 19)), ('difference', (22, 23)), ('reconstructed face and the input face', (25, 31))]",[],[],[],[]
model,Jointly learning the 3 DMM and the model fitting encoder allows us to leverage the large collection of unconstrained 2D images without relying on 3D scans .,"[('Jointly learning', (0, 2)), ('without relying on', (21, 24))]","[('3 DMM and the model fitting encoder', (3, 10)), ('large collection of unconstrained 2D images', (15, 21)), ('3D scans', (24, 26))]",[],[],[],[]
experiments,We show significantly improved shape and texture representation power over the linear 3 DMM .,"[('show', (1, 2)), ('over', (9, 10))]","[('significantly improved', (2, 4)), ('shape and texture representation power', (4, 9)), ('linear 3 DMM', (11, 14))]",[],[],[],[]
hyperparameters,"The model is optimized using Adam optimizer with an initial learning rate of 0.001 when minimizing L 0 , and 0.0002 when minimizing L.","[('optimized using', (3, 5)), ('with', (7, 8)), ('of', (12, 13)), ('when minimizing', (14, 16)), ('when minimizing', (21, 23))]","[('model', (1, 2)), ('Adam optimizer', (5, 7)), ('initial learning rate', (9, 12)), ('0.001', (13, 14)), ('L 0', (16, 18)), ('0.0002', (20, 21)), ('L.', (23, 24))]",[],[],[],[]
hyperparameters,"We set the following parameters : Q = 53 , 215 , U = V = 128 , l S = l T = 160 . ? values are set to make losses to have similar magnitudes .","[('set', (1, 2)), ('to have', (33, 35))]","[('U = V = 128', (12, 17)), ('l S = l T = 160', (18, 25)), ('losses', (32, 33)), ('similar magnitudes', (35, 37))]",[],[],[],[]
results,Representation Power,[],"[('Representation Power', (0, 2))]",[],[],[],[]
baselines,"Alternatively , we can minimize the reconstruction error in the image space , through the rendering layer with the groundtruth S and m .","[('minimize', (4, 5)), ('in', (8, 9)), ('through', (13, 14)), ('with', (17, 18))]","[('reconstruction error', (6, 8)), ('image space', (10, 12)), ('rendering layer', (15, 17)), ('groundtruth S and m', (19, 23))]",[],[],[],[]
results,"As in , our nonlinear texture is closer to the groundtruth than the linear model , especially for in - the - wild images ( the first two rows ) .","[('closer to', (7, 9)), ('than', (11, 12)), ('especially for', (16, 18))]","[('nonlinear texture', (4, 6)), ('groundtruth', (10, 11)), ('linear model', (13, 15)), ('in - the - wild images', (18, 24))]",[],[],[],[]
results,"Quantitatively , our nonlinear model has significantly lower L 1 reconstruction error than the lin - We also compare the power of nonlinear and linear 3 DMM in representing real - world 3D scans .","[('than', (12, 13)), ('compare', (18, 19)), ('in representing', (27, 29))]","[('nonlinear model', (3, 5)), ('significantly lower L 1 reconstruction error', (6, 12)), ('lin', (14, 15)), ('power', (20, 21)), ('nonlinear and linear 3 DMM', (22, 27)), ('real - world 3D scans', (29, 34))]",[],[],[],[]
results,"Our nonlinear model has a significantly smaller reconstruction error than the linear model , 0.0196 vs. 0.0241 ( Tab. 3 ) .","[('than', (9, 10))]","[('nonlinear model', (1, 3)), ('significantly smaller reconstruction error', (5, 9)), ('linear model', (11, 13)), ('0.0196 vs. 0.0241', (14, 17))]",[],[],[],[]
results,Quantitative evaluation of 3D reconstruction .,[],"[('Quantitative evaluation of 3D reconstruction', (0, 5)), ('3D reconstruction', (3, 5))]",[],[],[],[]
results,We obtain a low error that is comparable to optimization - based methods .,"[('obtain', (1, 2)), ('comparable to', (7, 9))]","[('low error', (3, 5)), ('optimization - based methods', (9, 13))]",[],[],[],[]
experiments,3D Face Reconstruction .,[],"[('3D Face Reconstruction', (0, 3))]",[],[],[],[]
results,"We achieve on - par results with Garrido et al. , an offline optimization method , while surpassing all other regression methods ] .","[('achieve', (1, 2)), ('with', (6, 7)), ('surpassing', (17, 18))]","[('on - par results', (2, 6)), ('Garrido et al.', (7, 10)), ('offline optimization method', (12, 15)), ('all other regression methods', (18, 22))]",[],[],[],[]
ablation-analysis,Using a global image - based discriminator is redundant as the global structure is guaranteed by the rendering layer .,"[('Using', (0, 1)), ('is', (7, 8)), ('guaranteed by', (14, 16))]","[('global image - based discriminator', (2, 7)), ('redundant', (8, 9)), ('global structure', (11, 13)), ('rendering layer', (17, 19))]",[],[],[],[]
ablation-analysis,"Also , we empirically find that using global image - based discriminator can cause severe artifacts in the resultant texture .","[('empirically find', (3, 5)), ('using', (6, 7)), ('can cause', (12, 14)), ('in', (16, 17))]","[('global image - based discriminator', (7, 12)), ('severe artifacts', (14, 16)), ('resultant texture', (18, 20))]",[],[],[],[]
ablation-analysis,"Clearly , patchGAN offers higher realism and fewer artifacts .","[('offers', (3, 4))]","[('patchGAN', (2, 3)), ('higher realism', (4, 6)), ('fewer artifacts', (7, 9))]",[],[],[],[]
research-problem,Faster Than Real - time Facial Alignment : A 3D Spatial Transformer Network Approach in Unconstrained Poses,[],[],[],[],[],[]
research-problem,Robust face recognition and analysis are contingent upon accurate localization of facial features .,[],[],[],[],[],[]
model,"In our method , we follow this idea and observe that fairly accurate 3 D models can be generated by using a simple mean shape deformed to the input image at a relatively low computational cost compared to other approaches .","[('observe', (9, 10)), ('generated by using', (18, 21)), ('deformed to', (25, 27)), ('at', (30, 31)), ('compared to', (36, 38))]","[('fairly accurate 3 D models', (11, 16)), ('simple mean shape', (22, 25)), ('input image', (28, 30)), ('relatively low computational cost', (32, 36)), ('other approaches', (38, 40))]",[],[],[],[]
experimental-setup,Our network is implemented in the Caffe framework .,"[('implemented in', (3, 5))]","[('Our network', (0, 2)), ('Caffe framework', (6, 8))]",[],[],[],[]
experimental-setup,"A new layer is created consisting of the 3D TPS transformation module , the camera projection module and the bilinear sampler module .","[('created', (4, 5)), ('consisting of', (5, 7))]","[('new layer', (1, 3)), ('3D TPS transformation module', (8, 12)), ('camera projection module', (14, 17)), ('bilinear sampler module', (19, 22))]",[],[],[],[]
experimental-setup,"We adopt two architectures , AlexNet and VGG - 16 , as the pre-trained models for our shared feature extraction networks in , i.e. we use the convolution layers from the pre-trained models to initialize ours .","[('adopt', (1, 2)), ('as', (11, 12)), ('for', (15, 16))]","[('two architectures', (2, 4)), ('AlexNet and VGG - 16', (5, 10)), ('pre-trained models', (13, 15)), ('shared feature extraction networks', (17, 21))]",[],[],[],[]
experimental-setup,"For the AlexNet architecture , we freeze the first layer while for the VGG - 16 architecture , the first 4 layers are frozen .","[('For', (0, 1)), ('freeze', (6, 7)), ('for', (11, 12))]","[('AlexNet architecture', (2, 4)), ('first layer', (8, 10)), ('VGG - 16 architecture', (13, 17)), ('first 4 layers', (19, 22)), ('frozen', (23, 24))]",[],[],[],[]
experimental-setup,The 2D landmark regression is implemented by attaching additional layers on top of the last convolution layer .,"[('implemented by', (5, 7)), ('on top of', (10, 13))]","[('2D landmark regression', (1, 4)), ('attaching', (7, 8)), ('additional layers', (8, 10)), ('last convolution layer', (14, 17))]",[],[],[],[]
research-problem,Face Alignment Across Large Poses : A 3D Solution,[],"[('Face Alignment', (0, 2))]",[],[],[],[]
research-problem,"Face alignment , which fits a face model to an image and extracts the semantic meanings of facial pixels , has been an important topic in CV community .",[],"[('Face alignment', (0, 2))]",[],[],[],[]
model,"poses , we propose to fit the 3D dense face model rather than the sparse landmark shape model to the image .","[('fit', (5, 6)), ('rather than', (11, 13)), ('to', (18, 19))]","[('3D dense face model', (7, 11)), ('sparse landmark shape model', (14, 18)), ('image', (20, 21))]",[],[],[],[]
model,We call this method 3D Dense Face Alignment ( 3DDFA ) .,"[('call', (1, 2))]","[('3D Dense Face Alignment ( 3DDFA )', (4, 11))]",[],[],[],[]
model,"To resolve the fitting process in 3 DDFA , we propose a cascaded convolutional neutral network ( CNN ) based regression method .","[('in', (5, 6)), ('propose', (10, 11))]","[('fitting process', (3, 5)), ('3 DDFA', (6, 8)), ('cascaded convolutional neutral network ( CNN ) based regression method', (12, 22))]",[],[],[],[]
model,"In this work , we adopt CNN to fit the 3D face model with a specifically designed feature , namely Projected Normalized Coordinate Code ( PNCC ) .","[('adopt', (5, 6)), ('to fit', (7, 9)), ('with', (13, 14)), ('namely', (19, 20))]","[('CNN', (6, 7)), ('3D face model', (10, 13)), ('specifically designed feature', (15, 18)), ('Projected Normalized Coordinate Code ( PNCC )', (20, 27))]",[],[],[],[]
model,"Besides , Weighted Parameter Distance Cost ( WPDC ) is proposed as the cost function .",[],"[('Weighted Parameter Distance Cost ( WPDC )', (2, 9)), ('cost function', (13, 15))]",[],[],[],[]
model,"To the best of our knowledge , this is the first attempt to solve the 3D face alignment with CNN .","[('is', (8, 9)), ('to solve', (12, 14)), ('with', (18, 19))]","[('first attempt', (10, 12)), ('3D face alignment', (15, 18)), ('CNN', (19, 20))]",[],[],[],[]
model,"To enable the training of the 3DDFA , we construct a face database containing pairs of 2D face images and 3D face models .","[('To enable', (0, 2)), ('of', (4, 5)), ('construct', (9, 10)), ('containing', (13, 14)), ('of', (15, 16))]","[('training', (3, 4)), ('3DDFA', (6, 7)), ('face database', (11, 13)), ('pairs', (14, 15)), ('2D face images and 3D face models', (16, 23))]",[],[],[],[]
model,We further propose a face profiling algorithm to synthesize 60 k + training samples across large poses .,"[('propose', (2, 3)), ('to synthesize', (7, 9)), ('across', (14, 15))]","[('face profiling algorithm', (4, 7)), ('60 k + training samples', (9, 14)), ('large poses', (15, 17))]",[],[],[],[]
experiments,The synthesized samples well simulate the face appearances in large poses and boost the performance of both prior and our proposed face alignment algorithms .,"[('well simulate', (3, 5)), ('in', (8, 9)), ('boost', (12, 13)), ('of', (15, 16))]","[('synthesized samples', (1, 3)), ('face appearances', (6, 8)), ('large poses', (9, 11)), ('performance', (14, 15)), ('prior and our proposed face alignment algorithms', (17, 24))]",[],[],[],[]
code,"The database , face profiling code and 3 DDFA code are released at http://www.cbsr.ia.ac.cn/users / xiangyuzhu/.",[],"[('3 DDFA code', (7, 10))]",[],[],[],[]
ablation-analysis,Error Reduction in Cascade :,[],"[('Error Reduction in Cascade', (0, 4))]",[],[],[],[]
ablation-analysis,"As observed , the testing error is reduced due to initialization regeneration .","[('due to', (8, 10))]","[('testing error', (4, 6)), ('reduced', (7, 8)), ('initialization regeneration', (10, 12))]",[],[],[],[]
ablation-analysis,In the generic cascade process the training and testing errors converge fast after 2 iterations .,"[('In', (0, 1)), ('converge', (10, 11)), ('after', (12, 13))]","[('generic cascade process', (2, 5)), ('training and testing errors', (6, 10)), ('fast', (11, 12)), ('2 iterations', (13, 15))]",[],[],[],[]
hyperparameters,"While with initialization regeneration , the training error is updated at the beginning of each iteration and the testing error continues to descend .","[('with', (1, 2)), ('at', (10, 11)), ('continues to', (20, 22))]","[('initialization regeneration', (2, 4)), ('training error', (6, 8)), ('updated', (9, 10)), ('beginning of', (12, 14)), ('each iteration', (14, 16)), ('testing error', (18, 20)), ('descend', (22, 23))]",[],[],[],[]
results,Performance with Different Costs :,[],"[('Performance with Different Costs', (0, 4))]",[],[],[],[]
ablation-analysis,It is shown that PDC can not well model the fitting error and converges to an unsatisfied result .,"[('shown', (2, 3)), ('can not well model', (5, 9)), ('converges to', (13, 15))]","[('PDC', (4, 5)), ('fitting error', (10, 12)), ('unsatisfied result', (16, 18))]",[],[],[],[]
baselines,"WPDC explicitly models the priority of each parameter and adaptively optimizes them with the parameter weights , leading to the best result .","[('explicitly models', (1, 3)), ('of', (5, 6)), ('with', (12, 13)), ('leading to', (17, 19))]","[('WPDC', (0, 1)), ('priority', (4, 5)), ('each parameter', (6, 8)), ('adaptively optimizes', (9, 11)), ('parameter weights', (14, 16)), ('best result', (20, 22))]",[],[],[],[]
baselines,Large Pose Face Alignment in AFLW Protocol :,[],"[('Large Pose Face Alignment', (0, 4))]",[],[],[],[]
results,"Firstly , the results indicate that all the methods benefits substantially from face profiling when dealing with large poses .","[('indicate', (4, 5)), ('benefits substantially from', (9, 12)), ('when dealing with', (14, 17))]","[('all the methods', (6, 9)), ('face profiling', (12, 14)), ('large poses', (17, 19))]",[],[],[],[]
results,"Secondly , 3DDFA reaches the state of the art above all the 2D methods especially beyond medium poses .","[('reaches', (3, 4)), ('above', (9, 10)), ('beyond', (15, 16))]","[('3DDFA', (2, 3)), ('state of the art', (5, 9)), ('all the 2D methods', (10, 14)), ('medium poses', (16, 18))]",[],[],[],[]
results,The minimum standard deviation of 3DDFA also demonstrates its robustness to pose variations .,"[('of', (4, 5)), ('demonstrates', (7, 8)), ('to', (10, 11))]","[('minimum standard deviation', (1, 4)), ('3DDFA', (5, 6)), ('robustness', (9, 10)), ('pose variations', (11, 13))]",[],[],[],[]
results,"Finally , the performance of 3DDFA can be further improved with the SDM landmark refinement in Section 5.2 .","[('of', (4, 5)), ('with', (10, 11))]","[('performance', (3, 4)), ('3DDFA', (5, 6)), ('SDM landmark refinement', (12, 15))]",[],[],[],[]
baselines,3D Face Alignment in AFLW2000-3D,[],"[('3D Face Alignment', (0, 3)), ('AFLW2000-3D', (4, 5))]",[],[],[],[]
results,"For all the methods , despite with ground truth bounding boxes the performance in [ 60 , 90 ] and the standard deviation are obviously reduced when considering all the landmarks .","[('For', (0, 1)), ('despite with', (5, 7)), ('in', (13, 14)), ('when considering', (26, 28))]","[('all the methods', (1, 4)), ('performance', (12, 13)), ('[ 60 , 90 ]', (14, 19)), ('standard deviation', (21, 23)), ('reduced', (25, 26)), ('all the landmarks', (28, 31))]",[],[],[],[]
results,Common Challenging Full TSPM,[],"[('Common Challenging Full TSPM', (0, 4))]",[],[],[],[]
results,"8 that even as a generic face alignment algorithm , 3 DDFA still demonstrates competitive performance on the common set and state - of - the - art performance on the challenging set .","[('demonstrates', (13, 14)), ('on', (16, 17)), ('on', (29, 30))]","[('3 DDFA', (10, 12)), ('competitive performance', (14, 16)), ('common set', (18, 20)), ('state - of - the - art performance', (21, 29)), ('challenging set', (31, 33))]",[],[],[],[]
research-problem,Deep Multi- Center Learning for Face Alignment,[],"[('Face Alignment', (5, 7))]",[],[],[],[]
code,The code for our method is available at https://github.com/ZhiwenShao/MCNet-Extension .,[],"[('https://github.com/ZhiwenShao/MCNet-Extension', (8, 9))]",[],[],[],[]
model,"In this work 1 , we propose a novel deep learning framework named Multi - Center Learning ( MCL ) to exploit the strong correlations among landmarks .","[('propose', (6, 7)), ('named', (12, 13)), ('to exploit', (20, 22)), ('among', (25, 26))]","[('novel deep learning framework', (8, 12)), ('Multi - Center Learning ( MCL )', (13, 20)), ('strong correlations', (23, 25)), ('landmarks', (26, 27))]",[],[],[],[]
model,"In particular , our network uses multiple shape prediction layers to predict the locations of landmarks , and each shape prediction layer emphasizes on the detection of a certain cluster of landmarks respectively .","[('uses', (5, 6)), ('to predict', (10, 12)), ('of', (14, 15)), ('emphasizes on', (22, 24)), ('of', (26, 27))]","[('multiple shape prediction layers', (6, 10)), ('locations', (13, 14)), ('landmarks', (15, 16)), ('each shape prediction layer', (18, 22)), ('detection', (25, 26)), ('certain cluster of landmarks', (28, 32))]",[],[],[],[]
model,"By weighting the loss of each landmark , challenging landmarks are focused firstly , and each cluster of landmarks is further optimized respectively .","[('weighting', (1, 2)), ('of', (4, 5)), ('are', (10, 11))]","[('loss', (3, 4)), ('each landmark', (5, 7)), ('challenging landmarks', (8, 10)), ('focused', (11, 12)), ('firstly', (12, 13)), ('each cluster of landmarks', (15, 19)), ('further optimized', (20, 22))]",[],[],[],[]
model,"Moreover , to decrease the model complexity , we propose a model assembling method to integrate multiple shape prediction layers into one shape prediction layer .","[('to decrease', (2, 4)), ('propose', (9, 10)), ('to integrate', (14, 16)), ('into', (20, 21))]","[('model complexity', (5, 7)), ('model assembling method', (11, 14)), ('multiple shape prediction layers', (16, 20)), ('one shape prediction layer', (21, 25))]",[],[],[],[]
model,The entire framework reinforces the learning process of each landmark with a low model complexity .,"[('reinforces', (3, 4)), ('of', (7, 8)), ('with', (10, 11))]","[('entire framework', (1, 3)), ('learning process', (5, 7)), ('each landmark', (8, 10)), ('low model complexity', (12, 15))]",[],[],[],[]
experimental-setup,"Uniform scaling and translation with different extents on face bounding boxes are further conducted , in which each newly generated face bounding box is used to crop the face .","[('with', (4, 5)), ('on', (7, 8))]","[('Uniform scaling and translation', (0, 4)), ('different extents', (5, 7)), ('face bounding boxes', (8, 11)), ('each newly generated face bounding box', (17, 23)), ('crop', (26, 27)), ('face', (28, 29))]",[],[],[],[]
experimental-setup,Finally training samples are augmented through horizontal flip and JPEG compression .,"[('augmented through', (4, 6))]","[('training samples', (1, 3)), ('horizontal flip and JPEG compression', (6, 11))]",[],[],[],[]
experimental-setup,We train our MCL using an open source deep learning framework Caffe .,"[('train', (1, 2)), ('using', (4, 5))]","[('MCL', (3, 4)), ('open source deep learning framework Caffe', (6, 12))]",[],[],[],[]
experimental-setup,"The input face patch is a 50 50 grayscale image , and each pixel value is normalized to [ ?1 , 1 ) by subtracting 128 and multiplying 0.0078125 .","[('is', (4, 5)), ('normalized to', (16, 18)), ('by', (23, 24)), ('subtracting', (24, 25))]","[('input face patch', (1, 4)), ('50 50 grayscale image', (6, 10)), ('each pixel value', (12, 15)), ('[ ?1 , 1 )', (18, 23)), ('128', (25, 26)), ('multiplying', (27, 28)), ('0.0078125', (28, 29))]",[],[],[],[]
experimental-setup,"A more complex model is needed for a labeling pattern with more facial landmarks , so Dis set to be 512/512/1 , 024 for 5/29/68 facial landmarks .","[('needed for', (5, 7)), ('with', (10, 11)), ('for', (23, 24))]","[('more complex model', (1, 4)), ('labeling pattern', (8, 10)), ('more facial landmarks', (11, 14)), ('512/512/1 , 024', (20, 23)), ('5/29/68 facial landmarks', (24, 27))]",[],[],[],[]
experimental-setup,"The type of solver is SGD with a mini-batch size of 64 , a momentum of 0.9 , and a weight decay of 0.0005 .","[('is', (4, 5)), ('with', (6, 7)), ('of', (10, 11)), ('of', (15, 16)), ('of', (22, 23))]","[('type of solver', (1, 4)), ('SGD', (5, 6)), ('mini-batch size', (8, 10)), ('64', (11, 12)), ('momentum', (14, 15)), ('0.9', (16, 17)), ('weight decay', (20, 22)), ('0.0005', (23, 24))]",[],[],[],[]
experimental-setup,"The maximum learning iterations of pre-training and each finetuning step are 1810 4 and 610 4 respectively , and the initial learning rates of pre-training and each fine - tuning step are 0.02 and 0.001 respectively .","[('of', (4, 5)), ('are', (10, 11)), ('of', (23, 24)), ('are', (31, 32))]","[('maximum learning iterations', (1, 4)), ('pre-training and each finetuning step', (5, 10)), ('1810 4 and 610 4', (11, 16)), ('initial learning rates', (20, 23)), ('pre-training and each fine - tuning step', (24, 31)), ('0.02 and 0.001', (32, 35))]",[],[],[],[]
experimental-setup,"The learning rate is multiplied by a factor of 0.3 at every 3 10 4 iterations , and the remaining parameter ?","[('multiplied by', (4, 6)), ('of', (8, 9)), ('at', (10, 11))]","[('learning rate', (1, 3)), ('factor', (7, 8)), ('0.3', (9, 10)), ('every 3 10 4 iterations', (11, 16))]",[],[],[],[]
baselines,"We compare our work MCL against state - of - the - art methods including ESR , SDM , Cascaded CNN , RCPR , CFAN , LBF , c GPRT , CFSS , TCDCN , , ALR , CFT , RFLD , RecNet , RAR , and FLD + PDE .","[('compare', (1, 2)), ('against', (5, 6)), ('including', (14, 15))]","[('MCL', (4, 5)), ('state - of - the - art methods', (6, 14)), ('ESR', (15, 16)), ('SDM', (17, 18)), ('Cascaded CNN', (19, 21)), ('RCPR', (22, 23)), ('CFAN', (24, 25)), ('LBF', (26, 27)), ('c GPRT', (28, 30)), ('CFSS', (31, 32)), ('TCDCN', (33, 34)), ('ALR', (36, 37)), ('CFT', (38, 39)), ('RFLD', (40, 41)), ('RecNet', (42, 43)), ('RAR', (44, 45)), ('FLD + PDE', (47, 50))]",[],[],[],[]
results,"Our method MCL outperforms most of the state - of - the - art methods , especially on AFLW dataset where a relative error reduction of 3.93 % is achieved compared to RecNet .","[('outperforms', (3, 4)), ('on', (17, 18)), ('compared to', (30, 32))]","[('MCL', (2, 3)), ('most of the state - of - the - art methods', (4, 15)), ('AFLW dataset', (18, 20)), ('RecNet', (32, 33))]",[],[],[],[]
results,We compare with other methods on several challenging images from AFLW and COFW respectively in .,"[('on', (5, 6)), ('from', (9, 10))]","[('several challenging images', (6, 9)), ('AFLW and COFW', (10, 13))]",[],[],[],[]
results,"MCL demonstrates a superior capability of handling severe occlusions and complex variations of pose , expression , illumination .","[('demonstrates', (1, 2)), ('of handling', (5, 7))]","[('MCL', (0, 1)), ('superior capability', (3, 5))]",[],[],[],[]
results,It is observed that MCL achieves competitive performance on all three benchmarks .,"[('observed', (2, 3)), ('achieves', (5, 6)), ('on', (8, 9))]","[('MCL', (4, 5)), ('competitive performance', (6, 8)), ('all three benchmarks', (9, 12))]",[],[],[],[]
results,The average running speed of deep learning methods for detecting 68 facial landmarks are presented in .,"[('of', (4, 5)), ('for detecting', (8, 10))]","[('average running speed', (1, 4)), ('deep learning methods', (5, 8)), ('68 facial landmarks', (10, 13))]",[],[],[],[]
ablation-analysis,1 ) Global Average Pooling vs. Full Connection :,[],"[('Global Average Pooling vs. Full Connection', (2, 8))]",[],[],[],[]
ablation-analysis,It can be seen that BM performs better on IBUG and COFW but worse on AFLW than pre-BM .,"[('performs', (6, 7)), ('on', (8, 9)), ('worse on', (13, 15)), ('than', (16, 17))]","[('BM', (5, 6)), ('IBUG and COFW', (9, 12)), ('AFLW', (15, 16)), ('pre-BM', (17, 18))]",[],[],[],[]
ablation-analysis,It demonstrates that Global Average Pooling is more advantageous for more complex problems with more facial landmarks .,"[('demonstrates', (1, 2)), ('is', (6, 7)), ('for', (9, 10)), ('with', (13, 14))]","[('Global Average Pooling', (3, 6)), ('more advantageous', (7, 9)), ('more complex problems', (10, 13)), ('more facial landmarks', (14, 17))]",[],[],[],[]
ablation-analysis,2 ) Robustness of Weighting :,[],"[('Robustness of Weighting', (2, 5))]",[],[],[],[]
ablation-analysis,"When ? is 0.4 , WM can still achieves good performance .","[('When', (0, 1)), ('is', (2, 3))]","[('0.4', (3, 4)), ('WM', (5, 6)), ('good performance', (9, 11))]",[],[],[],[]
ablation-analysis,3 ) Analysis of Shape Prediction Layers :,[],"[('Analysis of Shape Prediction Layers', (2, 7))]",[],[],[],[]
ablation-analysis,"Compared to WM , the left eye model and the right eye model both reduce the alignment errors of their corresponding clusters .","[('Compared to', (0, 2)), ('reduce', (14, 15)), ('of', (18, 19))]","[('WM', (2, 3)), ('left eye model and the right eye model', (5, 13)), ('alignment errors', (16, 18)), ('corresponding clusters', (20, 22))]",[],[],[],[]
ablation-analysis,"As a result , the assembled AM can improve the detection accuracy of landmarks of the left eye and the right eye on the basis of WM .","[('improve', (8, 9)), ('of', (12, 13)), ('of', (14, 15)), ('on the basis of', (22, 26))]","[('assembled AM', (5, 7)), ('detection accuracy', (10, 12)), ('landmarks', (13, 14)), ('left eye and the right eye', (16, 22)), ('WM', (26, 27))]",[],[],[],[]
ablation-analysis,Note that the two models also improve the localization precision of other clusters .,"[('improve', (6, 7)), ('of', (10, 11))]","[('two models', (3, 5)), ('localization precision', (8, 10)), ('other clusters', (11, 13))]",[],[],[],[]
ablation-analysis,4 ) Integration of Weighting Fine - Tuning and Multi - Center Fine - Tuning :,"[('Integration of', (2, 4))]","[('Multi - Center Fine - Tuning', (9, 15))]",[],[],[],[]
ablation-analysis,"The accuracy of AM is superior to that of Simplified AM especially on challenging IBUG , which is attributed to the integration of two stages .","[('of', (2, 3)), ('superior to', (5, 7)), ('especially on', (11, 13))]","[('accuracy', (1, 2)), ('AM', (3, 4)), ('Simplified AM', (9, 11)), ('challenging IBUG', (13, 15))]",[],[],[],[]
ablation-analysis,It can be seen that Weighting Simplified AM improves slightly on COFW but fails to search a better solution on IBUG .,"[('on', (10, 11)), ('fails to search', (13, 16)), ('on', (19, 20))]","[('Weighting Simplified AM', (5, 8)), ('improves slightly', (8, 10)), ('COFW', (11, 12)), ('better solution', (17, 19)), ('IBUG', (20, 21))]",[],[],[],[]
ablation-analysis,It can be observed that AM has higher accuracy and stronger robustness than BM and WM .,"[('observed', (3, 4)), ('than', (12, 13))]","[('AM', (5, 6)), ('higher accuracy', (7, 9)), ('stronger robustness', (10, 12)), ('BM and WM', (13, 16))]",[],[],[],[]
ablation-analysis,The localization accuracy of facial landmarks from each cluster is improved in the details .,"[('of', (3, 4)), ('from', (6, 7))]","[('localization accuracy', (1, 3)), ('facial landmarks', (4, 6)), ('each cluster', (7, 9))]",[],[],[],[]
ablation-analysis,D. MCL for Partially Occluded Faces,[],"[('MCL', (1, 2)), ('Partially Occluded Faces', (3, 6))]",[],[],[],[]
ablation-analysis,The correlations among different facial parts are very useful for face alignment especially for partially occluded faces .,"[('among', (2, 3)), ('especially for', (12, 14))]","[('correlations', (1, 2)), ('different facial parts', (3, 6)), ('face alignment', (10, 12)), ('partially occluded faces', (14, 17))]",[],[],[],[]
ablation-analysis,"After processing testing faces with occlusions , the mean error results of both WM and AM increase .","[('After processing', (0, 2)), ('with', (4, 5)), ('of', (11, 12))]","[('testing faces', (2, 4)), ('occlusions', (5, 6)), ('mean error results', (8, 11)), ('WM and AM', (13, 16)), ('increase', (16, 17))]",[],[],[],[]
ablation-analysis,"Besides the results of landmarks from the left eye cluster , the results of remaining landmarks from other clusters become worse slightly .","[('of', (3, 4)), ('from', (5, 6)), ('of', (13, 14)), ('from', (16, 17)), ('become', (19, 20))]","[('results', (2, 3)), ('landmarks', (4, 5)), ('left eye cluster', (7, 10)), ('results', (12, 13)), ('remaining landmarks', (14, 16)), ('other clusters', (17, 19)), ('worse slightly', (20, 22))]",[],[],[],[]
ablation-analysis,"Note that WM and AM still perform well on occluded left eyes with the mean error of 6.60 and 6.50 respectively , due to the following reasons .","[('perform', (6, 7)), ('on', (8, 9)), ('with', (12, 13)), ('of', (16, 17))]","[('WM and AM', (2, 5)), ('well', (7, 8)), ('occluded left eyes', (9, 12)), ('mean error', (14, 16)), ('6.60 and 6.50', (17, 20))]",[],[],[],[]
ablation-analysis,E. Weighting Fine - Tuning for State - of - the - Art Frameworks,[],"[('State - of - the - Art Frameworks', (6, 14))]",[],[],[],[]
ablation-analysis,It can be seen that the mean error of re -DAN is reduced from 7.97 to 7.81 after using our proposed weighting fine - tuning .,"[('of', (8, 9)), ('reduced from', (12, 14)), ('after using', (17, 19))]","[('mean error', (6, 8)), ('re -DAN', (9, 11)), ('7.97 to 7.81', (14, 17)), ('our proposed weighting fine - tuning', (19, 25))]",[],[],[],[]
research-problem,"Facial landmark detection , or face alignment , is a fundamental task that has been extensively studied .",[],"[('Facial landmark detection', (0, 3)), ('face alignment', (5, 7))]",[],[],[],[]
code,The code is made publicly available at https://github.com/thesouthfrog/stylealign.,[],"[('https://github.com/thesouthfrog/stylealign.', (7, 8))]",[],[],[],[]
model,"To this end , we propose a new framework to augment training for facial landmark detection without using extra knowledge .","[('propose', (5, 6)), ('to augment', (9, 11)), ('for', (12, 13)), ('without using', (16, 18))]","[('new framework', (7, 9)), ('training', (11, 12)), ('facial landmark detection', (13, 16)), ('extra knowledge', (18, 20))]",[],[],[],[]
model,"Instead of directly generating images , we first map face images into the space of structure and style .","[('map', (8, 9)), ('into', (11, 12)), ('of', (14, 15))]","[('face images', (9, 11)), ('space', (13, 14)), ('structure and style', (15, 18))]",[],[],[],[]
model,"To guarantee the disentanglement of these two spaces , we design a conditional variational auto - encoder model , in which Kullback - Leiber ( KL ) divergence loss and skip connections are incorporated for compact representation of style and structure respectively .","[('design', (10, 11)), ('in which', (19, 21)), ('incorporated for', (33, 35)), ('of', (37, 38))]","[('conditional variational auto - encoder model', (12, 18)), ('Kullback - Leiber ( KL ) divergence loss and skip connections', (21, 32)), ('compact representation', (35, 37)), ('style and structure', (38, 41))]",[],[],[],[]
model,"By factoring these features , we perform visual style translation between existing facial geometry .","[('factoring', (1, 2)), ('perform', (6, 7)), ('between', (10, 11))]","[('visual style translation', (7, 10)), ('existing facial geometry', (11, 14))]",[],[],[],[]
model,"Given existing facial structure , faces with glasses , of poor quality , under blur or strong lighting are rerendered from corresponding style , which are used to further train the facial landmark detectors for a rather general and robust system to recognize facial geometry .","[('Given', (0, 1)), ('of', (9, 10)), ('under', (13, 14)), ('rerendered from', (19, 21)), ('for', (34, 35)), ('to recognize', (41, 43))]","[('existing facial structure', (1, 4)), ('faces', (5, 6)), ('glasses', (7, 8)), ('poor quality', (10, 12)), ('blur or strong lighting', (14, 18)), ('corresponding style', (21, 23)), ('further train', (28, 30)), ('facial landmark detectors', (31, 34)), ('rather general and robust system', (36, 41)), ('facial geometry', (43, 45))]",[],[],[],[]
hyperparameters,"Implementation Details Before training , all images are cropped and resized to 256 256 using provided bounding boxes .","[('Before', (2, 3)), ('cropped and resized to', (8, 12)), ('using', (14, 15))]","[('training', (3, 4)), ('all images', (5, 7)), ('256 256', (12, 14)), ('provided bounding boxes', (15, 18))]",[],[],[],[]
hyperparameters,"We use 6 residual encoder blocks for downsampling the input feature maps , where batch normalization is removed for better synthetic results .","[('use', (1, 2)), ('for', (6, 7)), ('for downsampling', (6, 8)), ('where', (13, 14))]","[('6 residual encoder blocks', (2, 6)), ('downsampling', (7, 8)), ('input feature maps', (9, 12)), ('batch normalization', (14, 16)), ('removed', (17, 18))]",[],[],[],[]
hyperparameters,"For training of the disentangling step , we use Adam with an initial learning rate of 0.01 , which descends linearly to 0.0001 with no augmentation .","[('For', (0, 1)), ('of', (2, 3)), ('use', (8, 9)), ('with', (10, 11)), ('of', (15, 16)), ('descends', (19, 20)), ('to', (21, 22)), ('with', (23, 24))]","[('training', (1, 2)), ('disentangling step', (4, 6)), ('Adam', (9, 10)), ('initial learning rate', (12, 15)), ('0.01', (16, 17)), ('linearly', (20, 21)), ('0.0001', (22, 23)), ('no augmentation', (24, 26))]",[],[],[],[]
hyperparameters,"For training of detectors , we first augment each landmark map with k random styles sampled from other face images .","[('For', (0, 1)), ('of', (2, 3)), ('augment', (7, 8)), ('with', (11, 12)), ('sampled from', (15, 17))]","[('detectors', (3, 4)), ('each landmark map', (8, 11)), ('k random styles', (12, 15)), ('other face images', (17, 20))]",[],[],[],[]
hyperparameters,"For the detector architecture , a simple baseline network based on ResNet - 18 is chosen by changing the output dimension of the last FC layers to landmark 2 to demonstrate the increase brought by style translation .","[('For', (0, 1)), ('based on', (9, 11)), ('chosen by changing', (15, 18)), ('of', (21, 22)), ('to', (26, 27)), ('to demonstrate', (29, 31)), ('brought by', (33, 35))]","[('detector architecture', (2, 4)), ('simple baseline network', (6, 9)), ('ResNet - 18', (11, 14)), ('output dimension', (19, 21)), ('last FC layers', (23, 26)), ('increase', (32, 33)), ('style translation', (35, 37))]",[],[],[],[]
baselines,WFLW,[],"[('WFLW', (0, 1))]",[],[],[],[]
results,The light - weight Res - 18 is improved by 13.8 % .,"[('improved by', (8, 10))]","[('light - weight Res - 18', (1, 7)), ('13.8 %', (10, 12))]",[],[],[],[]
results,"By utilizing a stronger baseline , our model achieves 4.39 % NME under style - augmented training , outperforms state - of the - art entries by a large margin .","[('utilizing', (1, 2)), ('achieves', (8, 9)), ('under', (12, 13)), ('by', (26, 27))]","[('stronger baseline', (3, 5)), ('our model', (6, 8)), ('4.39 % NME', (9, 12)), ('style - augmented training', (13, 17)), ('outperforms', (18, 19)), ('state - of the - art entries', (19, 26)), ('large margin', (28, 30))]",[],[],[],[]
results,"In particular , for the strong baselines , our method also brings 15.9 % improvement to SAN model , and 9 % boost to LAB from 5.27 % NME to 4.76 % .","[('for', (3, 4)), ('brings', (11, 12)), ('to', (15, 16)), ('to', (23, 24)), ('from', (25, 26)), ('to', (29, 30))]","[('strong baselines', (5, 7)), ('our method', (8, 10)), ('15.9 % improvement', (12, 15)), ('SAN model', (16, 18)), ('9 % boost', (20, 23)), ('LAB', (24, 25)), ('5.27 % NME', (26, 29)), ('4.76 %', (30, 32))]",[],[],[],[]
results,"With additional "" style- augmented "" synthetic training samples , our model based on a simple backbone outperforms previous state - of - the - art methods .","[('With', (0, 1)), ('based on', (12, 14))]","[('additional "" style- augmented "" synthetic training samples', (1, 9)), ('our model', (10, 12)), ('simple backbone', (15, 17)), ('outperforms', (17, 18)), ('previous state - of - the - art methods', (18, 27))]",[],[],[],[]
baselines,300W,[],"[('300W', (0, 1))]",[],[],[],[]
results,"However , our model still yields 1.8 % and 3.1 % improvement on LAB and SAN respectively , which manifest the consistent benefit when using the "" style - augmented "" strategy .","[('yields', (5, 6)), ('on', (12, 13)), ('manifest', (19, 20)), ('when using', (23, 25))]","[('our model', (2, 4)), ('1.8 % and 3.1 % improvement', (6, 12)), ('LAB and SAN', (13, 16)), ('consistent benefit', (21, 23)), ('"" style - augmented "" strategy', (26, 32))]",[],[],[],[]
results,Common Cross - dataset Evaluation on COFW,[],"[('COFW', (6, 7))]",[],[],[],[]
results,"Our model performs the best with 4.43 % mean error and 2.82 % failure rate , which indicates high robustness to occlusion due to our proper utilization of style translation .","[('performs', (2, 3)), ('with', (5, 6))]","[('Our model', (0, 2)), ('best', (4, 5)), ('4.43 % mean error', (6, 10)), ('2.82 % failure rate', (11, 15))]",[],[],[],[]
baselines,AFLW,[],"[('AFLW', (0, 1))]",[],[],[],[]
experiments,"Exploiting style information also boosts landmark detectors with a large - scale training set ( 25 , 000 images in AFLW ) .","[('Exploiting', (0, 1)), ('boosts', (4, 5)), ('with', (7, 8))]","[('style information', (1, 3)), ('landmark detectors', (5, 7)), ('large - scale training set', (9, 14))]",[],[],[],[]
results,"Interestingly , our method improves SAN baseline in terms of NME on Full set from 6.94 % to 6.01 % , which indicates that augmenting in style level brings promising improvement on solving large pose variation .","[('improves', (4, 5)), ('in terms of', (7, 10)), ('on', (11, 12)), ('from', (14, 15))]","[('our method', (2, 4)), ('SAN baseline', (5, 7)), ('NME', (10, 11)), ('Full set', (12, 14)), ('6.94 % to 6.01 %', (15, 20))]",[],[],[],[]
results,The visual comparison in shows hidden face part is better modeled with our strategy .,"[('shows', (4, 5)), ('better modeled with', (9, 12))]","[('hidden face part', (5, 8)), ('our strategy', (12, 14))]",[],[],[],[]
ablation-analysis,Disentanglement of style and structure is the key that influences quality of style - augmented samples .,"[('influences', (9, 10))]","[('style and structure', (2, 5)), ('quality', (10, 11))]",[],[],[],[]
ablation-analysis,"Style - augmented synthetic images improve detectors ' performance by a large margin , while the improvement is even larger when the number of training images is quite small .","[('improve', (5, 6)), ('by', (9, 10)), ('when', (20, 21)), ('is', (26, 27))]","[('Style - augmented synthetic images', (0, 5)), (""detectors ' performance"", (6, 9)), ('large margin', (11, 13)), ('improvement', (16, 17)), ('even larger', (18, 20)), ('number of training images', (22, 26)), ('quite small', (27, 29))]",[],[],[],[]
ablation-analysis,We evaluate our method by adding the number of random sampled styles k of each annotated landmarks on a ResNet - 50 baseline .,"[('adding', (5, 6)), ('of', (13, 14)), ('on', (17, 18))]","[('number of random sampled styles k', (7, 13)), ('each annotated landmarks', (14, 17)), ('ResNet - 50 baseline', (19, 23))]",[],[],[],[]
ablation-analysis,"By adding a number of augmented styles , the model continue gaining improvement .","[('adding', (1, 2))]","[('number of augmented styles', (3, 7)), ('model', (9, 10)), ('improvement', (12, 13))]",[],[],[],[]
research-problem,Deep Alignment Network : A convolutional neural network for robust face alignment,[],"[('robust face alignment', (9, 12))]",[],[],[],[]
research-problem,"The goal of face alignment is to localize a set of predefined facial landmarks ( eye corners , mouth corners etc. ) in an image of a face .",[],"[('face alignment', (3, 5))]",[],[],[],[]
model,"In this work , we address the above shortcoming by proposing a novel face alignment method which we dub Deep Alignment Network ( DAN ) .","[('proposing', (10, 11)), ('dub', (18, 19))]","[('novel face alignment method', (12, 16)), ('Deep Alignment Network ( DAN )', (19, 25))]",[],[],[],[]
model,"It is based on a multistage neural network where each stage refines the landmark positions estimated at the previous stage , iteratively improving the landmark locations .","[('based on', (2, 4)), ('where', (8, 9)), ('refines', (11, 12)), ('estimated at', (15, 17)), ('iteratively improving', (21, 23))]","[('multistage neural network', (5, 8)), ('each stage', (9, 11)), ('landmark positions', (13, 15)), ('previous stage', (18, 20)), ('landmark locations', (24, 26))]",[],[],[],[]
model,The input to each stage of our algorithm ( except the first stage ) area face image normalized to a canonical pose and an image learned from the dense layer of the previous stage .,"[('input to', (1, 3)), ('of', (5, 6)), ('area', (14, 15)), ('normalized to', (17, 19)), ('learned from', (25, 27))]","[('each stage', (3, 5)), ('our algorithm', (6, 8)), ('face image', (15, 17)), ('canonical pose', (20, 22)), ('image', (24, 25)), ('dense layer', (28, 30)), ('previous stage', (32, 34))]",[],[],[],[]
model,"To make use of the entire face image during the process of face alignment , we additionally input at each stage a landmark heatmap , which is a key element of our system .","[('during', (8, 9)), ('of', (11, 12)), ('input at', (17, 19))]","[('entire face image', (5, 8)), ('process', (10, 11)), ('face alignment', (12, 14)), ('each stage', (19, 21)), ('landmark heatmap', (22, 24))]",[],[],[],[]
experimental-setup,During data augmentation a total of 10 images are created from each input image in the training set .,"[('During', (0, 1)), ('created from', (9, 11)), ('in', (14, 15))]","[('data augmentation', (1, 3)), ('total of 10 images', (4, 8)), ('each input image', (11, 14)), ('training set', (16, 18))]",[],[],[],[]
experimental-setup,Training is performed using Theano 0.9.0 and Lasagne 0.2 .,"[('performed using', (2, 4))]","[('Training', (0, 1)), ('Theano 0.9.0', (4, 6)), ('Lasagne 0.2', (7, 9))]",[],[],[],[]
experimental-setup,For optimization we use Adam stochastic optimization with an initial step size of 0.001 and mini batch size of 64 .,"[('For', (0, 1)), ('use', (3, 4)), ('with', (7, 8)), ('of', (12, 13)), ('of', (18, 19))]","[('optimization', (1, 2)), ('Adam stochastic optimization', (4, 7)), ('initial step size', (9, 12)), ('0.001', (13, 14)), ('mini batch size', (15, 18)), ('64', (19, 20))]",[],[],[],[]
experimental-setup,For validation we use a random subset of 100 images from the training set .,"[('For', (0, 1)), ('use', (3, 4)), ('of', (7, 8)), ('from', (10, 11))]","[('validation', (1, 2)), ('random subset', (5, 7)), ('100 images', (8, 10)), ('training set', (12, 14))]",[],[],[],[]
experimental-setup,The Python implementation runs at 73 fps for images processed in parallel and at 45 fps for images processed sequentially on a GeForce GTX 1070 GPU .,"[('runs at', (3, 5)), ('for', (7, 8)), ('processed in', (9, 11)), ('for', (16, 17)), ('on', (20, 21))]","[('Python implementation', (1, 3)), ('73 fps', (5, 7)), ('images', (8, 9)), ('parallel', (11, 12)), ('45 fps', (14, 16)), ('images', (17, 18)), ('GeForce GTX 1070 GPU', (22, 26))]",[],[],[],[]
results,"a failure rate reduction of 60 % on the 300 W private test set ,","[('of', (4, 5)), ('on', (7, 8))]","[('failure rate reduction', (1, 4)), ('60 %', (5, 7)), ('300 W private test set', (9, 14))]",[],[],[],[]
results,"a failure rate reduction of 72 % on the 300W public test set ,","[('of', (4, 5)), ('on', (7, 8))]","[('failure rate reduction', (1, 4)), ('72 %', (5, 7)), ('300W public test set', (9, 13))]",[],[],[],[]
results,a 9 % improvement of the mean error on the challenging subset .,"[('of', (4, 5)), ('on', (8, 9))]","[('9 % improvement', (1, 4)), ('mean error', (6, 8)), ('challenging subset', (10, 12))]",[],[],[],[]
research-problem,DeCaFA : Deep Convolutional Cascade for Face Alignment In The Wild,[],"[('Face Alignment', (6, 8))]",[],[],[],[]
research-problem,"Face Alignment is an active computer vision domain , that consists in localizing a number of facial landmarks that vary across datasets .",[],"[('Face Alignment', (0, 2))]",[],[],[],[]
model,"In this paper , we introduce a Deep convolutional Cascade for Face Alignment ( DeCaFA ) .","[('introduce', (5, 6))]","[('Face Alignment ( DeCaFA )', (11, 16))]",[],[],[],[]
model,"DeCaFA is composed of several stages that each produce landmark - wise attention maps , relatively to heterogeneous annotation markups .","[('composed of', (2, 4)), ('relatively to', (15, 17))]","[('DeCaFA', (0, 1)), ('several stages', (4, 6)), ('landmark - wise attention maps', (9, 14)), ('heterogeneous annotation markups', (17, 20))]",[],[],[],[]
model,"It illustrates how these attention maps are refined through the successive stages , and how the different prediction tasks can benefit from each other .","[('illustrates', (1, 2)), ('through', (8, 9)), ('benefit from', (20, 22))]","[('attention maps', (4, 6)), ('refined', (7, 8)), ('successive stages', (10, 12)), ('different prediction tasks', (16, 19)), ('each other', (22, 24))]",[],[],[],[]
hyperparameters,"The DeCaFA models that will be investigated below use 1 to 4 stages that each contains 12 3 3 convolutional layers with 64 ? 64 ? 128 ? 128 ? 256 ? 256 channels for the downsampling portion , and vice - versa for the upsampling portion .","[('use', (8, 9)), ('with', (21, 22)), ('for', (34, 35)), ('for', (43, 44))]","[('DeCaFA models', (1, 3)), ('1 to 4 stages', (9, 13)), ('12 3 3 convolutional layers', (16, 21)), ('64 ? 64 ? 128 ? 128 ? 256 ? 256 channels', (22, 34)), ('downsampling portion', (36, 38)), ('upsampling portion', (45, 47))]",[],[],[],[]
hyperparameters,The input images are resized to 128 128 grayscale images prior to being processed by the network .,"[('resized to', (4, 6)), ('processed by', (13, 15))]","[('input images', (1, 3)), ('128 128 grayscale images', (6, 10)), ('network', (16, 17))]",[],[],[],[]
hyperparameters,Each convolution is followed by a batch normalization layer with ReLU activation .,"[('followed by', (3, 5)), ('with', (9, 10))]","[('Each convolution', (0, 2)), ('batch normalization layer', (6, 9)), ('ReLU activation', (10, 12))]",[],[],[],[]
hyperparameters,In order to generate smooth feature maps we do not use transposed convolution but bilinear image upsampling followed with 3 3 convolutional layers .,"[('to generate', (2, 4)), ('do not use', (8, 11)), ('followed with', (17, 19))]","[('smooth feature maps', (4, 7)), ('transposed convolution', (11, 13)), ('bilinear image upsampling', (14, 17)), ('3 3 convolutional layers', (19, 23))]",[],[],[],[]
hyperparameters,The whole architecture is trained using ADAM optimizer with a 5e ? 4 learning rate with momentum 0.9 and learning rate annealing with power 0.9 .,"[('trained using', (4, 6)), ('with', (8, 9)), ('with', (15, 16)), ('with', (22, 23))]","[('whole architecture', (1, 3)), ('ADAM optimizer', (6, 8)), ('5e ? 4 learning rate', (10, 15)), ('momentum 0.9', (16, 18)), ('learning rate', (19, 21)), ('learning rate annealing', (19, 22)), ('annealing', (21, 22)), ('power 0.9', (23, 25))]",[],[],[],[]
hyperparameters,"We apply 400000 updates with batch size 8 for each database , with alternating updates between the databases .","[('apply', (1, 2)), ('with', (4, 5)), ('for', (8, 9)), ('with', (12, 13)), ('between', (15, 16))]","[('400000 updates', (2, 4)), ('batch size', (5, 7)), ('batch size 8', (5, 8)), ('8', (7, 8)), ('each database', (9, 11)), ('alternating updates', (13, 15)), ('databases', (17, 18))]",[],[],[],[]
ablation-analysis,"The accuracy steadily increases as we add more stages , and saturates after the third on LFPW and HELEN , which is a well - known behavior of cascaded models , showing that DeCaFA with weighted intermediate supervision indeed works as a cascade , by first providing coarse estimates and refining in the later stages .","[('add', (6, 7)), ('after', (12, 13)), ('on', (15, 16))]","[('accuracy', (1, 2)), ('steadily increases', (2, 4)), ('more stages', (7, 9)), ('saturates', (11, 12)), ('third', (14, 15)), ('LFPW and HELEN', (16, 19)), ('cascade', (42, 43))]",[],[],[],[]
ablation-analysis,"Coarsely annotated data ( 5 landmarks ) significantly helps the fine - grained landmark localization , as it is integrated a kind of weakly supervised scheme .","[('significantly helps', (7, 9))]","[('Coarsely annotated data ( 5 landmarks )', (0, 7)), ('fine - grained landmark localization', (10, 15))]",[],[],[],[]
ablation-analysis,"First , reinjecting the whole input image ( F 3 - Equation vs F 2 - Equation ) significantly improves the accuracy on challenging data such as 300 W - challenging or WFLW - pose , where the first cascade stages may commit errors .","[('reinjecting', (2, 3)), ('significantly improves', (18, 20)), ('on', (22, 23)), ('such as', (25, 27))]","[('whole input image ( F 3 - Equation vs F 2 - Equation )', (4, 18)), ('accuracy', (21, 22)), ('challenging data', (23, 25)), ('300 W - challenging', (27, 31)), ('WFLW - pose', (32, 35))]",[],[],[],[]
ablation-analysis,F 4 - Equation ( 7 ) and F 3 fusion ( cascaded models ) using local + global information rivals the basic deep approach F 1 - Equation ( 4 ) .,"[('using', (15, 16)), ('rivals', (20, 21))]","[('local + global information', (16, 20))]",[],[],[],[]
ablation-analysis,"Furthermore , F 5 - Equation fusion , which uses local and global cues is the best by a significant margin .","[('uses', (9, 10)), ('is', (14, 15)), ('by', (17, 18))]","[('F 5 - Equation fusion', (2, 7)), ('local and global cues', (10, 14)), ('best', (16, 17)), ('significant margin', (19, 21))]",[],[],[],[]
ablation-analysis,"Furthermore , chaining the transfer layers is better than using independant transfer layers : likewise , in such a case , the first transfer layer benefits from the gradients from the subsequents layer at train time .","[('chaining', (2, 3)), ('is', (6, 7)), ('better than using', (7, 10)), ('benefits from', (25, 27)), ('from', (29, 30)), ('at', (33, 34))]","[('transfer layers', (4, 6)), ('independant transfer layers', (10, 13)), ('first transfer layer', (22, 25)), ('gradients', (28, 29)), ('subsequents layer', (31, 33)), ('train time', (34, 36))]",[],[],[],[]
ablation-analysis,"Finally , shows a comparison of our method and state - of - the - art approaches on Celeb A .","[('of', (5, 6)), ('on', (17, 18))]","[('Celeb A', (18, 20))]",[],[],[],[]
ablation-analysis,"Overall , DeCaFA sets a new state - of - the - art on the three databases with several evaluation metrics .","[('sets', (3, 4)), ('on', (13, 14))]","[('DeCaFA', (2, 3)), ('new state - of - the - art', (5, 13)), ('three databases', (15, 17))]",[],[],[],[]
research-problem,Adaptive Wing Loss for Robust Face Alignment via Heatmap Regression,[],"[('Robust Face Alignment', (4, 7))]",[],[],[],[]
code,Code will be made publicly available at https://github.com/protossw512/AdaptiveWingLoss.,[],"[('https://github.com/protossw512/AdaptiveWingLoss.', (7, 8))]",[],[],[],[]
research-problem,"Face alignment , also known as facial landmark localization , seeks to localize pre-defined landmarks on human faces .",[],"[('Face alignment', (0, 2)), ('facial landmark localization', (6, 9))]",[],[],[],[]
model,"We thus propose a new loss function and name it Adaptive Wing loss ( Sec. , that is able to significantly improve the quality of heatmap regression results .","[('propose', (2, 3)), ('name', (8, 9)), ('able to', (18, 20))]","[('new loss function', (4, 7)), ('Adaptive Wing loss', (10, 13)), ('significantly improve', (20, 22)), ('heatmap regression results', (25, 28))]",[],[],[],[]
model,"Due to the translation invariance of the convolution operation in bottom - up and top - down CNN structures such as stacked Hourglass ( HG ) , the network is notable to capture coordinate information , which we believe is useful for facial landmark localization , since the structure of human faces is relatively stable .","[('of', (5, 6)), ('in', (9, 10)), ('such as', (19, 21))]","[('convolution operation', (7, 9)), ('bottom - up and top - down CNN structures', (10, 19)), ('stacked Hourglass ( HG )', (21, 26)), ('network', (28, 29)), ('coordinate information', (33, 35)), ('facial landmark localization', (42, 45))]",[],[],[],[]
model,"Inspired by the Coord - Conv layer proposed by Liu et al. , we encode into our model the full coordinate information and the information only on boundaries predicted from the previous HG module into our model .","[('encode into', (14, 16)), ('predicted from', (28, 30)), ('into', (34, 35))]","[('our model', (16, 18)), ('full coordinate information', (19, 22)), ('information', (24, 25)), ('boundaries', (27, 28)), ('previous HG module', (31, 34)), ('our model', (35, 37))]",[],[],[],[]
model,"To encode boundary coordinates , we also add a sub-task of boundary prediction by concatenating an additional boundary channel into the ground truth heatmap which is jointly trained with other channels .","[('To encode', (0, 2)), ('add', (7, 8)), ('of', (10, 11)), ('by concatenating', (13, 15)), ('into', (19, 20)), ('jointly trained with', (26, 29))]","[('boundary coordinates', (2, 4)), ('sub-task', (9, 10)), ('boundary prediction', (11, 13)), ('additional boundary channel', (16, 19)), ('ground truth heatmap', (21, 24)), ('other channels', (29, 31))]",[],[],[],[]
hyperparameters,"During training , we use RM - SProp with an initial learning rate of 1 10 ?4 .","[('During', (0, 1)), ('use', (4, 5)), ('with', (8, 9)), ('of', (13, 14))]","[('training', (1, 2)), ('RM - SProp', (5, 8)), ('initial learning rate', (10, 13)), ('1 10 ?4', (14, 17))]",[],[],[],[]
hyperparameters,We set the momentum to be 0 ( adopted from ) and the weight decay to be 1 10 ?5 .,"[('set', (1, 2)), ('to be', (4, 6)), ('to be', (15, 17))]","[('momentum', (3, 4)), ('0', (6, 7)), ('weight decay', (13, 15)), ('1 10 ?5', (17, 20))]",[],[],[],[]
hyperparameters,"We train for 240 epoches , and the learning rate is reduced to 1 10 ?5 and 1 10 ? 6 after 80 and 160 epoches .","[('train for', (1, 3)), ('reduced to', (11, 13)), ('after', (21, 22))]","[('240 epoches', (3, 5)), ('learning rate', (8, 10)), ('1 10 ?5 and 1 10 ? 6', (13, 21)), ('80 and 160 epoches', (22, 26))]",[],[],[],[]
hyperparameters,"Data augmentation is performed with random rotation ( 50 ) , translation ( 25 px ) , flipping ( 50 % ) , and rescaling ( 15 % ) .","[('performed with', (3, 5))]","[('Data augmentation', (0, 2)), ('random rotation', (5, 7)), ('translation', (11, 12)), ('flipping', (17, 18)), ('rescaling', (24, 25)), ('15 % )', (26, 29))]",[],[],[],[]
hyperparameters,"Random Gaussian blur , noise and occlusion are also used .",[],"[('Random Gaussian blur , noise and occlusion', (0, 7))]",[],[],[],[]
results,Evaluation on 300W,"[('Evaluation on', (0, 2))]","[('300W', (2, 3))]",[],[],[],[]
results,"Our method is able to achieve the state - of - the - art performance on the 300W testing dataset , see .","[('able to achieve', (3, 6)), ('on', (15, 16))]","[('Our method', (0, 2)), ('state - of - the - art performance', (7, 15)), ('300W testing dataset', (17, 20))]",[],[],[],[]
results,"For the challenge subset ( iBug dataset ) , we are able to outperform","[('For', (0, 1)), ('able to', (11, 13))]","[('challenge subset ( iBug dataset )', (2, 8)), ('outperform', (13, 14))]",[],[],[],[]
results,"Wing by a significant margin , which also proves the robustness of our approach against occlusion and large pose variation .","[('Wing by', (0, 2)), ('proves', (8, 9)), ('of', (11, 12)), ('against', (14, 15))]","[('significant margin', (3, 5)), ('robustness', (10, 11)), ('our approach', (12, 14)), ('occlusion and large pose variation', (15, 20))]",[],[],[],[]
results,"Furthermore , on the 300 W private test dataset ) , we again outperform the previous state - of - theart on variant metrics including NME , AUC and FR measured with either 8 % NME and 10 % NME .","[('on', (2, 3)), ('outperform', (13, 14)), ('on', (21, 22)), ('including', (24, 25)), ('measured with', (30, 32))]","[('300 W private test dataset', (4, 9)), ('previous state - of - theart', (15, 21)), ('variant metrics', (22, 24)), ('NME', (25, 26)), ('8 % NME', (33, 36))]",[],[],[],[]
results,Evaluation on WFLW,[],"[('WFLW', (2, 3))]",[],[],[],[]
results,"Our method again achieves the best results on the WFLW dataset in , which is significantly more difficult than COFW and 300W ( see for visualizations ) .","[('achieves', (3, 4)), ('on', (7, 8)), ('than', (18, 19))]","[('Our method', (0, 2)), ('best results', (5, 7)), ('WFLW dataset', (9, 11)), ('significantly more difficult', (15, 18)), ('COFW and 300W', (19, 22))]",[],[],[],[]
results,On every subset we outperform the previous state - of - the - art ap - :,"[('On', (0, 1)), ('outperform', (4, 5))]","[('every subset', (1, 3)), ('previous state - of - the - art', (6, 14))]",[],[],[],[]
results,"All in all , our approach fails on only 2.84 % of all images , more than a two times improvement compared with 7.6 .","[('on', (7, 8)), ('of', (11, 12)), ('compared with', (21, 23))]","[('our approach', (4, 6)), ('fails', (6, 7)), ('2.84 %', (9, 11)), ('all images', (12, 14)), ('two times improvement', (18, 21)), ('7.6', (23, 24))]",[],[],[],[]
research-problem,Facial Landmarks Detection by Self - Iterative Regression based Landmarks - Attention Network,[],"[('Facial Landmarks Detection', (0, 3))]",[],[],[],[]
model,"In this paper , we develop a Self - Iterative Regression ( SIR ) framework to solve the above issues .","[('develop', (5, 6))]","[('Self - Iterative Regression ( SIR ) framework', (7, 15))]",[],[],[],[]
model,"By means of the powerful representation of Convolutional Neural Network ( CNN ) , we only train one regressor to learn the descent directions in coarse and fine stages together .","[('By means of', (0, 3)), ('of', (6, 7)), ('train', (16, 17)), ('to learn', (19, 21)), ('in', (24, 25))]","[('powerful representation', (4, 6)), ('Convolutional Neural Network ( CNN )', (7, 13)), ('one regressor', (17, 19)), ('descent directions', (22, 24)), ('coarse and fine stages', (25, 29))]",[],[],[],[]
model,"Moreover , to obtain discriminative landmarks features , we proposed a Landmarks - Attention Network ( LAN ) , which focuses on the appearance around landmarks .","[('to obtain', (2, 4)), ('proposed', (9, 10)), ('focuses on', (20, 22)), ('around', (24, 25))]","[('discriminative landmarks features', (4, 7)), ('Landmarks - Attention Network ( LAN )', (11, 18)), ('appearance', (23, 24)), ('landmarks', (25, 26))]",[],[],[],[]
model,"It first concurrently extracts local landmarks ' features and then obtains the holistic increment , which significantly reduces the dimension of the final feature layer and the number of model parameters .","[('concurrently extracts', (2, 4)), ('obtains', (10, 11)), ('significantly reduces', (16, 18)), ('of', (20, 21))]","[(""local landmarks ' features"", (4, 8)), ('holistic increment', (12, 14)), ('dimension', (19, 20)), ('final feature layer', (22, 25)), ('number of model parameters', (27, 31))]",[],[],[],[]
experimental-setup,"We perform the experiments based on a machine with Core i7 - 5930 k CPU , 32 GB memory and GTX 1080 GPU with 8G video memory .","[('based on', (4, 6)), ('with', (8, 9)), ('with', (23, 24))]","[('machine', (7, 8)), ('Core i7 - 5930 k CPU', (9, 15)), ('32 GB memory', (16, 19)), ('GTX 1080 GPU', (20, 23)), ('8G video memory', (24, 27))]",[],[],[],[]
experimental-setup,The detected faces are resized into 256 256 and the location patch size is 57 57 .,"[('resized into', (4, 6)), ('is', (13, 14))]","[('detected faces', (1, 3)), ('256 256', (6, 8)), ('location patch size', (10, 13)), ('57 57', (14, 16))]",[],[],[],[]
experimental-setup,"For CNN structure , the Rectified Linear Unit ( ReLU ) is adopted as the activation function , and the optimizer is the Adadelta ( Zeiler 2012 ) approach , learning rate is set to 0.1 and weight decay is set to 1 e ?","[('For', (0, 1)), ('adopted as', (12, 14)), ('is', (21, 22)), ('set to', (33, 35)), ('set to', (40, 42))]","[('CNN structure', (1, 3)), ('Rectified Linear Unit ( ReLU )', (5, 11)), ('activation function', (15, 17)), ('optimizer', (20, 21)), ('Adadelta ( Zeiler 2012 ) approach', (23, 29)), ('learning rate', (30, 32)), ('0.1', (35, 36)), ('weight decay', (37, 39)), ('1', (42, 43))]",[],[],[],[]
experimental-setup,4 . Training the CNN requires around 2 days .,"[('Training', (2, 3)), ('requires', (5, 6))]","[('CNN', (4, 5)), ('around 2 days', (6, 9))]",[],[],[],[]
results,The NME results shows that SIR performs comparatively with RAR ) and outperform other existing methods .,"[('shows', (3, 4)), ('performs', (6, 7)), ('comparatively with', (7, 9)), ('outperform', (12, 13))]","[('NME results', (1, 3)), ('SIR', (5, 6)), ('RAR', (9, 10)), ('other existing methods', (13, 16))]",[],[],[],[]
results,"In the more challenging IBUG subset , our method achieves robust performance in large pose , expression and illumination environment .","[('In', (0, 1)), ('achieves', (9, 10)), ('in', (12, 13))]","[('more challenging IBUG subset', (2, 6)), ('our method', (7, 9)), ('robust performance', (10, 12)), ('large pose , expression and illumination environment', (13, 20))]",[],[],[],[]
results,"As shown in , the SIR method outperform the state - of - the - art methods according to the CED curve .","[('outperform', (7, 8)), ('according to', (17, 19))]","[('SIR method', (5, 7)), ('state - of - the - art methods', (9, 17)), ('CED curve', (20, 22))]",[],[],[],[]
research-problem,Look at Boundary : A Boundary - Aware Face Alignment Algorithm,[],[],[],[],[],[]
code,Dataset and model will be publicly available at https://wywu.github.io/projects/LAB/LAB.html,[],"[('https://wywu.github.io/projects/LAB/LAB.html', (8, 9))]",[],[],[],[]
research-problem,"Face alignment , which refers to facial landmark detection in this work , serves as a key step for many face applications , e.g. , face recognition , face verification and face frontalisation .",[],"[('Face alignment', (0, 2))]",[],[],[],[]
approach,"To this end , we use well - defined facial boundaries to represent the geometric structure of the human face .","[('use', (5, 6)), ('to represent', (11, 13)), ('of', (16, 17))]","[('well - defined facial boundaries', (6, 11)), ('geometric structure', (14, 16)), ('human face', (18, 20))]",[],[],[],[]
approach,"In this work , we represent facial structure using 13 boundary lines .","[('represent', (5, 6)), ('using', (8, 9))]","[('facial structure', (6, 8)), ('13 boundary lines', (9, 12))]",[],[],[],[]
approach,Our boundary - aware face alignment algorithm contains two stages .,"[('contains', (7, 8))]","[('boundary - aware face alignment algorithm', (1, 7)), ('two stages', (8, 10))]",[],[],[],[]
approach,We first estimate facial boundary heatmaps and then regress landmarks with the help of boundary heatmaps .,"[('estimate', (2, 3)), ('with', (10, 11))]","[('facial boundary heatmaps', (3, 6)), ('regress', (8, 9)), ('landmarks', (9, 10)), ('boundary heatmaps', (14, 16))]",[],[],[],[]
approach,"To explore the relationship between facial boundaries and landmarks , we introduce adversarial learning ideas by using a landmark - based boundary effectiveness discriminator .","[('introduce', (11, 12)), ('by using', (15, 17))]","[('adversarial learning ideas', (12, 15)), ('landmark - based boundary effectiveness discriminator', (18, 24))]",[],[],[],[]
approach,"The boundary heatmap estimator , landmark regressor , and boundary effectiveness discriminator can be jointly learned in an end - to - end manner .","[('in', (16, 17))]","[('boundary heatmap estimator', (1, 4)), ('boundary effectiveness discriminator', (9, 12)), ('jointly learned', (14, 16)), ('end - to - end manner', (18, 24))]",[],[],[],[]
approach,We used stacked hourglass structure to estimate facial boundary heatmap and model the structure between facial boundaries through message passing to increase its robustness to occlusion .,"[('used', (1, 2)), ('to estimate', (5, 7)), ('model', (11, 12)), ('between', (14, 15)), ('through', (17, 18)), ('to increase', (20, 22)), ('to', (24, 25))]","[('stacked hourglass structure', (2, 5)), ('facial boundary heatmap', (7, 10)), ('structure', (13, 14)), ('facial boundaries', (15, 17)), ('message passing', (18, 20)), ('robustness', (23, 24)), ('occlusion', (25, 26))]",[],[],[],[]
approach,The boundary heatmaps serve as structure cue to guide feature learning for the landmark regressor .,"[('serve as', (3, 5)), ('to guide', (7, 9)), ('for', (11, 12))]","[('boundary heatmaps', (1, 3)), ('structure cue', (5, 7)), ('feature learning', (9, 11)), ('landmark regressor', (13, 15))]",[],[],[],[]
experimental-setup,All our models are trained with Caffe [ 24 ] on 4 Titan X GPUs .,"[('trained with', (4, 6)), ('on', (10, 11))]","[('4 Titan X GPUs', (11, 15))]",[],[],[],[]
results,Comparison with existing approaches 4.1.1 Evaluation on 300W,[],"[('300W', (7, 8))]",[],[],[],[]
results,Our method performs best among all of the state - of - the - art methods .,"[('performs', (2, 3)), ('among', (4, 5))]","[('Our method', (0, 2)), ('best', (3, 4)), ('all of the state - of - the - art methods', (5, 16))]",[],[],[],[]
results,Evaluation on WFLW,[],"[('WFLW', (2, 3))]",[],[],[],[]
results,"Though reasonable performance is obtained , there is illustrated to be still a lot of room for improvement for the extreme diversity of samples on WFLW , e.g. , large pose , exaggerated expressions and heavy occlusion .","[('for', (18, 19)), ('on', (24, 25))]","[('improvement', (17, 18)), ('extreme diversity of samples', (20, 24)), ('WFLW', (25, 26))]",[],[],[],[]
results,Cross - dataset evaluation on COFW and AFLW,[],"[('Cross - dataset evaluation', (0, 4)), ('COFW and AFLW', (5, 8))]",[],[],[],[]
results,Our model outperforms previous results with a large margin .,"[('outperforms', (2, 3)), ('with', (5, 6))]","[('Our model', (0, 2)), ('previous results', (3, 5)), ('large margin', (7, 9))]",[],[],[],[]
results,We achieve 4.62 % mean error with 2.17 % failure rate .,"[('achieve', (1, 2)), ('with', (6, 7))]","[('4.62 % mean error', (2, 6)), ('2.17 % failure rate', (7, 11))]",[],[],[],[]
results,"The failure rate is significantly reduced by 3.75 % , which indicates the robustness of our method to handle occlusions .","[('significantly reduced by', (4, 7))]","[('failure rate', (1, 3)), ('3.75 %', (7, 9))]",[],[],[],[]
results,"Moreover , our method uses boundary information achieves 29 % , 32 % and 29 % relative performance improve- ment over the baseline method ( "" LAB without boundary "" ) on COFW - 29 , AFLW - Full and AFLW - Frontal respectively .","[('uses', (4, 5)), ('achieves', (7, 8)), ('over', (20, 21)), ('on', (31, 32))]","[('our method', (2, 4)), ('boundary information', (5, 7)), ('29 % , 32 % and 29 % relative performance improve- ment', (8, 20)), ('baseline method', (22, 24))]",[],[],[],[]
ablation-analysis,"It can be observed easily that boundary map ( "" BM "" ) is the most effective one .","[('observed', (3, 4)), ('is', (13, 14))]","[('boundary map ( "" BM "" )', (6, 13)), ('most effective one', (15, 18))]",[],[],[],[]
ablation-analysis,Boundary information fusion is one of the key steps in our algorithm .,[],"[('Boundary information fusion', (0, 3))]",[],[],[],[]
ablation-analysis,"As indicated in , our final model that fuses boundary information in all four levels improves mean error from 7.12 % to 6.13 % .","[('fuses', (8, 9)), ('in', (11, 12)), ('improves', (15, 16)), ('from', (18, 19))]","[('boundary information', (9, 11)), ('all four levels', (12, 15)), ('mean error', (16, 18)), ('7.12 %', (19, 21))]",[],[],[],[]
ablation-analysis,It can be observed that performance is improved consistently by fusing boundary heatmaps at more levels .,"[('observed that', (3, 5)), ('by fusing', (9, 11)), ('at', (13, 14))]","[('performance', (5, 6)), ('improved consistently', (7, 9)), ('boundary heatmaps', (11, 13)), ('more levels', (14, 16))]",[],[],[],[]
results,"The comparison between "" BL + HG "" and "" BL + HG/ B "" indicates the effectiveness of boundary information fusion rather than network structure changes .","[('between', (2, 3)), ('indicates', (15, 16)), ('of', (18, 19)), ('rather than', (22, 24))]","[('comparison', (1, 2)), ('effectiveness', (17, 18)), ('boundary information fusion', (19, 22)), ('network structure changes', (24, 27))]",[],[],[],[]
results,"The comparison between "" BL + HG "" and "" BL + CL "" indicates the effectiveness of the using hourglass structure design .","[('between', (2, 3)), ('indicates', (14, 15)), ('of', (17, 18))]","[('comparison', (1, 2)), ('effectiveness', (16, 17)), ('using hourglass structure design', (19, 23))]",[],[],[],[]
research-problem,Message passing plays a vital role for heatmap quality improvement when severe occlusions happen .,[],"[('Message passing', (0, 2)), ('heatmap quality improvement', (7, 10))]",[],[],[],[]
results,Adversarial learning further improves the quality and effectiveness of boundary heatmaps .,"[('improves', (3, 4)), ('of', (8, 9))]","[('Adversarial learning', (0, 2)), ('quality and effectiveness', (5, 8)), ('boundary heatmaps', (9, 11))]",[],[],[],[]
research-problem,Face Alignment using a 3D Deeply - initialized Ensemble of Regression Trees,[],"[('Face Alignment', (0, 2))]",[],[],[],[]
model,"In this paper we present the 3 DDE ( 3D Deeply - initialized Ensemble ) regressor , a robust and efficient face alignment algorithm based on a coarse - to - fine cascade of ERTs .","[('present', (4, 5)), ('based on', (24, 26))]","[('3 DDE ( 3D Deeply - initialized Ensemble ) regressor', (6, 16)), ('robust and efficient face alignment algorithm', (18, 24)), ('coarse - to - fine cascade of ERTs', (27, 35))]",[],[],[],[]
model,It is initialized by robustly fitting a 3 D face model to the probability maps produced by a CNN .,"[('initialized by', (2, 4)), ('to', (11, 12)), ('produced by', (15, 17))]","[('robustly fitting', (4, 6)), ('3 D face model', (7, 11)), ('probability maps', (13, 15)), ('CNN', (18, 19))]",[],[],[],[]
model,"On the other hand , the ERT implicitly imposes a prior face shape on the solution , addressing the shortcomings of deep models when occlusions and ambiguous face configurations are present .","[('implicitly imposes', (7, 9)), ('on', (13, 14)), ('addressing', (17, 18)), ('of', (20, 21)), ('when', (23, 24))]","[('ERT', (6, 7)), ('prior face shape', (10, 13)), ('solution', (15, 16)), ('shortcomings', (19, 20)), ('deep models', (21, 23))]",[],[],[],[]
model,"Finally , its coarse - to - fine structure tackles the combinatorial explosion of parts deformation , which is also a key limitation of approaches using shape constraints .","[('tackles', (9, 10)), ('of', (13, 14))]","[('coarse - to - fine structure', (3, 9)), ('combinatorial explosion', (11, 13)), ('parts deformation', (14, 16))]",[],[],[],[]
model,First we improve the initialization by using a RANSAC - like procedure that increases its robustness in the presence of occlusions .,"[('improve', (2, 3)), ('by using', (5, 7)), ('increases', (13, 14)), ('in', (16, 17))]","[('initialization', (4, 5)), ('RANSAC - like procedure', (8, 12)), ('robustness', (15, 16)), ('occlusions', (20, 21))]",[],[],[],[]
model,We have also introduced early stopping and better data augmentation techniques for increasing the regularization when training both the ERT and the CNN .,"[('introduced', (3, 4)), ('for increasing', (11, 13)), ('when training', (15, 17))]","[('early stopping', (4, 6)), ('early stopping and better data augmentation techniques', (4, 11)), ('regularization', (14, 15)), ('ERT and the CNN', (19, 23))]",[],[],[],[]
experimental-setup,"We use Adam stochastic optimization with ? 1 = 0.9 , ? 2 = 0.999 and = 1 e ? 8 parameters .","[('use', (1, 2)), ('with', (5, 6))]","[('Adam stochastic optimization', (2, 5)), ('? 1 = 0.9 , ? 2 = 0.999 and = 1 e ? 8 parameters', (6, 22))]",[],[],[],[]
experimental-setup,We train until convergence with an initial learning rate ? = 0.001 .,"[('train', (1, 2)), ('with', (4, 5))]","[('until convergence', (2, 4)), ('convergence', (3, 4)), ('initial learning rate ? = 0.001', (6, 12))]",[],[],[],[]
experimental-setup,"When validation error levels out for 10 epochs , we multiply the learning rate by decay = 0.05 .","[('When', (0, 1)), ('levels out for', (3, 6)), ('multiply', (10, 11)), ('by', (14, 15))]","[('validation error', (1, 3)), ('10 epochs', (6, 8)), ('learning rate', (12, 14)), ('decay = 0.05', (15, 18))]",[],[],[],[]
experimental-setup,We apply batch normalization after each convolution .,"[('apply', (1, 2)), ('after', (4, 5))]","[('batch normalization', (2, 4)), ('each convolution', (5, 7))]",[],[],[],[]
experimental-setup,All layers contain 68 filters to describe the required landmark features .,"[('contain', (2, 3)), ('to describe', (5, 7))]","[('All layers', (0, 2)), ('68 filters', (3, 5)), ('required landmark features', (8, 11))]",[],[],[],[]
experimental-setup,"We apply a Gaussian filter with ? = 33 to the output probability maps to stabilize the initialization , g 0 .","[('apply', (1, 2)), ('with', (5, 6)), ('to', (9, 10)), ('to stabilize', (14, 16))]","[('Gaussian filter', (3, 5)), ('? = 33', (6, 9)), ('output probability maps', (11, 14)), ('initialization', (17, 18)), ('initialization , g 0', (17, 21))]",[],[],[],[]
experimental-setup,We train the coarse - to - fine ERT with the Gradient Boosting algorithm ) .,"[('train', (1, 2)), ('with', (9, 10))]","[('coarse - to - fine ERT', (3, 9)), ('Gradient Boosting algorithm', (11, 14))]",[],[],[],[]
experimental-setup,It requires a maximum of T = 20 stages of K = 50 regression trees per stage .,"[('requires', (1, 2)), ('of', (9, 10))]","[('maximum of T = 20 stages', (3, 9)), ('K = 50 regression trees per stage', (10, 17))]",[],[],[],[]
experimental-setup,The depth of trees is set to 4 .,"[('of', (2, 3)), ('set to', (5, 7))]","[('depth', (1, 2)), ('trees', (3, 4)), ('4', (7, 8))]",[],[],[],[]
experimental-setup,"The number of tests to choose the best split parameters , ? , is set to 200 .","[('to choose', (4, 6)), ('set to', (14, 16))]","[('number of tests', (1, 4)), ('best split parameters', (7, 10)), ('200', (16, 17))]",[],[],[],[]
experimental-setup,We resize each image to set the face size to 160160 pixels .,"[('resize', (1, 2)), ('to set', (4, 6)), ('to', (9, 10))]","[('each image', (2, 4)), ('face size', (7, 9)), ('160160 pixels', (10, 12))]",[],[],[],[]
experimental-setup,We generate Z = 25 initializations in the robust soft POSIT scheme of g 0 .,"[('generate', (1, 2)), ('in', (6, 7)), ('of', (12, 13))]","[('Z = 25 initializations', (2, 6)), ('robust soft POSIT scheme', (8, 12)), ('g 0', (13, 15))]",[],[],[],[]
experimental-setup,"We augment the shapes of each face training image to create a set , SA , of at least N A = 60000 samples to train the cascade .","[('augment', (1, 2)), ('of', (4, 5)), ('to create', (9, 11)), ('of', (16, 17)), ('to train', (24, 26))]","[('shapes', (3, 4)), ('each face training image', (5, 9)), ('set', (12, 13)), ('SA', (14, 15)), ('at least N A = 60000 samples', (17, 24)), ('cascade', (27, 28))]",[],[],[],[]
experimental-setup,To avoid overfitting we use a shrinkage factor ? = 0.1 and subsampling factor ? = 0.5 in the ERT .,"[('To avoid', (0, 2)), ('use', (4, 5)), ('in', (17, 18))]","[('overfitting', (2, 3)), ('subsampling factor ? = 0.5', (12, 17)), ('ERT', (19, 20))]",[],[],[],[]
experimental-setup,"Training the CNN and the coarse - to - fine ensemble of trees takes 48 hours using a NVidia GeForce GTX 1080 Ti ( 11 GB ) GPU and an dual Intel Xeon Silver 4114 CPU at 2.20 GHz ( 210 cores / 20 threads , 128 GB of RAM ) with a batch size of 32 images .","[('Training', (0, 1)), ('takes', (13, 14)), ('using', (16, 17)), ('at', (36, 37)), ('with', (51, 52)), ('of', (55, 56))]","[('CNN and the coarse - to - fine ensemble of trees', (2, 13)), ('48 hours', (14, 16)), ('NVidia GeForce GTX 1080 Ti ( 11 GB ) GPU', (18, 28)), ('dual Intel Xeon Silver 4114 CPU', (30, 36)), ('2.20 GHz', (37, 39)), ('batch size', (53, 55)), ('32 images', (56, 58))]",[],[],[],[]
results,"Overall , 3 DDE is better than any other providing a public implementation in the literature .","[('is', (4, 5)), ('better than', (5, 7)), ('providing', (9, 10))]","[('3 DDE', (2, 4)), ('any other', (7, 9)), ('public implementation', (11, 13))]",[],[],[],[]
results,"In general we are able to improve by a large margin other ERT methods as RCPR , ERT or c GPRT because of the better initialization and the robust features provided by the CNN .","[('able to', (4, 6)), ('by', (7, 8)), ('as', (14, 15))]","[('improve', (6, 7)), ('large margin', (9, 11)), ('other ERT methods', (11, 14)), ('RCPR', (15, 16)), ('ERT', (17, 18)), ('c GPRT', (19, 21))]",[],[],[],[]
results,"We also outperform RCN ( without any denoising model ) , a CNN architecture like the one used in 3DDE .","[('outperform', (2, 3))]","[('RCN', (3, 4)), ('CNN architecture', (12, 14))]",[],[],[],[]
results,"Even DAN and LAB , that implement a cascade of CNN regressors , can not compete with the regularization obtained by using the cascade of ERT in 3 DDE ( see ) .","[('implement', (6, 7)), ('obtained by using', (19, 22)), ('in', (26, 27))]","[('DAN and LAB', (1, 4)), ('cascade of CNN regressors', (8, 12)), ('regularization', (18, 19)), ('cascade of ERT', (23, 26)), ('3 DDE', (27, 29))]",[],[],[],[]
results,Our approach obtains the best overall performance in the indoor and outdoor subsets of the private competition ( see ) and in the full subset of the 300W public test set ( see ) .,"[('obtains', (2, 3)), ('in', (7, 8)), ('of', (13, 14)), ('in', (21, 22)), ('of', (25, 26))]","[('Our approach', (0, 2)), ('best overall performance', (4, 7)), ('indoor and outdoor subsets', (9, 13)), ('private competition', (15, 17)), ('full subset', (23, 25)), ('300W public test set', (27, 31))]",[],[],[],[]
results,"In the challenging subset of the 300W public competition , SHN gets better results than 3DDE .","[('In', (0, 1)), ('of', (4, 5)), ('gets', (11, 12)), ('than', (14, 15))]","[('challenging subset', (2, 4)), ('300W public competition', (6, 9)), ('SHN', (10, 11)), ('better results', (12, 14)), ('3DDE', (15, 16))]",[],[],[],[]
ablation-analysis,"When combined with the cascaded ERT , the 3D initialization is key to achieve top overall performance , see CNN + MS + DE vs CNN + 3D + DE in the full subset .","[('combined with', (1, 3)), ('to achieve', (12, 14)), ('see', (18, 19)), ('in', (30, 31))]","[('cascaded ERT', (4, 6)), ('3D initialization', (8, 10)), ('key', (11, 12)), ('top overall performance', (14, 17)), ('CNN + MS + DE', (19, 24)), ('CNN + 3D + DE', (25, 30)), ('full subset', (32, 34))]",[],[],[],[]
ablation-analysis,"Of course , the 3D initialization is fundamental to achieve good performance in presence of large face rotations .","[('in presence of', (12, 15))]","[('3D initialization', (4, 6)), ('good performance', (10, 12)), ('large face rotations', (15, 18))]",[],[],[],[]
ablation-analysis,"The large receptive fields of CNNs are specially helpful in challenging situations , specifically those in the pose and occlusion subsets .","[('of', (4, 5)), ('in', (9, 10))]","[('large receptive fields', (1, 4)), ('CNNs', (5, 6)), ('specially helpful', (7, 9)), ('challenging situations', (10, 12)), ('pose and occlusion subsets', (17, 21))]",[],[],[],[]
ablation-analysis,"The coarse - to - fine strategy in our cascaded ERT provides significative local improvements in difficult cases , with rare facial part combinations ( see ) .","[('in', (7, 8)), ('provides', (11, 12)), ('in', (15, 16)), ('with', (19, 20))]","[('coarse - to - fine strategy', (1, 7)), ('significative local improvements', (12, 15)), ('difficult cases', (16, 18)), ('rare facial part combinations', (20, 24))]",[],[],[],[]
research-problem,Joint 3D Face Reconstruction and Dense Alignment with Position Map Regression Network,[],"[('Joint 3D Face Reconstruction and Dense Alignment', (0, 7))]",[],[],[],[]
code,Code is available at https://github.com/YadiraF/PRNet.,[],"[('https://github.com/YadiraF/PRNet.', (4, 5))]",[],[],[],[]
research-problem,3 D face reconstruction and face alignment are two fundamental and highly related topics in computer vision .,[],[],[],[],[],[]
model,"In this paper , we propose an end - to - end method called Position map Regression Network ( PRN ) to jointly predict dense alignment and reconstruct 3 D face shape .","[('propose', (5, 6)), ('called', (13, 14)), ('to jointly predict', (21, 24))]","[('end - to - end method', (7, 13)), ('Position map Regression Network ( PRN )', (14, 21)), ('dense alignment', (24, 26)), ('3 D face shape', (28, 32))]",[],[],[],[]
model,"Specifically , we design a UV position map , which is a 2D image recording the 3D coordinates of a complete facial point cloud , and at the same time keeping the semantic meaning at each UV place .","[('design', (3, 4)), ('is', (10, 11)), ('recording', (14, 15)), ('of', (18, 19)), ('keeping', (30, 31)), ('at', (34, 35))]","[('UV position map', (5, 8)), ('2D image', (12, 14)), ('3D coordinates', (16, 18)), ('complete facial point cloud', (20, 24)), ('semantic meaning', (32, 34)), ('each UV place', (35, 38))]",[],[],[],[]
model,We then train a simple encoder - decoder network with a weighted loss that focuses more on discriminative region to regress the UV position map from a single 2 D facial image .,"[('train', (2, 3)), ('with', (9, 10)), ('focuses more on', (14, 17)), ('more on', (15, 17)), ('to regress', (19, 21)), ('from', (25, 26))]","[('simple encoder - decoder network', (4, 9)), ('weighted loss', (11, 13)), ('focuses', (14, 15)), ('discriminative region', (17, 19)), ('UV position map', (22, 25)), ('single 2 D facial image', (27, 32))]",[],[],[],[]
experimental-setup,"For optimization , we use Adam optimizer with a learning rate begins at 0.0001 and decays half after each 5 epochs .","[('For', (0, 1)), ('use', (4, 5)), ('with', (7, 8)), ('begins at', (11, 13)), ('after', (17, 18))]","[('optimization', (1, 2)), ('Adam optimizer', (5, 7)), ('learning rate', (9, 11)), ('0.0001', (13, 14)), ('decays', (15, 16)), ('half', (16, 17)), ('each 5 epochs', (18, 21))]",[],[],[],[]
experimental-setup,The batch size is set as 16 .,"[('set as', (4, 6))]","[('batch size', (1, 3)), ('16', (6, 7))]",[],[],[],[]
experimental-setup,All of our training codes are implemented with TensorFlow .,"[('implemented with', (6, 8))]","[('training codes', (3, 5)), ('TensorFlow', (8, 9))]",[],[],[],[]
results,3D Face Alignment,[],"[('3D Face Alignment', (0, 3))]",[],[],[],[]
results,"As shown in figure 5 , our result slightly outperforms the state - of - the - art method 3D - FAN when calculating per distance with 2D coordinates .","[('when calculating', (22, 24)), ('with', (26, 27))]","[('our result', (6, 8)), ('slightly outperforms', (8, 10)), ('state - of - the - art method 3D - FAN', (11, 22)), ('per distance', (24, 26)), ('2D coordinates', (27, 29))]",[],[],[],[]
results,"When considering the depth value , the performance discrepancy between our method and 3D - FAN increases .","[('between', (9, 10))]","[('depth value', (3, 5)), ('performance discrepancy', (7, 9)), ('our method and 3D - FAN', (10, 16)), ('increases', (16, 17))]",[],[],[],[]
results,The result shows that our method is robust to the change of pose and datasets .,"[('shows that', (2, 4)), ('robust to', (7, 9))]","[('our method', (4, 6)), ('change of pose and datasets', (10, 15))]",[],[],[],[]
results,Examples from AFLW2000 - 3 D dataset show that our predictions are more accurate than ground truth in some cases .,"[('from', (1, 2)), ('show', (7, 8)), ('are', (11, 12)), ('than', (14, 15)), ('in', (17, 18))]","[('AFLW2000 - 3 D dataset', (2, 7)), ('our predictions', (9, 11)), ('more accurate', (12, 14)), ('ground truth', (15, 17)), ('some cases', (18, 20))]",[],[],[],[]
results,"As shown in figure 7 , our method outperforms the best methods with a large margin of more than 27 % on both 2 D and 3D coordinates . : CED curves on AFLW2000 - 3D .","[('outperforms', (8, 9)), ('with', (12, 13)), ('of', (16, 17)), ('on', (21, 22))]","[('our method', (6, 8)), ('best methods', (10, 12)), ('large margin', (14, 16)), ('more than 27 %', (17, 21)), ('2 D and 3D coordinates', (23, 28)), ('AFLW2000 - 3D', (33, 36))]",[],[],[],[]
ablation-analysis,Network trained without using weight mask has worst performance compared with other two settings .,"[('Network trained without using', (0, 4)), ('trained without using', (1, 4)), ('compared with', (9, 11))]","[('Network', (0, 1)), ('weight mask', (4, 6)), ('worst performance', (7, 9)), ('other two settings', (11, 14))]",[],[],[],[]
ablation-analysis,"By adding weights to specific regions such as 68 facial landmarks or central face region , weight ratio 3 shows considerable improvement on 68 points datasets over weight ratio 2 .","[('adding', (1, 2)), ('to', (3, 4)), ('such as', (6, 8)), ('shows', (19, 20)), ('on', (22, 23)), ('over', (26, 27))]","[('weights', (2, 3)), ('specific regions', (4, 6)), ('68 facial landmarks', (8, 11)), ('central face region', (12, 15)), ('weight ratio', (16, 18)), ('considerable improvement', (20, 22)), ('68 points datasets', (23, 26)), ('weight ratio', (27, 29))]",[],[],[],[]
research-problem,Joint 3D Face Reconstruction and Dense Face Alignment from A Single Image with 2D - Assisted Self - Supervised Learning,[],"[('Joint 3D Face Reconstruction and Dense Face Alignment', (0, 8))]",[],[],[],[]
research-problem,3 D face reconstruction from a single 2D image is a challenging problem with broad applications .,[],[],[],[],[],[]
research-problem,3 D face reconstruction from a single 2D image is a challenging problem with broad applications .,[],[],[],[],[],[]
research-problem,3 D face reconstruction is an important task in the field of computer vision and graphics .,[],"[('3 D face reconstruction', (0, 4))]",[],[],[],[]
model,"In order to overcome the intrinsic limitation of existing 3 D face recovery models , we propose a novel learning method that leverages 2D "" in - the - wild "" face images to effectively supervise and facilitate the 3D face model learning .","[('propose', (16, 17)), ('leverages', (22, 23)), ('to effectively supervise and facilitate', (33, 38))]","[('novel learning method', (18, 21)), ('2D "" in - the - wild "" face images', (23, 33)), ('3D face model learning', (39, 43))]",[],[],[],[]
model,We design a novel self - supervised learning method that is able to train a 3 D face model with weak supervision from 2D images .,"[('design', (1, 2)), ('able to train', (11, 14)), ('with', (19, 20)), ('from', (22, 23))]","[('novel self - supervised learning method', (3, 9)), ('3 D face model', (15, 19)), ('weak supervision', (20, 22)), ('2D images', (23, 25))]",[],[],[],[]
model,The model should be able to recover 2D landmarks from predicted 3D ones via direct 3D - to - 2D projection .,"[('able to recover', (4, 7)), ('from', (9, 10)), ('via', (13, 14))]","[('2D landmarks', (7, 9)), ('predicted 3D ones', (10, 13)), ('direct 3D - to - 2D projection', (14, 21))]",[],[],[],[]
model,"Additionally , our proposed method also exploits cycle - consistency over the 2D landmark predictions , i.e. , taking the recovered 2D landmarks as input , the model should be able to generate 2D landmarks ( by projecting its predicted 3D landmarks ) that have small difference with the annotated ones .","[('exploits', (6, 7)), ('over', (10, 11)), ('taking', (18, 19)), ('with', (47, 48))]","[('cycle - consistency', (7, 10)), ('2D landmark predictions', (12, 15)), ('recovered 2D landmarks', (20, 23)), ('2D landmarks', (33, 35)), ('small difference', (45, 47)), ('annotated ones', (49, 51))]",[],[],[],[]
model,"To facilitate the overall learning procedure , our method also exploits self - critic learning .","[('To facilitate', (0, 2)), ('exploits', (10, 11))]","[('overall learning procedure', (3, 6)), ('self - critic learning', (11, 15))]",[],[],[],[]
experimental-setup,Our proposed 2 DASL is implemented with Pytorch .,"[('implemented with', (5, 7))]","[('proposed 2 DASL', (1, 4)), ('Pytorch', (7, 8))]",[],[],[],[]
experimental-setup,"We use SGD optimizer for the CNN regressor with a learning rate beginning at 5 10 ?5 and decays exponentially , the discriminator uses the Adam as optimizer with the fixed learning rate 1 10 ?4 .","[('use', (1, 2)), ('for', (4, 5)), ('with', (8, 9)), ('beginning at', (12, 14)), ('decays', (18, 19)), ('uses', (23, 24)), ('with', (28, 29))]","[('SGD optimizer', (2, 4)), ('CNN regressor', (6, 8)), ('learning rate', (10, 12)), ('5 10 ?5', (14, 17)), ('exponentially', (19, 20)), ('discriminator', (22, 23)), ('Adam as optimizer', (25, 28)), ('fixed learning rate 1 10 ?4', (30, 36))]",[],[],[],[]
experimental-setup,We use a two - stage strategy to train our model .,"[('use', (1, 2)), ('to train', (7, 9))]","[('two - stage strategy', (3, 7)), ('our model', (9, 11))]",[],[],[],[]
experimental-setup,"In the first stage , we train the model using the overall loss L.","[('train', (6, 7)), ('using', (9, 10))]","[('first stage', (2, 4)), ('model', (8, 9)), ('overall loss L.', (11, 14))]",[],[],[],[]
experimental-setup,"In the second stage , we fine - tune our model using the Vertex Distance Cost , following .","[('fine - tune', (6, 9)), ('using', (11, 12))]","[('our model', (9, 11)), ('Vertex Distance Cost', (13, 16))]",[],[],[],[]
experiments,Dense face alignment,[],"[('Dense face alignment', (0, 3))]",[],[],[],[]
experiments,"The results are shown in , where we can see our 2 DASL achieves the lowest NME ( % ) on the evaluation of both 2 D and 3D coordinates among all the methods .","[('achieves', (13, 14)), ('on', (20, 21)), ('among', (30, 31))]","[('our 2 DASL', (10, 13)), ('lowest NME ( % )', (15, 20)), ('2 D and 3D coordinates', (25, 30)), ('all the methods', (31, 34))]",[],[],[],[]
experiments,"For 3 DMM - based methods : 3 DDFA and DeFA , our method outperforms them by a large margin on both the 68 spare landmarks and the dense coordinates .","[('For', (0, 1)), ('by', (16, 17)), ('on', (20, 21))]","[('3 DMM - based methods', (1, 6)), ('3 DDFA and DeFA', (7, 11)), ('our method', (12, 14)), ('outperforms', (14, 15)), ('large margin', (18, 20)), ('68 spare landmarks', (23, 26)), ('dense coordinates', (28, 30))]",[],[],[],[]
results,"As can be observed , our method achieves the lowest mean NME on both of the two datasets , and the lowest NME across all poses on AFLW2000 - 3D .","[('achieves', (7, 8)), ('on', (12, 13)), ('across', (23, 24)), ('on', (26, 27))]","[('our method', (5, 7)), ('lowest mean NME', (9, 12)), ('both of the two datasets', (13, 18)), ('lowest NME', (21, 23)), ('all poses', (24, 26)), ('AFLW2000 - 3D', (27, 30))]",[],[],[],[]
results,"Our 2DASL even performs better than PRNet , reducing NME by 0.09 and 0.08 on AFLW2000 - 3D and AFLW - LFPA , respectively .","[('performs', (3, 4)), ('than', (5, 6)), ('reducing', (8, 9)), ('by', (10, 11)), ('on', (14, 15))]","[('Our 2DASL', (0, 2)), ('better', (4, 5)), ('PRNet', (6, 7)), ('NME', (9, 10)), ('0.09 and 0.08', (11, 14)), ('AFLW2000 - 3D and AFLW - LFPA', (15, 22))]",[],[],[],[]
results,"Es - pecially on large poses ( from 60 to 90 ) , 2 DASL achieves 0.2 lower NME than PRNet .","[('on', (3, 4)), ('achieves', (15, 16)), ('than', (19, 20))]","[('large poses', (4, 6)), ('2 DASL', (13, 15)), ('0.2 lower NME', (16, 19)), ('PRNet', (20, 21))]",[],[],[],[]
experiments,3 D face reconstruction,[],"[('3 D face reconstruction', (0, 4))]",[],[],[],[]
results,"As can be seen , the 3D reconstruction results of 2 DASL outperforms 3 DDFA by 0.39 , and 2.29 for DeFA , which are significant improvements .","[('of', (9, 10)), ('outperforms', (12, 13)), ('by', (15, 16)), ('for', (20, 21))]","[('3D reconstruction results', (6, 9)), ('2 DASL', (10, 12)), ('3 DDFA', (13, 15)), ('0.39', (16, 17)), ('DeFA', (21, 22)), ('significant improvements', (25, 27))]",[],[],[],[]
ablation-analysis,"2 . Adding weights to central points of the facial landmarks reduces the NME by 0.09 to 0.23 on the two stages , respectively .","[('Adding', (2, 3)), ('to', (4, 5)), ('of', (7, 8)), ('reduces', (11, 12)), ('by', (14, 15)), ('on', (18, 19))]","[('weights', (3, 4)), ('central points', (5, 7)), ('facial landmarks', (9, 11)), ('NME', (13, 14)), ('0.09', (15, 16)), ('0.23', (17, 18)), ('two stages', (20, 22))]",[],[],[],[]
ablation-analysis,"If the self - critic learning is not used , the NME increases by 0.04/0.18 for with / without weight mask , respectively .","[('is', (6, 7)), ('not used', (7, 9)), ('by', (13, 14)), ('for', (15, 16))]","[('self - critic learning', (2, 6)), ('NME', (11, 12)), ('increases', (12, 13)), ('0.04/0.18', (14, 15)), ('with / without weight mask', (16, 21))]",[],[],[],[]
ablation-analysis,"While the self - supervision scheme reduce NME by 0.1 when the weight mask is used , and 0.23 if the weight mask is removed , no significant improvement is observed .","[('reduce', (6, 7)), ('by', (8, 9)), ('when', (10, 11)), ('used', (15, 16)), ('if', (19, 20))]","[('self - supervision scheme', (2, 6)), ('NME', (7, 8)), ('0.1', (9, 10)), ('weight mask', (12, 14)), ('0.23', (18, 19)), ('weight mask', (21, 23)), ('removed', (24, 25))]",[],[],[],[]
ablation-analysis,"Moreover , in our experiments , we found taking the FLMs as input can accelerate the convergence of training process .","[('found', (7, 8)), ('taking', (8, 9)), ('as', (11, 12)), ('accelerate', (14, 15)), ('of', (17, 18))]","[('FLMs', (10, 11)), ('input', (12, 13)), ('convergence', (16, 17)), ('training process', (18, 20))]",[],[],[],[]
research-problem,Semantic Alignment : Finding Semantically Consistent Ground - truth for Facial Landmark Detection,[],"[('Facial Landmark Detection', (10, 13))]",[],[],[],[]
model,"In this paper , we propose a novel Semantic Alignment method which reduces the ' semantic ambiguity ' intrinsi-cally .","[('propose', (5, 6)), ('reduces', (12, 13))]","[('novel Semantic Alignment method', (7, 11)), (""' semantic ambiguity ' intrinsi-cally"", (14, 19))]",[],[],[],[]
model,"We model the ' real ' ground - truth as a latent variable to optimize , and the optimized ' real ' ground - truth then supervises the landmark detection network training .","[('model', (1, 2)), ('as', (9, 10)), ('to', (13, 14)), ('supervises', (26, 27))]","[(""' real ' ground - truth"", (3, 9)), ('latent variable', (11, 13)), ('optimize', (14, 15)), (""optimized ' real ' ground - truth"", (18, 25)), ('landmark detection network training', (28, 32))]",[],[],[],[]
model,"Accordingly , we propose a probabilistic model which can simultaneously search the ' real ' ground - truth and train the landmark detection network in an end - to - end way .","[('propose', (3, 4)), ('simultaneously search', (9, 11)), ('train', (19, 20)), ('in', (24, 25))]","[('probabilistic model', (5, 7)), (""' real ' ground - truth"", (12, 18)), ('landmark detection network', (21, 24)), ('end - to - end way', (26, 32))]",[],[],[],[]
model,"In this probabilistic model , the prior model is to constrain the latent variable to be close to the observations of the ' real ' ground truth , one of which is the human annotation .","[('to constrain', (9, 11)), ('to be', (14, 16)), ('close to', (16, 18)), ('of', (20, 21))]","[('prior model', (6, 8)), ('latent variable', (12, 14)), ('observations', (19, 20)), (""' real ' ground truth"", (22, 27))]",[],[],[],[]
model,The likelihood model is to reduce the Pearson Chi-square distance between the expected and the predicted distributions of ' real ' ground - truth .,"[('to reduce', (4, 6)), ('between', (10, 11)), ('of', (17, 18))]","[('likelihood model', (1, 3)), ('Pearson Chi-square distance', (7, 10)), ('expected and the predicted distributions', (12, 17)), (""' real ' ground - truth"", (18, 24))]",[],[],[],[]
model,The heatmap generated by the hourglass architecture represents the confidence of each pixel and this confidence distribution is used to model the predicted distribution of likelihood .,"[('generated by', (2, 4)), ('represents', (7, 8)), ('of', (10, 11))]","[('heatmap', (1, 2)), ('hourglass architecture', (5, 7)), ('confidence', (9, 10)), ('each pixel', (11, 13)), ('confidence distribution', (15, 17)), ('predicted distribution of likelihood', (22, 26))]",[],[],[],[]
model,"Apart from the proposed probabilistic framework , we further propose a global heatmap correction unit ( GHCU ) which maintains the global face shape constraint and recovers the unconfidently predicted landmarks caused by challenging factors such as occlusions and low resolution of images .","[('propose', (9, 10)), ('maintains', (19, 20)), ('recovers', (26, 27)), ('caused by', (31, 33)), ('such as', (35, 37))]","[('global heatmap correction unit ( GHCU )', (11, 18)), ('global face shape constraint', (21, 25)), ('unconfidently predicted landmarks', (28, 31)), ('challenging factors', (33, 35)), ('occlusions', (37, 38))]",[],[],[],[]
experimental-setup,"To perform data augmentation , we randomly sample the angle of rotation and the bounding box scale from Gaussian distribution .","[('To perform', (0, 2)), ('randomly sample', (6, 8)), ('from', (17, 18))]","[('data augmentation', (2, 4)), ('angle of rotation and the bounding box scale', (9, 17)), ('Gaussian distribution', (18, 20))]",[],[],[],[]
experimental-setup,We use a four - stage stacked hourglass network as our backbone which is trained by the optimizer RMSprop .,"[('use', (1, 2)), ('as', (9, 10)), ('trained by', (14, 16))]","[('four - stage stacked hourglass network', (3, 9)), ('our backbone', (10, 12)), ('optimizer RMSprop', (17, 19))]",[],[],[],[]
experimental-setup,"When training the roughly converged model with human annotations , the initial learning rate is 2.5 10 ?4 which is decayed to 2.5 10 ? 6 after 120 epochs .","[('When training', (0, 2)), ('with', (6, 7)), ('is', (14, 15)), ('decayed to', (20, 22)), ('after', (26, 27))]","[('training', (1, 2)), ('roughly converged model', (3, 6)), ('human annotations', (7, 9)), ('initial learning rate', (11, 14)), ('2.5 10 ?4', (15, 18)), ('2.5 10 ? 6', (22, 26)), ('120 epochs', (27, 29))]",[],[],[],[]
experimental-setup,"When training with Semantic Alignment from the beginning of the aforementioned roughly converged model , the initial learning rate is 2.5 10 ? 6 and is divided by 5 , 2 and 2 at epoch 30 , 60 and 90 respectively .","[('When', (0, 1)), ('training with', (1, 3)), ('from', (5, 6)), ('of', (8, 9)), ('is', (19, 20)), ('divided by', (26, 28)), ('at', (33, 34))]","[('Semantic Alignment', (3, 5)), ('beginning', (7, 8)), ('initial learning rate', (16, 19)), ('2.5 10 ? 6', (20, 24)), ('5 , 2 and 2', (28, 33)), ('epoch 30 , 60 and 90', (34, 40))]",[],[],[],[]
experimental-setup,We set batch size to 10 for network training .,"[('set', (1, 2)), ('to', (4, 5)), ('for', (6, 7))]","[('batch size', (2, 4)), ('10', (5, 6)), ('network training', (7, 9))]",[],[],[],[]
experimental-setup,1 . All our models are trained with PyTorch [ 18 ] on 2 Titan X GPUs .,"[('trained with', (6, 8)), ('on', (12, 13))]","[('PyTorch', (8, 9)), ('2 Titan X GPUs', (13, 17))]",[],[],[],[]
baselines,300 W .,[],"[('300 W', (0, 2))]",[],[],[],[]
results,"2 , we can see that HGs with our Semantic Alignment ( HGs + SA ) greatly outperform hourglass ( HGs ) only , 4.37 % vs 5.04 % in terms of NME on Full set , showing the great effectiveness of our Semantic Alignment ( SA ) .","[('see that', (4, 6)), ('with', (7, 8)), ('in terms of', (29, 32)), ('on', (33, 34))]","[('HGs', (6, 7)), ('our Semantic Alignment ( HGs + SA )', (8, 16)), ('greatly outperform', (16, 18)), ('hourglass ( HGs ) only', (18, 23)), ('4.37 % vs 5.04 %', (24, 29)), ('NME', (32, 33)), ('Full set', (34, 36))]",[],[],[],[]
results,"By adding GHCU , we can see that HGs + SA + GHCU slightly outperforms the HGs + SA .","[('adding', (1, 2)), ('see that', (6, 8)), ('slightly outperforms', (13, 15))]","[('GHCU', (2, 3)), ('HGs + SA + GHCU', (8, 13)), ('HGs + SA', (16, 19))]",[],[],[],[]
results,"Following and which normalize the in - plane - rotation by training a preprocessing network , we conduct this normalization ( HGs + SA + GHCU + Norm ) and achieve state of the art performance on Challenge set and Full set : 6.38 % and 4.02 % .","[('normalize', (3, 4)), ('by training', (10, 12)), ('conduct', (17, 18)), ('achieve', (30, 31)), ('on', (36, 37))]","[('in - plane - rotation', (5, 10)), ('preprocessing network', (13, 15)), ('state of the art performance', (31, 36)), ('Challenge set and Full set', (37, 42)), ('6.38 % and 4.02 %', (43, 48))]",[],[],[],[]
results,"In particular , on Challenge set , we significantly outperform the state of the art method : 6.38 % ( HGs + SA +GHCU + Norm ) vs 6.98 % ( LAB ) , meaning that our method is particularly effective on challenging scenarios .","[('on', (3, 4)), ('significantly outperform', (8, 10))]","[('Challenge set', (4, 6)), ('state of the art method', (11, 16)), ('6.38 % ( HGs + SA +GHCU + Norm )', (17, 27)), ('6.98 % ( LAB )', (28, 33))]",[],[],[],[]
results,AFLW . 300W has 68 facial points which contain many weak semantic landmarks ( e.g. those on face contours ) .,"[('contain', (8, 9))]","[('AFLW . 300W', (0, 3)), ('68 facial points', (4, 7)), ('many weak semantic landmarks', (9, 13))]",[],[],[],[]
results,"As shown in Tab. 3 , HGs + SA outperforms",[],"[('HGs + SA', (6, 9)), ('outperforms', (9, 10))]",[],[],[],[]
results,"HGs , 1.62 % vs 1.95 % .",[],"[('HGs', (0, 1)), ('1.62 % vs 1.95 %', (2, 7))]",[],[],[],[]
results,It is also observed that HGs + SA + GHCU works better than HGs + SA .,"[('observed that', (3, 5)), ('observed', (3, 4)), ('works', (10, 11)), ('than', (12, 13))]","[('HGs + SA + GHCU', (5, 10)), ('HGs + SA', (13, 16))]",[],[],[],[]
baselines,300 - VW .,[],"[('300 - VW', (0, 3))]",[],[],[],[]
results,"4 , we can see that HGs + SA greatly outperforms HGs in each of these three test sets .","[('see that', (4, 6))]","[('HGs + SA', (6, 9)), ('greatly outperforms', (9, 11)), ('HGs', (11, 12))]",[],[],[],[]
results,"Furthermore , compared with HGs + SA , HGs + SA + GHCU reduce the error rate ( RMSE ) by 18 % on Category 3 test set , meaning that GHCU is very effective for video - based challenges such as low resolution and occlusions because .","[('compared with', (2, 4)), ('reduce', (13, 14)), ('by', (20, 21)), ('on', (23, 24))]","[('HGs + SA', (4, 7)), ('HGs + SA + GHCU', (8, 13)), ('error rate ( RMSE )', (15, 20)), ('18 %', (21, 23)), ('Category 3 test set', (24, 28))]",[],[],[],[]
ablation-analysis,"To verify the effectiveness of different components in our framework , we conduct this ablation study on 300 - VW .","[('on', (16, 17))]","[('300 - VW', (17, 20))]",[],[],[],[]
ablation-analysis,"9 , Semantic alignment can consistently improve the performance on all subset sets , demonstrating the strong generalization capacity of SA .","[('consistently improve', (5, 7)), ('on', (9, 10)), ('demonstrating', (14, 15))]","[('Semantic alignment', (2, 4)), ('performance', (8, 9)), ('all subset sets', (10, 13))]",[],[],[],[]
ablation-analysis,"GHCU is more effective on the challenge data set ( Category 3 ) : 8.15 % vs 9.91 % ; Combining SA and GHCU works better than single of them , showing the complementary of these two mechanisms .","[('is', (1, 2)), ('on', (4, 5)), ('Combining', (20, 21)), ('works', (24, 25)), ('than', (26, 27))]","[('GHCU', (0, 1)), ('more effective', (2, 4)), ('challenge data set', (6, 9)), ('8.15 % vs 9.91 %', (14, 19)), ('better', (25, 26))]",[],[],[],[]
research-problem,Accurate Face Detection for High Performance,[],"[('Accurate Face Detection', (0, 3))]",[],[],[],[]
model,"In this work , we first modify the popular one - stage RetinaNet method to perform face detection as our baseline model .","[('modify', (6, 7)), ('to perform', (14, 16))]","[('popular one - stage RetinaNet method', (8, 14)), ('face detection', (16, 18))]",[],[],[],[]
model,Then some recent tricks are applied on this baseline to develop a high performance face detector namely AInnoFace :,"[('to develop', (9, 11)), ('namely', (16, 17))]","[('high performance face detector', (12, 16)), ('AInnoFace', (17, 18))]",[],[],[],[]
model,( 1 ) Employing the two - step classification and regression for detection ; ( 2 ) Applying the Intersection over Union ( IoU ) loss function for regression ; ( 3 ) Revisiting the data augmentation based on data - anchor - sampling for training ; ( 4 ) Utilizing the max - out operation for robuster classification ; ( 5 ) Using the multi-scale testing strategy for inference .,"[('Employing', (3, 4)), ('for', (11, 12)), ('Applying', (17, 18)), ('for', (27, 28)), ('Revisiting', (33, 34)), ('based on', (37, 39)), ('for', (44, 45)), ('Utilizing', (50, 51)), ('for', (56, 57)), ('Using', (63, 64)), ('for', (68, 69))]","[('two - step classification and regression', (5, 11)), ('detection', (12, 13)), ('Intersection over Union ( IoU ) loss function', (19, 27)), ('regression', (28, 29)), ('data augmentation', (35, 37)), ('data - anchor - sampling', (39, 44)), ('training', (45, 46)), ('max - out operation', (52, 56)), ('robuster classification', (57, 59)), ('multi-scale testing strategy', (65, 68)), ('inference', (69, 70))]",[],[],[],[]
experimental-setup,The backbone network in the proposed AInnoFace detector is initialized by the pretrained model on the ImageNet dataset .,"[('in', (3, 4)), ('initialized by', (9, 11)), ('on', (14, 15))]","[('backbone network', (1, 3)), ('proposed AInnoFace detector', (5, 8)), ('pretrained model', (12, 14)), ('ImageNet dataset', (16, 18))]",[],[],[],[]
experimental-setup,"We use the "" xavier "" method to randomly initialize the parameters in the newly added convolutional layers .","[('use', (1, 2)), ('to randomly initialize', (7, 10)), ('in', (12, 13))]","[('"" xavier "" method', (3, 7)), ('parameters', (11, 12)), ('newly added convolutional layers', (14, 18))]",[],[],[],[]
experimental-setup,"The stochastic gradient descent ( SGD ) algorithm is used to fine - tune the model with 0.9 momentum , 0.0001 weight decay and batch size 32 .","[('to', (10, 11)), ('fine - tune', (11, 14)), ('with', (16, 17))]","[('stochastic gradient descent ( SGD ) algorithm', (1, 8)), ('model', (15, 16)), ('0.9 momentum', (17, 19)), ('0.0001 weight decay', (20, 23)), ('batch size', (24, 26)), ('32', (26, 27))]",[],[],[],[]
experimental-setup,The warmup strategy is applied to gradually ramp up the learning rate from 0.0003125 to 0.01 at the first 5 epochs .,"[('applied to', (4, 6)), ('from', (12, 13)), ('to', (14, 15)), ('at', (16, 17))]","[('warmup strategy', (1, 3)), ('gradually ramp up', (6, 9)), ('learning rate', (10, 12)), ('0.0003125', (13, 14)), ('0.01', (15, 16)), ('first 5 epochs', (18, 21))]",[],[],[],[]
experimental-setup,"After that , it switches to the regular learning rate schedule , i.e. , dividing by 10 at 100 and 120 epochs and ending at 130 epochs .","[('switches to', (4, 6)), ('dividing by', (14, 16)), ('at', (17, 18)), ('ending at', (23, 25))]","[('regular learning rate schedule', (7, 11)), ('10', (16, 17)), ('100 and 120 epochs', (18, 22)), ('130 epochs', (25, 27))]",[],[],[],[]
experimental-setup,The full training and testing codes are built on the PyTorch library .,"[('built on', (7, 9))]","[('full training and testing codes', (1, 6)), ('PyTorch library', (10, 12))]",[],[],[],[]
results,"As shown in , our face detector sets some new state - of - the - art results based on the AP score across the three subsets on both validation and testing subsets , i.e. , 97.0 % ( Easy ) , 96.1 % ( Medium ) and 91.8 % ( Hard ) for validation subset , and 96.5 % ( Easy ) , 95.7 % ( Medium ) and 91.2 % ( Hard ) for testing subset .","[('sets', (7, 8)), ('based on', (18, 20)), ('across', (23, 24)), ('on', (27, 28)), ('i.e.', (34, 35)), ('for', (53, 54)), ('for', (75, 76))]","[('some new state - of - the - art results', (8, 18)), ('AP score', (21, 23)), ('three subsets', (25, 27)), ('validation and testing subsets', (29, 33)), ('validation subset', (54, 56)), ('96.5 % ( Easy ) , 95.7 % ( Medium ) and 91.2 % ( Hard )', (58, 75)), ('testing subset', (76, 78))]",[],[],[],[]
results,These results outperform all the compared state - of - the - art methods and demonstrate the superiority of our AInnoFace detector .,"[('outperform', (2, 3)), ('demonstrate', (15, 16)), ('of', (18, 19))]","[('all the compared state - of - the - art methods', (3, 14)), ('superiority', (17, 18)), ('our AInnoFace detector', (19, 22))]",[],[],[],[]
research-problem,"Detecting faces in an image is considered to be one of the most practical tasks in computer vision applications , and many studies are proposed from the beginning of the computer vision research .",[],"[('Detecting faces in an image', (0, 5))]",[],[],[],[]
research-problem,"After the advent of deep neural networks , many face detection algorithms applying the deep network have reported significant performance improvement to the conventional face detectors .",[],[],[],[],[],[]
model,"In this paper , we propose a new multi-scale face detector with extremely tiny size ( EXTD ) resolving the two mentioned problems .","[('propose', (5, 6)), ('with', (11, 12))]","[('new multi-scale face detector', (7, 11)), ('extremely tiny size ( EXTD )', (12, 18))]",[],[],[],[]
model,"The main discovery is that we can share the network in generating each feature - map , as shown in .","[('share', (7, 8)), ('in generating', (10, 12))]","[('network', (9, 10)), ('each feature - map', (12, 16))]",[],[],[],[]
model,"As in the figure , we design a backbone network such that reduces the size of the feature map by half , and we can get the other feature maps with recurrently passing the network .","[('design', (6, 7)), ('reduces', (12, 13)), ('of', (15, 16)), ('by', (19, 20)), ('get', (25, 26)), ('with', (30, 31))]","[('backbone network', (8, 10)), ('size', (14, 15)), ('feature map', (17, 19)), ('half', (20, 21)), ('other feature maps', (27, 30)), ('recurrently passing', (31, 33)), ('network', (34, 35))]",[],[],[],[]
model,"The sharing can significantly reduce the number of parameters , and this enables our model to use more layers to generate the low - level feature maps used for detecting small faces .","[('significantly reduce', (3, 5)), ('enables', (12, 13)), ('to use', (15, 17)), ('to generate', (19, 21)), ('used for detecting', (27, 30))]","[('sharing', (1, 2)), ('number of parameters', (6, 9)), ('more layers', (17, 19)), ('low - level feature maps', (22, 27)), ('small faces', (30, 32))]",[],[],[],[]
model,"Also , the proposed iterative architecture makes the network to observe the features from various scale of faces and from various layer locations , and hence offer abundant semantic information to the network , without adding additional parameters .","[('makes', (6, 7)), ('to observe', (9, 11)), ('from', (13, 14)), ('from', (19, 20)), ('offer', (26, 27)), ('to', (30, 31)), ('without adding', (34, 36))]","[('proposed iterative architecture', (3, 6)), ('network', (8, 9)), ('features', (12, 13)), ('various scale of faces', (14, 18)), ('various layer locations', (20, 23)), ('abundant semantic information', (27, 30)), ('network', (32, 33))]",[],[],[],[]
model,"Our baseline framework follows FPN - like structures , but can also be applied to SSD - like architecture .","[('follows', (3, 4)), ('applied to', (13, 15))]","[('baseline framework', (1, 3)), ('FPN - like structures', (4, 8)), ('SSD - like architecture', (15, 19))]",[],[],[],[]
code,Code will be available at https ://github.com/clovaai.,[],"[('https ://github.com/clovaai.', (5, 7))]",[],[],[],[]
hyperparameters,"Also , we tested different activation functions : ReLU , PReLU , and Leaky - ReLU for each model .","[('tested', (3, 4))]","[('different activation functions', (4, 7)), ('ReLU', (8, 9)), ('PReLU', (10, 11)), ('Leaky - ReLU', (13, 16))]",[],[],[],[]
hyperparameters,"The negative slope of the Leaky - ReLU is set to 0.25 , which is identical to the initial negative slope of the PReLU .","[('of', (3, 4)), ('set to', (9, 11)), ('identical to', (15, 17)), ('of', (21, 22))]","[('negative slope', (1, 3)), ('Leaky - ReLU', (5, 8)), ('0.25', (11, 12)), ('initial negative slope', (18, 21)), ('PReLU', (23, 24))]",[],[],[],[]
results,"The results in 138 times lighter in model size and are 28.3 , 19.2 , and 11 times lighter in Madds .","[('in', (2, 3)), ('in', (6, 7)), ('are', (10, 11)), ('in', (19, 20))]","[('results', (1, 2)), ('138 times lighter', (3, 6)), ('model size', (7, 9)), ('28.3 , 19.2 , and 11 times lighter', (11, 19)), ('Madds', (20, 21))]",[],[],[],[]
results,"When compared to SOTA face detectors such as Pyra - midBox and DSFD , our best model EXTD - FPN - 64 - PReLU achieved lower results .","[('compared to', (1, 3)), ('such as', (6, 8)), ('achieved', (24, 25))]","[('SOTA face detectors', (3, 6)), ('Pyra - midBox', (8, 11)), ('DSFD', (12, 13)), ('our best model EXTD - FPN - 64 - PReLU', (14, 24)), ('lower results', (25, 27))]",[],[],[],[]
results,The margin between PyramidBox and the proposed model on WIDER FACE hard case was 3.4 % .,"[('between', (2, 3)), ('on', (8, 9)), ('was', (13, 14))]","[('margin', (1, 2)), ('PyramidBox and the proposed model', (3, 8)), ('WIDER FACE hard case', (9, 13)), ('3.4 %', (14, 16))]",[],[],[],[]
results,"The m AP gap to DSFD , which is tremendously heavier , is about 5.0 % , but it would be safe to suggest that the proposed method offers more decent trade - off in that DSFD uses about 2860 times more parameters than the proposed method .","[('to', (4, 5)), ('is', (12, 13)), ('offers', (28, 29)), ('uses', (37, 38)), ('than', (43, 44))]","[('m AP gap', (1, 4)), ('DSFD', (5, 6)), ('about 5.0 %', (13, 16)), ('more decent trade - off', (29, 34))]",[],[],[],[]
results,"When it comes to our SSD - based variations , they got lower mAP results than FPN - based variants .","[('got', (11, 12)), ('than', (15, 16))]","[('our SSD - based variations', (4, 9)), ('lower mAP results', (12, 15)), ('FPN - based variants', (16, 20))]",[],[],[],[]
results,"However , when compared with the S3FD version trained with Mo - bile FaceNet backbone network , the proposed SSD variants achieved comparable or better detection performance .","[('compared with', (3, 5)), ('trained with', (8, 10)), ('achieved', (21, 22))]","[('S3FD version', (6, 8)), ('Mo - bile FaceNet backbone network', (10, 16)), ('proposed SSD variants', (18, 21)), ('comparable or better detection performance', (22, 27))]",[],[],[],[]
results,"From the table , we can see that our method achieved higher performance in WIDER FACE hard dataset than other cases .","[('see that', (6, 8)), ('achieved', (10, 11)), ('in', (13, 14)), ('than', (18, 19))]","[('our method', (8, 10)), ('higher performance', (11, 13)), ('WIDER FACE hard dataset', (14, 18)), ('other cases', (19, 21))]",[],[],[],[]
results,"First , for all the different channel width , FPN based architecture achieved better detection performance compared to SSD based architecture , especially for detecting small faces .","[('for', (2, 3)), ('achieved', (12, 13)), ('compared to', (16, 18)), ('especially for detecting', (22, 25))]","[('all the different channel width', (3, 8)), ('FPN based architecture', (9, 12)), ('better detection performance', (13, 16)), ('SSD based architecture', (18, 21)), ('small faces', (25, 27))]",[],[],[],[]
results,"When tested with SSD based architecture , PReLU outperformed Leaky - ReLU with larger margin than those using FPN structure .","[('tested with', (1, 3)), ('outperformed', (8, 9)), ('with', (12, 13)), ('than', (15, 16))]","[('SSD based architecture', (3, 6)), ('PReLU', (7, 8)), ('Leaky - ReLU', (9, 12)), ('larger margin', (13, 15)), ('FPN structure', (18, 20))]",[],[],[],[]
model,"In this paper , we propose a novel face detection network with three novel contributions that address three key aspects of face detection , including better feature learning , progressive loss design and anchor assign based data augmentation , respectively .","[('propose', (5, 6)), ('with', (11, 12))]","[('novel face detection network', (7, 11)), ('three novel contributions', (12, 15)), ('better feature learning', (25, 28)), ('progressive loss design', (29, 32)), ('anchor assign based data augmentation', (33, 38))]",[],[],[],[]
model,"In this paper , we propose three novel techniques to address the above three issues , respectively .","[('propose', (5, 6))]","[('three novel techniques', (6, 9))]",[],[],[],[]
model,"First , we introduce a Feature Enhance Module ( FEM ) to enhance the discriminability and robustness of the features , which combines the advantages of the FPN in PyramidBox and Receptive Field Block ( RFB ) in RFBNet .","[('introduce', (3, 4)), ('to enhance', (11, 13)), ('of', (17, 18)), ('combines', (22, 23)), ('of', (25, 26)), ('in', (28, 29)), ('in', (37, 38))]","[('Feature Enhance Module ( FEM )', (5, 11)), ('discriminability and robustness', (14, 17)), ('features', (19, 20)), ('advantages', (24, 25)), ('FPN', (27, 28)), ('PyramidBox', (29, 30)), ('Receptive Field Block ( RFB )', (31, 37)), ('RFBNet', (38, 39))]",[],[],[],[]
model,"Second , motivated by the hierarchical loss and pyramid anchor in PyramidBox , we design Progressive Anchor Loss ( PAL ) that uses progressive anchor sizes for not only different levels , but also different shots .","[('design', (14, 15)), ('uses', (22, 23)), ('for', (26, 27))]","[('Progressive Anchor Loss ( PAL )', (15, 21)), ('progressive anchor sizes', (23, 26)), ('different levels', (29, 31)), ('different shots', (34, 36))]",[],[],[],[]
model,"Specifically , we assign smaller anchor sizes in the first shot , and use larger sizes in the second shot .","[('assign', (3, 4)), ('in', (7, 8)), ('use', (13, 14)), ('in', (16, 17))]","[('smaller anchor sizes', (4, 7)), ('first shot', (9, 11)), ('larger sizes', (14, 16)), ('second shot', (18, 20))]",[],[],[],[]
model,"Third , we propose Improved Anchor Matching ( IAM ) , which integrates anchor partition strategy and anchor-based data augmentation to better match anchors and ground truth faces , and thus provides better initialization for the regressor .","[('propose', (3, 4)), ('integrates', (12, 13)), ('to better match', (20, 23)), ('provides', (31, 32)), ('for', (34, 35))]","[('Improved Anchor Matching ( IAM )', (4, 10)), ('anchor partition strategy', (13, 16)), ('anchor-based data augmentation', (17, 20)), ('anchors and ground truth faces', (23, 28)), ('better initialization', (32, 34)), ('regressor', (36, 37))]",[],[],[],[]
model,"Besides , since these techniques are all related to two - stream design , we name the proposed network as Dual Shot Face Detector ( DSFD ) .","[('name', (15, 16)), ('as', (19, 20))]","[('proposed network', (17, 19)), ('Dual Shot Face Detector ( DSFD )', (20, 27))]",[],[],[],[]
hyperparameters,The backbone networks are initialized by the pretrained VGG / ResNet on Image Net .,"[('initialized by', (4, 6)), ('on', (11, 12))]","[('backbone networks', (1, 3)), ('pretrained VGG / ResNet', (7, 11)), ('Image Net', (12, 14))]",[],[],[],[]
hyperparameters,All newly added convolution layers ' parameters are initialized by the ' xavier ' method .,"[('initialized by', (8, 10))]","[(""newly added convolution layers ' parameters"", (1, 7)), (""' xavier ' method"", (11, 15))]",[],[],[],[]
hyperparameters,"We use SGD with 0.9 momentum , 0.0005 weight decay to fine - tune our DSFD model .","[('use', (1, 2)), ('with', (3, 4)), ('to fine - tune', (10, 14))]","[('SGD', (2, 3)), ('0.9 momentum , 0.0005 weight decay', (4, 10)), ('DSFD model', (15, 17))]",[],[],[],[]
hyperparameters,The batch size is set to 16 .,"[('set to', (4, 6))]","[('batch size', (1, 3)), ('16', (6, 7))]",[],[],[],[]
hyperparameters,"The learning rate is set to 10 ?3 for the first 40 k steps , and we decay it to 10 ? 4 and 10 ? 5 for two 10 k steps .","[('set to', (4, 6)), ('for', (8, 9)), ('decay it to', (17, 20)), ('for', (27, 28))]","[('learning rate', (1, 3)), ('10 ?3', (6, 8)), ('first 40 k steps', (10, 14)), ('10 ? 4 and 10 ? 5', (20, 27)), ('two 10 k steps', (28, 32))]",[],[],[],[]
hyperparameters,"During inference , the first shot 's outputs are ignored and the second shot predicts top 5 k high confident detections .","[('During', (0, 1)), ('are', (8, 9)), ('predicts', (14, 15))]","[('inference', (1, 2)), (""first shot 's outputs"", (4, 8)), ('ignored', (9, 10)), ('second shot', (12, 14)), ('top 5 k high confident detections', (15, 21))]",[],[],[],[]
hyperparameters,Non-maximum suppression is applied with jaccard overlap of 0.3 to produce top 750 high confident bounding boxes per image .,"[('applied with', (3, 5)), ('of', (7, 8)), ('to produce', (9, 11))]","[('Non-maximum suppression', (0, 2)), ('jaccard overlap', (5, 7)), ('0.3', (8, 9)), ('top 750 high confident bounding boxes', (11, 17))]",[],[],[],[]
hyperparameters,"For 4 bounding box coordinates , we round down top left coordinates and roundup width and height to expand the detection bounding box .","[('For', (0, 1)), ('round down', (7, 9)), ('to expand', (17, 19))]","[('4 bounding box coordinates', (1, 5)), ('top left coordinates', (9, 12)), ('roundup width and height', (13, 17)), ('detection bounding box', (20, 23))]",[],[],[],[]
code,The official code has been released at : https://github.com/TencentYoutuResearch/FaceDetection-DSFD .,[],"[('https://github.com/TencentYoutuResearch/FaceDetection-DSFD', (8, 9))]",[],[],[],[]
experiments,"In this subsection , we conduct extensive experiments and ablation studies on the WIDER FACE dataset to evaluate the effectiveness of several contributions of our proposed framework , including feature enhance module , progressive anchor loss , and improved anchor matching .","[('on', (11, 12)), ('including', (28, 29))]","[('WIDER FACE dataset', (13, 16)), ('feature enhance module', (29, 32)), ('progressive anchor loss', (33, 36)), ('improved anchor matching', (38, 41))]",[],[],[],[]
baselines,"Feature Enhance Module First ,",[],"[('Feature Enhance Module', (0, 3))]",[],[],[],[]
experiments,"shows that our feature enhance module can improve VGG16 - based FSSD from 92.6 % , 90.2 % , 79.1 % to 93.0 % , 91.4 % , 84.6 % .","[('shows', (0, 1)), ('from', (12, 13)), ('to', (21, 22))]","[('our feature enhance module', (2, 6)), ('VGG16 - based FSSD', (8, 12)), ('92.6 % , 90.2 % , 79.1 %', (13, 21)), ('93.0 % , 91.4 % , 84.6 %', (22, 30))]",[],[],[],[]
baselines,"Progressive Anchor Loss Second , we use Res50 - based FSSD as the baseline to add progressive anchor loss for comparison .","[('use', (6, 7)), ('as', (11, 12)), ('to add', (14, 16))]","[('Progressive Anchor Loss', (0, 3)), ('Res50 - based FSSD', (7, 11)), ('baseline', (13, 14)), ('progressive anchor loss', (16, 19))]",[],[],[],[]
experiments,"shows our progressive anchor loss can improve Res50 - based FSSD using FEM from 95.0 % , 94.1 % , 88.0 % to 95.3 % , 94.4 % , 88.6 % .","[('shows', (0, 1)), ('improve', (6, 7)), ('using', (11, 12)), ('from', (13, 14)), ('to', (22, 23))]","[('progressive anchor loss', (2, 5)), ('Res50 - based FSSD', (7, 11)), ('FEM', (12, 13)), ('95.0 % , 94.1 % , 88.0 %', (14, 22)), ('95.3 % , 94.4 % , 88.6 %', (23, 31))]",[],[],[],[]
experiments,Improved Anchor Matching,[],"[('Improved Anchor Matching', (0, 3))]",[],[],[],[]
experiments,"shows that our improved anchor matching can improve Res101 based FSSD using FEM from 95.8 % , 95.1 % , 89.7 % to 96.1 % , 95.2 % , 90.0 % .","[('shows', (0, 1)), ('using', (11, 12)), ('from', (13, 14)), ('to', (22, 23))]","[('improved anchor matching', (3, 6)), ('Res101 based FSSD', (8, 11)), ('FEM', (12, 13)), ('95.8 % , 95.1 % , 89.7 %', (14, 22)), ('96.1 % , 95.2 % , 90.0 %', (23, 31))]",[],[],[],[]
results,WIDER FACE Dataset,[],"[('WIDER FACE Dataset', (0, 3))]",[],[],[],[]
results,"As shown in , our DSFD achieves the best performance among all of the state - of - the - art face detectors based on the average precision ( AP ) across the three subsets , i.e. , 96.6 % ( Easy ) , 95.7 % ( Medium ) and 90.4 % ( Hard ) on validation set , and 96.0 % ( Easy ) , 95.3 % ( Medium ) and 90.0 % ( Hard ) on test set .","[('achieves', (6, 7)), ('among', (10, 11)), ('based on', (23, 25)), ('across', (31, 32)), ('i.e.', (36, 37)), ('on', (55, 56)), ('on', (77, 78))]","[('best performance', (8, 10)), ('all of the state - of - the - art face detectors', (11, 23)), ('average precision ( AP )', (26, 31)), ('three subsets', (33, 35)), ('validation set', (56, 58)), ('96.0 % ( Easy ) , 95.3 % ( Medium ) and 90.0 % ( Hard )', (60, 77)), ('test set', (78, 80))]",[],[],[],[]
experiments,FDDB Dataset,[],"[('FDDB Dataset', (0, 2))]",[],[],[],[]
experiments,"As shown in , our DSFD achieves state - of - the - art performance on both discontinuous and continuous ROC curves , i.e. 99.1 % and 86.2 % when the number of false positives equals to 1 , 000 .","[('achieves', (6, 7)), ('on', (15, 16)), ('i.e.', (23, 24)), ('when', (29, 30)), ('equals to', (35, 37))]","[('DSFD', (5, 6)), ('state - of - the - art performance', (7, 15)), ('discontinuous and continuous ROC curves', (17, 22)), ('99.1 % and 86.2 %', (24, 29)), ('number of false positives', (31, 35)), ('1 , 000', (37, 40))]",[],[],[],[]
experiments,"After adding additional annotations to those unlabeled faces , the false positives of our model can be further reduced and outperform all other methods .","[('adding', (1, 2)), ('to', (4, 5)), ('of', (12, 13))]","[('additional annotations', (2, 4)), ('unlabeled faces', (6, 8)), ('false positives', (10, 12)), ('our model', (13, 15)), ('further reduced', (17, 19)), ('outperform', (20, 21)), ('all other methods', (21, 24))]",[],[],[],[]
research-problem,A Unified Multi-scale Deep Convolutional Neural Network for Fast Object Detection,[],"[('Fast Object Detection', (8, 11))]",[],[],[],[]
research-problem,"A unified deep neural network , denoted the multi -scale CNN ( MS - CNN ) , is proposed for fast multi-scale object detection .","[('denoted', (6, 7))]","[('unified deep neural network', (1, 5)), ('multi -scale CNN ( MS - CNN )', (8, 16)), ('fast multi-scale object detection', (20, 24))]",[],[],[],[]
research-problem,"State - of - the - art object detection performance , at up to 15 fps , is reported on datasets , such as KITTI and Caltech , containing a substantial number of small objects .",[],"[('object detection', (7, 9))]",[],[],[],[]
model,"This work proposes a unified multi-scale deep CNN , denoted the multi -scale CNN ( MS - CNN ) , for fast object detection .","[('proposes', (2, 3)), ('denoted', (9, 10)), ('for', (20, 21))]","[('unified multi-scale deep CNN', (4, 8)), ('multi -scale CNN ( MS - CNN )', (11, 19)), ('fast object detection', (21, 24))]",[],[],[],[]
model,"Similar to , this network consists of two sub-networks : an object proposal network and an accurate detection network .","[('consists of', (5, 7))]","[('two sub-networks', (7, 9)), ('object proposal network', (11, 14)), ('accurate detection network', (16, 19))]",[],[],[],[]
model,Both of them are learned end - to - end and share computations .,"[('share', (11, 12))]","[('learned end - to - end', (4, 10)), ('computations', (12, 13))]",[],[],[],[]
model,"However , to ease the inconsistency between the sizes of objects and receptive fields , object detection is performed with multiple output layers , each focusing on objects within certain scale ranges ( see ) .","[('performed with', (18, 20)), ('focusing on', (25, 27)), ('within', (28, 29))]","[('object detection', (15, 17)), ('multiple output layers', (20, 23)), ('objects', (27, 28)), ('certain scale ranges', (29, 32))]",[],[],[],[]
model,The complimentary detectors at different output layers are combined to form a strong multi-scale detector .,"[('at', (3, 4)), ('combined', (8, 9)), ('to form', (9, 11))]","[('complimentary detectors', (1, 3)), ('different output layers', (4, 7)), ('strong multi-scale detector', (12, 15))]",[],[],[],[]
results,The performance of the MS - CNN detector was evaluated on the KITTI and Caltech Pedestrian benchmarks .,"[('of', (2, 3)), ('evaluated on', (9, 11))]","[('performance', (1, 2)), ('MS - CNN detector', (4, 8)), ('KITTI and Caltech Pedestrian benchmarks', (12, 17))]",[],[],[],[]
code,"The detector was implemented in C ++ within the Caffe toolbox , and source code is available at https://github.com/zhaoweicai/mscnn.","[('implemented in', (3, 5)), ('within', (7, 8))]","[('detector', (1, 2)), ('C ++', (5, 7)), ('Caffe toolbox', (9, 11)), ('https://github.com/zhaoweicai/mscnn.', (18, 19))]",[],[],[],[]
experimental-setup,All times are reported for implementation on a single CPU core ( 2.40 GHz ) of an Intel Xeon E5 - 2630 server with 64 GB of RAM .,"[('on', (6, 7)), ('of', (15, 16)), ('with', (23, 24))]","[('implementation', (5, 6)), ('single CPU core ( 2.40 GHz )', (8, 15)), ('Intel Xeon E5 - 2630 server', (17, 23)), ('64 GB of RAM', (24, 28)), ('RAM', (27, 28))]",[],[],[],[]
experimental-setup,An NVIDIA Titan GPU was used for CNN computations .,"[('used for', (5, 7))]","[('NVIDIA Titan GPU', (1, 4)), ('CNN computations', (7, 9))]",[],[],[],[]
results,The MS - CNN set a new record for the detection of pedestrians and cyclists .,"[('set', (4, 5)), ('for', (8, 9)), ('detection of', (10, 12))]","[('MS - CNN', (1, 4)), ('new record', (6, 8)), ('pedestrians and cyclists', (12, 15))]",[],[],[],[]
results,"We also led a nontrivial margin over the very recent SDP + RPN , which used scale depen - dent pooling .","[('led', (2, 3)), ('over', (6, 7)), ('used', (15, 16))]","[('nontrivial margin', (4, 6)), ('very recent SDP + RPN', (8, 13)), ('scale depen - dent pooling', (16, 21))]",[],[],[],[]
results,Pedestrian detection on Caltech The MS - CNN detector was also evaluated on the Caltech pedestrian benchmark .,[],"[('Pedestrian detection', (0, 2)), ('Caltech', (3, 4)), ('Caltech pedestrian benchmark', (14, 17))]",[],[],[],[]
results,"As shown in , the MS - CNN has state - of the - art performance . and ( c ) show that it performs very well for small and occluded objects , outperforming DeepParts , which explicitly addresses occlusion .","[('show', (21, 22)), ('performs', (24, 25)), ('for', (27, 28)), ('outperforming', (33, 34)), ('explicitly addresses', (37, 39))]","[('MS - CNN', (5, 8)), ('state - of the - art performance', (9, 16)), ('very well', (25, 27)), ('small and occluded objects', (28, 32)), ('DeepParts', (34, 35)), ('occlusion', (39, 40))]",[],[],[],[]
research-problem,Region proposal mechanisms are essential for existing deep learning approaches to object detection in images .,[],"[('Region proposal mechanisms', (0, 3))]",[],[],[],[]
research-problem,"Existing deep learning approaches to solve this task ( e.g. , R - CNN and its variants ) mainly rely on region proposal mechanisms ( e.g. , region proposal networks ( RPN s ) ) to generate potential bounding boxes in an image and then classify these bounding boxes to achieve object detection .",[],[],[],[],[],[]
model,"Motivated by this , in this work , we propose a weakly supervised multimodal annotation segmentation ( WSMA - Seg ) approach , which uses segmentation models to achieve an accurate and robust object detection without NMS .","[('propose', (9, 10)), ('uses', (24, 25)), ('to achieve', (27, 29)), ('without', (35, 36))]","[('weakly supervised multimodal annotation segmentation ( WSMA - Seg ) approach', (11, 22)), ('segmentation models', (25, 27)), ('accurate and robust object detection', (30, 35)), ('NMS', (36, 37))]",[],[],[],[]
model,"In the training phase , WSMA - Seg first converts weakly supervised bounding box annotations in detection tasks to multi-channel segmentation - like masks , called multimodal annotations ; then , a segmentation model is trained using multimodal annotations as labels to learn multimodal heatmaps for the training images .","[('In', (0, 1)), ('converts', (9, 10)), ('in', (15, 16)), ('to', (18, 19)), ('called', (25, 26)), ('trained using', (35, 37)), ('as', (39, 40)), ('to learn', (41, 43)), ('for', (45, 46))]","[('training phase', (2, 4)), ('WSMA - Seg', (5, 8)), ('weakly supervised bounding box annotations', (10, 15)), ('detection tasks', (16, 18)), ('multi-channel segmentation - like masks', (19, 24)), ('multimodal annotations', (26, 28)), ('segmentation model', (32, 34)), ('multimodal annotations', (37, 39)), ('labels', (40, 41)), ('multimodal heatmaps', (43, 45)), ('training images', (47, 49))]",[],[],[],[]
model,"In the testing phase , the resulting heatmaps of a given test image are converted into an instance - aware segmentation map based on a pixel - level logic operation ; then , a contour tracing operation is conducted to generate contours for objects using the segmentation map ; finally , bounding boxes of objects are created as circumscribed quadrilaterals of their corresponding contours .","[('In', (0, 1)), ('of', (8, 9)), ('converted into', (14, 16)), ('based on', (22, 24)), ('to generate', (39, 41)), ('for', (42, 43)), ('using', (44, 45)), ('of', (53, 54)), ('created as', (56, 58)), ('of', (60, 61))]","[('testing phase', (2, 4)), ('resulting heatmaps', (6, 8)), ('given test image', (10, 13)), ('instance - aware segmentation map', (17, 22)), ('pixel - level logic operation', (25, 30)), ('contour tracing operation', (34, 37)), ('conducted', (38, 39)), ('contours', (41, 42)), ('objects', (43, 44)), ('segmentation map', (46, 48)), ('bounding boxes', (51, 53)), ('objects', (54, 55)), ('circumscribed quadrilaterals', (58, 60)), ('corresponding contours', (62, 64))]",[],[],[],[]
experiments,Rebar Head Detection,[],"[('Rebar Head Detection', (0, 3))]",[],[],[],[]
experiments,"As shown in , our proposed method with Stack = 2 , Base = 40 , Depth = 5 has achieved the best performance among all solutions in terms of F1 Score .","[('with', (7, 8)), ('achieved', (20, 21)), ('among', (24, 25)), ('in terms of', (27, 30))]","[('our proposed method', (4, 7)), ('Stack = 2 , Base = 40 , Depth = 5', (8, 19)), ('best performance', (22, 24)), ('all solutions', (25, 27)), ('F1 Score', (30, 32))]",[],[],[],[]
experiments,"Therefore , we can conclude that , compared to the state - of - the - art baselines , WSMA - Seg is much simpler , more effective , and more efficient .","[('conclude', (4, 5)), ('compared to', (7, 9)), ('is', (22, 23))]","[('state - of - the - art baselines', (10, 18)), ('WSMA - Seg', (19, 22)), ('much simpler', (23, 25)), ('more effective', (26, 28)), ('more efficient', (30, 32))]",[],[],[],[]
experiments,WIDER Face Detection,[],"[('WIDER Face Detection', (0, 3))]",[],[],[],[]
experiments,WIDER Face results in a much lower detection accuracy compared to other face detection datasets .,"[('results in', (2, 4)), ('compared to', (9, 11))]","[('WIDER Face', (0, 2)), ('much lower detection accuracy', (5, 9)), ('other face detection datasets', (11, 15))]",[],[],[],[]
experiments,"The results show that our proposed WSMA - Seg outperforms the state - of - the - art baselines in all three categories , reaching 94.70 , 93.41 , and 87.23 in Easy , Medium , and Hard categories , respectively .","[('show', (2, 3)), ('outperforms', (9, 10)), ('in', (19, 20)), ('reaching', (24, 25)), ('in', (31, 32))]","[('proposed WSMA - Seg', (5, 9)), ('state - of - the - art baselines', (11, 19)), ('all three categories', (20, 23)), ('94.70 , 93.41 , and 87.23', (25, 31)), ('Easy , Medium , and Hard categories', (32, 39))]",[],[],[],[]
experiments,MS COCO Detection,[],"[('MS COCO Detection', (0, 3))]",[],[],[],[]
experiments,"The results show that our WSMA - Seg approach outperforms all state - of - the - art baselines in terms of most metrics , including the most challenging metrics , AP , AP s , AR 1 , and AR s .","[('show', (2, 3)), ('outperforms', (9, 10)), ('in terms of', (19, 22)), ('including', (25, 26))]","[('WSMA - Seg approach', (5, 9)), ('all state - of - the - art baselines', (10, 19)), ('most metrics', (22, 24)), ('most challenging metrics', (27, 30)), ('AP', (31, 32))]",[],[],[],[]
experiments,"For the other metrics , the performance of our proposed approach is also close to those of the best baselines .","[('of', (7, 8)), ('close to', (13, 15))]","[('other metrics', (2, 4)), ('performance', (6, 7)), ('our proposed approach', (8, 11)), ('best baselines', (18, 20))]",[],[],[],[]
experiments,This proves that the proposed WSMA - Seg approach generally achieves more accurate and robust object detection than the state - of - the - art approaches without NMS .,"[('achieves', (10, 11)), ('than', (17, 18)), ('without', (27, 28))]","[('proposed WSMA - Seg approach', (4, 9)), ('more accurate and robust object detection', (11, 17)), ('state - of - the - art approaches', (19, 27)), ('NMS', (28, 29))]",[],[],[],[]
research-problem,RetinaFace : Single - stage Dense Face Localisation in the Wild,[],[],[],[],[],[]
research-problem,"Though tremendous strides have been made in uncontrolled face detection , accurate and efficient face localisation in the wild remains an open challenge .",[],[],[],[],[],[]
code,Extra annotations and code have been made available at : https://github.com/deepinsight/insightface/tree/master/RetinaFace.,[],"[('https://github.com/deepinsight/insightface/tree/master/RetinaFace.', (10, 11))]",[],[],[],[]
model,"Based on a single - stage design , we propose a novel pixel - wise face localisation method named Reti- naFace , which employs a multi-task learning strategy to simultaneously predict face score , face box , five facial landmarks , and 3D position and correspondence of each facial pixel .","[('propose', (9, 10)), ('named', (18, 19)), ('employs', (23, 24)), ('to simultaneously predict', (28, 31)), ('of', (46, 47))]","[('novel pixel - wise face localisation method', (11, 18)), ('Reti- naFace', (19, 21)), ('multi-task learning strategy', (25, 28)), ('face score', (31, 33)), ('face box', (34, 36)), ('five facial landmarks', (37, 40)), ('3D position and correspondence', (42, 46)), ('each facial pixel', (47, 50))]",[],[],[],[]
experiments,Training Details .,[],"[('Training Details', (0, 2))]",[],[],[],[]
experimental-setup,"We train the RetinaFace using SGD optimiser ( momentum at 0.9 , weight decay at 0.0005 , batch size of 8 4 ) on four NVIDIA Tesla P40 ( 24GB ) GPUs .","[('train', (1, 2)), ('using', (4, 5)), ('at', (9, 10)), ('at', (14, 15)), ('of', (19, 20)), ('on', (23, 24))]","[('RetinaFace', (3, 4)), ('SGD optimiser', (5, 7)), ('momentum', (8, 9)), ('0.9', (10, 11)), ('weight decay', (12, 14)), ('0.0005', (15, 16)), ('batch size', (17, 19)), ('8 4', (20, 22)), ('four NVIDIA Tesla P40 ( 24GB ) GPUs', (24, 32))]",[],[],[],[]
experimental-setup,"The learning rate starts from 10 ? 3 , rising to 10 ? 2 after 5 epochs , then divided by 10 at 55 and 68 epochs .","[('starts from', (3, 5)), ('rising to', (9, 11)), ('after', (14, 15)), ('divided by', (19, 21)), ('at', (22, 23))]","[('learning rate', (1, 3)), ('10 ? 3', (5, 8)), ('10 ? 2', (11, 14)), ('5 epochs', (15, 17)), ('10', (21, 22)), ('55 and 68 epochs', (23, 27))]",[],[],[],[]
experimental-setup,The training process terminates at 80 epochs .,"[('terminates at', (3, 5))]","[('training process', (1, 3)), ('80 epochs', (5, 7))]",[],[],[],[]
experimental-setup,Testing Details .,[],"[('Testing Details', (0, 2))]",[],[],[],[]
experimental-setup,"For testing on WIDER FACE , we follow the standard practices of and employ flip as well as multi-scale ( the short edge of image at [ 500 , 800 , 1100 , 1400 , 1700 ] ) strategies .","[('testing on', (1, 3)), ('follow', (7, 8)), ('employ', (13, 14)), ('as well as', (15, 18))]","[('WIDER FACE', (3, 5)), ('standard practices', (9, 11)), ('flip', (14, 15)), ('[ 500 , 800 , 1100 , 1400 , 1700 ] ) strategies', (26, 39))]",[],[],[],[]
experimental-setup,Box voting [ 15 ] is applied on the union set of predicted face boxes using an IoU threshold at 0.4 .,"[('applied on', (6, 8)), ('of', (11, 12)), ('using', (15, 16)), ('at', (19, 20))]","[('Box voting', (0, 2)), ('union set', (9, 11)), ('predicted face boxes', (12, 15)), ('IoU threshold', (17, 19)), ('0.4', (20, 21))]",[],[],[],[]
ablation-analysis,"Adding the branch of five facial landmark regression significantly improves the face box AP ( 0.408 % ) and mAP ( 0.775 % ) on the Hard subset , suggesting that landmark localisation is crucial for improving the accuracy of face detection .","[('Adding', (0, 1)), ('significantly improves', (8, 10)), ('on', (24, 25))]","[('branch', (2, 3)), ('face box AP ( 0.408 % ) and mAP ( 0.775 % )', (11, 24)), ('Hard subset', (26, 28))]",[],[],[],[]
ablation-analysis,"By contrast , adding the dense regression branch increases the face box AP on Easy and Medium subsets but slightly deteriorates the results on the Hard subset , indicating the difficulty of dense regression under challenging scenarios .","[('adding', (3, 4)), ('increases', (8, 9)), ('on', (13, 14)), ('on', (23, 24))]","[('dense regression branch', (5, 8)), ('face box AP', (10, 13)), ('Easy and Medium subsets', (14, 18)), ('slightly deteriorates', (19, 21)), ('results', (22, 23)), ('Hard subset', (25, 27))]",[],[],[],[]
ablation-analysis,"Nevertheless , learning landmark and dense regression jointly enables a further improvement compared to adding landmark regression only .","[('learning', (2, 3)), ('enables', (8, 9)), ('compared to', (12, 14))]","[('landmark and dense regression', (3, 7)), ('jointly', (7, 8)), ('further improvement', (10, 12))]",[],[],[],[]
results,Face box Accuracy,[],"[('Face box Accuracy', (0, 3))]",[],[],[],[]
results,"More specifically , RetinaFace produces the best AP in all subsets of both validation and test sets , i.e. , 96.9 % ( Easy ) , 96.1 % ( Medium ) and 91.8 % ( Hard ) for validation set , and 96.3 % ( Easy ) , 95.6 % ( Medium ) and 91.4 % ( Hard ) for test set .","[('produces', (4, 5)), ('in', (8, 9)), ('i.e.', (18, 19)), ('for', (37, 38)), ('for', (59, 60))]","[('RetinaFace', (3, 4)), ('best AP', (6, 8)), ('all subsets', (9, 11)), ('validation and test sets', (13, 17)), ('validation set', (38, 40)), ('test set', (60, 62))]",[],[],[],[]
results,"Compared to the recent best performed method , Reti - na Face sets up a new impressive record ( 91.4 % v.s. 90.3 % ) on the Hard subset which contains a large number of tiny faces .","[('Compared to', (0, 2)), ('sets up', (12, 14)), ('on', (25, 26)), ('which contains', (29, 31))]","[('recent best performed method', (3, 7)), ('Reti - na Face', (8, 12)), ('new impressive record (', (15, 19)), ('91.4 % v.s. 90.3 % )', (19, 25)), ('Hard subset', (27, 29)), ('large number of tiny faces', (32, 37))]",[],[],[],[]
results,"RetinaFace successfully finds about 900 faces ( threshold at 0.5 ) out of the reported 1 , 151 faces .","[('successfully finds', (1, 3)), ('out of', (11, 13))]","[('RetinaFace', (0, 1)), ('about 900 faces ( threshold at 0.5 )', (3, 11)), ('reported 1 , 151 faces', (14, 19))]",[],[],[],[]
results,Five Facial Landmark Accuracy,[],"[('Five Facial Landmark Accuracy', (0, 4))]",[],[],[],[]
results,RetinaFace significantly decreases the normalised mean errors ( NME ) from 2.72 % to 2.21 % when compared to MTCNN .,"[('significantly decreases', (1, 3)), ('from', (10, 11)), ('compared to', (17, 19))]","[('RetinaFace', (0, 1)), ('normalised mean errors ( NME )', (4, 10)), ('2.72 % to 2.21 %', (11, 16)), ('MTCNN', (19, 20))]",[],[],[],[]
results,"Compared to MTCNN , RetinaFace significantly decreases the failure rate from 26.31 % to 9.37 % ( the NME threshold at 10 % ) .","[('Compared to', (0, 2)), ('significantly decreases', (5, 7)), ('from', (10, 11))]","[('MTCNN', (2, 3)), ('RetinaFace', (4, 5)), ('failure rate', (8, 10)), ('26.31 %', (11, 13))]",[],[],[],[]
results,Dense Facial Landmark Accuracy,[],"[('Dense Facial Landmark Accuracy', (0, 4))]",[],[],[],[]
results,"Even though the performance gap exists between supervised and self - supervised methods , the dense regression results of RetinaFace are comparable with these state - of - the - art methods .","[('of', (18, 19)), ('comparable with', (21, 23))]","[('dense regression results', (15, 18)), ('RetinaFace', (19, 20)), ('state - of - the - art methods', (24, 32))]",[],[],[],[]
ablation-analysis,"More specifically , we observe that ( 1 ) five facial landmarks regression can alleviate the training difficulty of dense regression branch and significantly improve the dense regression results .","[('observe', (4, 5)), ('alleviate', (14, 15)), ('of', (18, 19)), ('significantly improve', (23, 25))]","[('five facial landmarks regression', (9, 13)), ('training difficulty', (16, 18)), ('dense regression branch', (19, 22)), ('dense regression results', (26, 29))]",[],[],[],[]
ablation-analysis,( 2 ) using single - stage features ( as in RetinaFace ) to predict dense correspondence parameters is much harder than employing ( Region of Interest ) RoI features ( as in Mesh Decoder ) .,"[('using', (3, 4)), ('to predict', (13, 15)), ('is', (18, 19)), ('than', (21, 22))]","[('single - stage features', (4, 8)), ('RetinaFace', (11, 12)), ('dense correspondence parameters', (15, 18)), ('much harder', (19, 21)), ('employing', (22, 23)), ('( Region of Interest ) RoI features', (23, 30)), ('Mesh Decoder', (33, 35))]",[],[],[],[]
results,Face Recognition Accuracy,[],"[('Face Recognition Accuracy', (0, 3))]",[],[],[],[]
results,"The results on CFP - FP , demonstrate that Reti - na Face can boost ArcFace 's verification accuracy from 98.37 % to 99.49 % .","[('on', (2, 3)), ('demonstrate', (7, 8)), ('boost', (14, 15)), ('from', (19, 20))]","[('CFP - FP', (3, 6)), ('Reti - na Face', (9, 13)), (""ArcFace 's verification accuracy"", (15, 19)), ('98.37 %', (20, 22)), ('99.49 %', (23, 25))]",[],[],[],[]
research-problem,WIDER FACE : A Face Detection Benchmark,[],"[('WIDER FACE', (0, 2)), ('Face Detection', (4, 6))]",[],[],[],[]
research-problem,We introduce a large - scale face detection dataset called WIDER FACE .,"[('introduce', (1, 2)), ('called', (9, 10))]","[('large - scale face detection dataset', (3, 9)), ('WIDER FACE', (10, 12))]",[],[],[],[]
experiments,"It consists of 32 , 203 images with 393 , 703 labeled faces , which is 10 times larger than the current largest face detection dataset .","[('consists of', (1, 3)), ('with', (7, 8)), ('than', (19, 20))]","[('32 , 203 images', (3, 7)), ('393 , 703 labeled faces', (8, 13)), ('10 times larger', (16, 19)), ('current largest face detection dataset', (21, 26))]",[],[],[],[]
experiments,"The faces vary largely in appearance , pose , and scale , as shown in .","[('vary largely in', (2, 5))]","[('faces', (1, 2)), ('appearance , pose , and scale', (5, 11))]",[],[],[],[]
model,"In order to quantify different types of errors , we annotate multiple attributes : occlusion , pose , and event categories , which allows in depth analysis of existing algorithms .","[('annotate', (10, 11))]","[('multiple attributes', (11, 13)), ('occlusion', (14, 15)), ('event categories', (19, 21))]",[],[],[],[]
baselines,"We select VJ , ACF , DPM , and Faceness as baselines .","[('select', (1, 2)), ('as', (10, 11))]","[('VJ , ACF , DPM , and Faceness', (2, 10)), ('baselines', (11, 12))]",[],[],[],[]
results,Overall .,[],[],[],[],[],[]
results,"Faceness outperforms other methods on three subsets , with DPM and ACF as marginal second and third .","[('outperforms', (1, 2)), ('on', (4, 5)), ('with', (8, 9)), ('as', (12, 13))]","[('Faceness', (0, 1)), ('other methods', (2, 4)), ('three subsets', (5, 7)), ('DPM and ACF', (9, 12))]",[],[],[],[]
results,"For the easy set , the average precision ( AP ) of most methods are over 60 % , but none of them surpasses 75 % .","[('For', (0, 1)), ('of', (11, 12)), ('are', (14, 15)), ('surpasses', (23, 24))]","[('easy set', (2, 4)), ('average precision ( AP )', (6, 11)), ('most methods', (12, 14)), ('over 60 %', (15, 18)), ('75 %', (24, 26))]",[],[],[],[]
results,The performance drops 10 % for all methods on the medium set .,"[('for', (5, 6)), ('on', (8, 9))]","[('performance', (1, 2)), ('drops', (2, 3)), ('10 %', (3, 5)), ('all methods', (6, 8)), ('medium set', (10, 12))]",[],[],[],[]
results,The hard set is even more challenging .,"[('is', (3, 4))]","[('hard set', (1, 3)), ('even more challenging', (4, 7))]",[],[],[],[]
results,Scale .,[],"[('Scale', (0, 1))]",[],[],[],[]
results,The results of small scale are abysmal : none of the algorithms is able to achieve more than 12 % AP .,"[('of', (2, 3)), ('are', (5, 6)), ('able to achieve', (13, 16))]","[('results', (1, 2)), ('small scale', (3, 5)), ('abysmal', (6, 7)), ('more than 12 % AP', (16, 21))]",[],[],[],[]
results,Occlusion .,[],"[('Occlusion', (0, 1))]",[],[],[],[]
results,"With partial occlusion , the performance drops significantly .","[('With', (0, 1))]","[('partial occlusion', (1, 3)), ('performance', (5, 6)), ('drops', (6, 7)), ('significantly', (7, 8))]",[],[],[],[]
results,The maximum AP is only 26.5 % achieved by Faceness .,"[('is', (3, 4)), ('achieved by', (7, 9))]","[('maximum AP', (1, 3)), ('only 26.5 %', (4, 7)), ('26.5 %', (5, 7)), ('Faceness', (9, 10))]",[],[],[],[]
results,Pose .,[],"[('Pose', (0, 1))]",[],[],[],[]
results,"The best performance is achieved by Faceness , with a recall below 20 % .","[('achieved by', (4, 6)), ('with', (8, 9)), ('below', (11, 12))]","[('best performance', (1, 3)), ('Faceness', (6, 7)), ('recall', (10, 11)), ('20 %', (12, 14))]",[],[],[],[]
research-problem,"Although tremendous strides have been made in face detection , one of the remaining open challenges is to achieve real - time speed on the CPU as well as maintain high performance , since effective models for face detection tend to be computationally prohibitive .",[],[],[],[],[],[]
code,Code is available at https://github.com/sfzhang15/FaceBoxes .,[],"[('https://github.com/sfzhang15/FaceBoxes', (4, 5))]",[],[],[],[]
model,"In this paper , inspired by the RPN in Faster R - CNN and the multi-scale mechanism in SSD , we develop a state - of - the - art face detector with real - time speed on the CPU .","[('in', (8, 9)), ('develop', (21, 22)), ('with', (32, 33)), ('on', (37, 38))]","[('state - of - the - art face detector', (23, 32)), ('real - time speed', (33, 37)), ('CPU', (39, 40))]",[],[],[],[]
model,"Specifically , we propose a novel face detector named FaceBoxes , which only contains a single fully convolutional neural network and can be trained end - to - end .","[('propose', (3, 4)), ('named', (8, 9)), ('trained', (23, 24))]","[('novel face detector', (5, 8)), ('FaceBoxes', (9, 10)), ('single fully convolutional neural network', (15, 20)), ('end - to - end', (24, 29))]",[],[],[],[]
model,The proposed method has a lightweight yet powerful network structure ( as shown in ) that consists of the Rapidly Digested Convolutional Layers ( RDCL ) and the Multiple Scale Convolutional Layers ( MSCL ) .,"[('consists of', (16, 18))]","[('proposed method', (1, 3)), ('lightweight yet powerful network structure', (5, 10)), ('Rapidly Digested Convolutional Layers ( RDCL )', (19, 26)), ('Multiple Scale Convolutional Layers ( MSCL )', (28, 35))]",[],[],[],[]
model,"The RDCL is designed to enable FaceBoxes to achieve real - time speed on the CPU , and the MSCL aims at enriching the receptive fields and discretizing anchors over different layers to handle various scales of faces .","[('designed to enable', (3, 6)), ('to achieve', (7, 9)), ('on', (13, 14)), ('aims at', (20, 22)), ('discretizing', (27, 28)), ('over', (29, 30)), ('to handle', (32, 34))]","[('RDCL', (1, 2)), ('FaceBoxes', (6, 7)), ('real - time speed', (9, 13)), ('CPU', (15, 16)), ('MSCL', (19, 20)), ('enriching', (22, 23)), ('receptive fields', (24, 26)), ('anchors', (28, 29)), ('different layers', (30, 32)), ('various scales', (34, 36))]",[],[],[],[]
model,"Besides , we propose a new anchor densification strategy to make different types of anchors have the same density on the input image , which significantly improves the recall rate of small faces .","[('propose', (3, 4)), ('to make', (9, 11)), ('have', (15, 16)), ('on', (19, 20)), ('significantly improves', (25, 27)), ('of', (30, 31))]","[('new anchor densification strategy', (5, 9)), ('different types of anchors', (11, 15)), ('same density', (17, 19)), ('input image', (21, 23)), ('recall rate', (28, 30)), ('small faces', (31, 33))]",[],[],[],[]
experimental-setup,"We first filter out most boxes by a confidence threshold of 0.05 and keep the top 400 boxes before applying NMS , then we perform NMS with jaccard overlap of 0.3 and keep the top 200 boxes .","[('filter out', (2, 4)), ('by', (6, 7)), ('of', (10, 11)), ('keep', (13, 14)), ('before applying', (18, 20)), ('perform', (24, 25)), ('with', (26, 27)), ('of', (29, 30)), ('keep', (32, 33))]","[('most boxes', (4, 6)), ('confidence threshold', (8, 10)), ('0.05', (11, 12)), ('top 400 boxes', (15, 18)), ('NMS', (20, 21)), ('NMS', (25, 26)), ('jaccard overlap', (27, 29)), ('0.3', (30, 31)), ('top 200 boxes', (34, 37))]",[],[],[],[]
experimental-setup,We measure the speed using Titan X ( Pascal ) and cuDNN v 5.1 with Intel Xeon E5-2660v3@2.60 GHz .,"[('measure', (1, 2)), ('using', (4, 5)), ('with', (14, 15))]","[('speed', (3, 4)), ('Titan X ( Pascal )', (5, 10)), ('cuDNN v 5.1', (11, 14)), ('Intel Xeon E5-2660v3@2.60 GHz', (15, 19))]",[],[],[],[]
ablation-analysis,FaceBoxes Anchor densification strategy is crucial .,[],"[('FaceBoxes Anchor densification strategy', (0, 4))]",[],[],[],[]
ablation-analysis,"Our anchor densification strategy is used to increase the density of small anchors ( i.e. , 32 32 and 64 64 ) in order to improve the recall rate of small faces .","[('of', (10, 11)), ('to improve', (24, 26)), ('of', (29, 30))]","[('anchor densification strategy', (1, 4)), ('density', (9, 10)), ('small anchors ( i.e. , 32 32 and 64 64 )', (11, 22)), ('recall rate', (27, 29)), ('small faces', (30, 32))]",[],[],[],[]
ablation-analysis,"2 , we can see that the m AP on FDDB is reduced from 96.0 % to 94.9 % after ablating the anchor densification strategy .","[('see that', (4, 6)), ('on', (9, 10)), ('reduced from', (12, 14)), ('to', (16, 17)), ('after ablating', (19, 21))]","[('m AP', (7, 9)), ('FDDB', (10, 11)), ('96.0 %', (14, 16)), ('94.9 %', (17, 19)), ('anchor densification strategy', (22, 25))]",[],[],[],[]
ablation-analysis,RDCL is efficient and accuracy - preserving .,"[('is', (1, 2))]","[('RDCL', (0, 1)), ('efficient and accuracy - preserving', (2, 7))]",[],[],[],[]
results,AFW dataset .,[],"[('AFW dataset', (0, 2))]",[],[],[],[]
results,"As illustrated in , our FaceBoxes outperforms all others by a large margin .","[('outperforms', (6, 7)), ('by', (9, 10))]","[('our FaceBoxes', (4, 6)), ('all others', (7, 9)), ('large margin', (11, 13))]",[],[],[],[]
results,PASCAL face dataset .,[],"[('PASCAL face dataset', (0, 3))]",[],[],[],[]
results,"Our method significantly outperforms all other methods and commercial face detectors ( e.g. , SkyBiometry , Face + + and Picasa ) .","[('significantly outperforms', (2, 4))]","[('Our method', (0, 2)), ('all other methods', (4, 7)), ('commercial face detectors', (8, 11))]",[],[],[],[]
results,FDDB dataset .,[],"[('FDDB dataset', (0, 2))]",[],[],[],[]
results,Our FaceBoxes achieves the state - of - the - art performance and outperforms all others by a large margin on discontinuous and continuous ROC curves .,"[('achieves', (2, 3)), ('by', (16, 17)), ('on', (20, 21))]","[('Our FaceBoxes', (0, 2)), ('state - of - the - art performance', (4, 12)), ('outperforms', (13, 14)), ('all others', (14, 16)), ('large margin', (18, 20)), ('discontinuous and continuous ROC curves', (21, 26))]",[],[],[],[]
research-problem,"HyperFace : A Deep Multi-task Learning Framework for Face Detection , Landmark Localization , Pose Estimation , and Gender Recognition",[],"[('Face Detection', (8, 10))]",[],[],[],[]
model,"In this paper , we present a novel framework based on CNNs for simultaneous face detection , facial landmarks localization , head pose estimation and gender recognition from a given image ( see ) .","[('present', (5, 6)), ('based on', (9, 11)), ('for', (12, 13))]","[('novel framework', (7, 9)), ('CNNs', (11, 12)), ('simultaneous face detection', (13, 16)), ('facial landmarks localization', (17, 20)), ('head pose estimation', (21, 24)), ('gender recognition', (25, 27))]",[],[],[],[]
model,We design a CNN architecture to learn common features for these tasks and exploit the synergy among them .,"[('design', (1, 2)), ('to learn', (5, 7)), ('for', (9, 10)), ('exploit', (13, 14))]","[('CNN architecture', (3, 5)), ('common features', (7, 9)), ('synergy', (15, 16))]",[],[],[],[]
model,We refer the set of intermediate layer features as hyperfeatures .,"[('refer', (1, 2)), ('as', (8, 9))]","[('intermediate layer features', (5, 8)), ('hyperfeatures', (9, 10))]",[],[],[],[]
model,"Hence , we construct a separate fusion - CNN to fuse the hyperfeatures .","[('construct', (3, 4)), ('to fuse', (9, 11))]","[('separate fusion - CNN', (5, 9)), ('hyperfeatures', (12, 13))]",[],[],[],[]
model,"In order to learn the tasks , we train them simultaneously using multiple loss functions .","[('to learn', (2, 4)), ('train them', (8, 10)), ('using', (11, 12))]","[('tasks', (5, 6)), ('simultaneously', (10, 11)), ('multiple loss functions', (12, 15))]",[],[],[],[]
model,The deep CNN combined with the fusion - CNN can be learned together in an end -toend fashion .,"[('combined with', (3, 5)), ('can be', (9, 11)), ('learned together', (11, 13)), ('in', (13, 14))]","[('deep CNN', (1, 3)), ('fusion - CNN', (6, 9)), ('end -toend fashion', (15, 18))]",[],[],[],[]
experiments,Face Detection,[],"[('Face Detection', (0, 2))]",[],[],[],[]
experiments,"As can be seen from these figures , both HyperFace and HF - ResNet outperform all the reported academic and commercial detectors on the AFW and PASCAL datasets .","[('outperform', (14, 15)), ('on', (22, 23))]","[('both HyperFace and HF - ResNet', (8, 14)), ('all the reported academic and commercial detectors', (15, 22)), ('AFW and PASCAL datasets', (24, 28))]",[],[],[],[]
experiments,"HyperFace achieves a high mean average precision ( m AP ) of 97.9 % and 92.46 % , for AFW and PASCAL datasets respectively .","[('achieves', (1, 2)), ('of', (11, 12)), ('for', (18, 19))]","[('HyperFace', (0, 1)), ('high mean average precision ( m AP )', (3, 11)), ('97.9 % and 92.46 %', (12, 17)), ('AFW and PASCAL datasets', (19, 23))]",[],[],[],[]
experiments,HF - ResNet further improves the m AP to 99.4 % and 96.2 %,"[('improves', (4, 5)), ('to', (8, 9))]","[('HF - ResNet', (0, 3)), ('m AP', (6, 8)), ('99.4 % and 96.2 %', (9, 14))]",[],[],[],[]
experiments,"In spite of these issues , HyperFace performance is comparable to recently published deep learning - based face detection methods such as DP2MFD and Faceness on the FDDB dataset 1 with m AP of 90.1 % .","[('comparable to', (9, 11)), ('on', (25, 26)), ('with', (30, 31)), ('of', (33, 34))]","[('HyperFace performance', (6, 8)), ('recently published deep learning - based face detection methods', (11, 20)), ('DP2MFD', (22, 23)), ('Faceness', (24, 25)), ('FDDB dataset', (27, 29)), ('m AP', (31, 33)), ('90.1 %', (34, 36))]",[],[],[],[]
experiments,clearly show that multitask CNNs ( Multitask Face and HyperFace ) outperform R - CNN Face by a wide margin .,"[('show', (1, 2)), ('outperform', (11, 12)), ('by', (16, 17))]","[('multitask CNNs ( Multitask Face and HyperFace )', (3, 11)), ('R - CNN Face', (12, 16)), ('wide margin', (18, 20))]",[],[],[],[]
experiments,Landmarks Localization,[],"[('Landmarks Localization', (0, 2))]",[],[],[],[]
experiments,shows that HyperFace performs consistently accurate overall pose angles .,"[('shows', (0, 1)), ('performs', (3, 4))]","[('HyperFace', (2, 3)), ('consistently accurate', (4, 6)), ('overall pose angles', (6, 9))]",[],[],[],[]
experiments,"Moreover , we find that R - CNN Fiducial and Multitask Face attain similar performance .","[('find that', (3, 5)), ('attain', (12, 13))]","[('R - CNN Fiducial and Multitask Face', (5, 12)), ('similar performance', (13, 15))]",[],[],[],[]
experiments,"Additionally , we observe that HF - ResNet significantly improves the performance over HyperFace for both AFW and AFLW datasets .","[('observe', (3, 4)), ('significantly improves', (8, 10)), ('over', (12, 13)), ('for', (14, 15))]","[('HF - ResNet', (5, 8)), ('performance', (11, 12)), ('HyperFace', (13, 14)), ('AFW and AFLW datasets', (16, 20))]",[],[],[],[]
experiments,"We observe that HyperFace achieves a comparable NME of 10.88 , while HF - ResNet achieves the state - of - theart result on IBUG with NME of 8.18 .","[('observe', (1, 2)), ('achieves', (4, 5)), ('of', (8, 9)), ('achieves', (15, 16)), ('on', (23, 24)), ('with', (25, 26)), ('of', (27, 28))]","[('HyperFace', (3, 4)), ('comparable NME', (6, 8)), ('10.88', (9, 10)), ('HF - ResNet', (12, 15)), ('state - of - theart result', (17, 23)), ('IBUG', (24, 25)), ('NME', (26, 27)), ('8.18', (28, 29))]",[],[],[],[]
experiments,Pose Estimation,[],"[('Pose Estimation', (0, 2))]",[],[],[],[]
experiments,"As can be seen from the figure , both HyperFace and HF - ResNet outperform existing methods by a large margin .","[('outperform', (14, 15)), ('by', (17, 18))]","[('both HyperFace and HF - ResNet', (8, 14)), ('existing methods', (15, 17)), ('large margin', (19, 21))]",[],[],[],[]
results,"HF - ResNet further improves the performance for roll , pitch as well as yaw .","[('further improves', (3, 5)), ('for', (7, 8)), ('as well as', (11, 14))]","[('HF - ResNet', (0, 3)), ('performance', (6, 7)), ('roll , pitch', (8, 11)), ('yaw', (14, 15))]",[],[],[],[]
results,Gender Recognition,[],"[('Gender Recognition', (0, 2))]",[],[],[],[]
experiments,"On the LFWA dataset , our method outperforms PANDA and FaceTracer , and is equal to .","[('On', (0, 1)), ('outperforms', (7, 8))]","[('LFWA dataset', (2, 4)), ('our method', (5, 7)), ('PANDA and FaceTracer', (8, 11))]",[],[],[],[]
results,HF - ResNet achieves state - of - the - art results on both CelebA and LFWA datasets .,"[('achieves', (3, 4)), ('on', (12, 13))]","[('HF - ResNet', (0, 3)), ('state - of - the - art results', (4, 12)), ('CelebA and LFWA datasets', (14, 18))]",[],[],[],[]
results,The HyperFace with a linear bounding box regression and traditional NMS achieves a m AP of 94 % .,"[('with', (2, 3)), ('achieves', (11, 12)), ('of', (15, 16))]","[('HyperFace', (1, 2)), ('linear bounding box regression', (4, 8)), ('traditional NMS', (9, 11)), ('m AP', (13, 15)), ('94 %', (16, 18))]",[],[],[],[]
research-problem,"Face detection has been well studied for many years and one of remaining challenges is to detect small , blurred and partially occluded faces in uncontrolled environment .",[],"[('Face detection', (0, 2))]",[],[],[],[]
code,Our code is available in Pad - dlePaddle : https://github.com/PaddlePaddle/models/tree/develop/,[],"[('https://github.com/PaddlePaddle/models/tree/develop/', (9, 10))]",[],[],[],[]
model,"In this work , we use a semi-supervised solution to generate approximate labels for contextual parts related to faces and a series of anchors called PyramidAnchors are invented to be easily added to general anchor - based architectures .","[('use', (5, 6)), ('to generate', (9, 11)), ('for', (13, 14)), ('related to', (16, 18)), ('called', (24, 25))]","[('semi-supervised solution', (7, 9)), ('approximate labels', (11, 13)), ('contextual parts', (14, 16)), ('faces', (18, 19)), ('series of anchors', (21, 24)), ('PyramidAnchors', (25, 26)), ('general anchor - based architectures', (33, 38))]",[],[],[],[]
model,We investigate the performance of Feature Pyramid Networks ( FPN ) and modify it into a Low - level Feature Pyramid Network ( LFPN ) to join mutually helpful features together .,"[('investigate', (1, 2)), ('of', (4, 5)), ('modify it into', (12, 15)), ('to join', (25, 27))]","[('performance', (3, 4)), ('Feature Pyramid Networks ( FPN )', (5, 11)), ('Low - level Feature Pyramid Network ( LFPN )', (16, 25)), ('mutually helpful features', (27, 30))]",[],[],[],[]
model,We introduce the Context - sensitive prediction module ( CPM ) to incorporate context information around the target face with a wider and deeper network .,"[('introduce', (1, 2)), ('to incorporate', (11, 13)), ('around', (15, 16)), ('with', (19, 20))]","[('Context - sensitive prediction module ( CPM )', (3, 11)), ('context information', (13, 15)), ('target face', (17, 19)), ('wider and deeper network', (21, 25))]",[],[],[],[]
model,"Meanwhile , we propose a max - in - out layer for the prediction module to further improve the capability of classification network .","[('propose', (3, 4)), ('for', (11, 12)), ('to further improve', (15, 18)), ('of', (20, 21))]","[('max - in - out layer', (5, 11)), ('prediction module', (13, 15)), ('capability', (19, 20)), ('classification network', (21, 23))]",[],[],[],[]
model,"In addition , we propose a training strategy named as Data - anchor - sampling to make an adjustment on the distribution of the training dataset .","[('propose', (4, 5)), ('named as', (8, 10)), ('to make', (15, 17)), ('on', (19, 20)), ('of', (22, 23))]","[('training strategy', (6, 8)), ('Data - anchor - sampling', (10, 15)), ('adjustment', (18, 19)), ('distribution', (21, 22)), ('training dataset', (24, 26))]",[],[],[],[]
results,FDDB Dataset .,[],"[('FDDB Dataset', (0, 2))]",[],[],[],[]
results,The PyramidBox achieves state - ofart performance and the result is shown in and .,"[('achieves', (2, 3))]","[('PyramidBox', (1, 2)), ('state - ofart performance', (3, 7))]",[],[],[],[]
results,WIDER FACE Dataset .,[],"[('WIDER FACE Dataset', (0, 3))]",[],[],[],[]
results,"Our PyramidBox outperforms others across all three subsets , i.e. 0.961 ( easy ) , 0.950 ( medium ) , 0.889 ( hard ) for validation set , and 0.956 ( easy ) , 0.946 ( medium ) , 0.887 ( hard ) for testing set .","[('across', (4, 5)), ('i.e.', (9, 10)), ('for', (24, 25)), ('for', (43, 44))]","[('Our PyramidBox', (0, 2)), ('outperforms', (2, 3)), ('others', (3, 4)), ('all three subsets', (5, 8)), ('0.961 ( easy )', (10, 14)), ('validation set', (25, 27)), ('testing set', (44, 46))]",[],[],[],[]
research-problem,CMS- RCNN : Contextual Multi- Scale Region - based CNN for Unconstrained Face Detection,[],"[('Unconstrained Face Detection', (11, 14))]",[],[],[],[]
research-problem,"Robust face detection in the wild is one of the ultimate components to support various facial related problems , i.e. unconstrained face recognition , facial periocular recognition , facial landmarking and pose estimation , facial expression recognition , 3 D facial model construction , etc .",[],"[('Robust face detection in the wild', (0, 6))]",[],[],[],[]
research-problem,"Although the face detection problem has been intensely studied for decades with various commercial applications , it still meets problems in some real - world scenarios due to numerous challenges , e.g. heavy facial occlusions , extremely low resolutions , strong illumination , exceptionally pose variations , image or video compression artifacts , etc .",[],[],[],[],[],[]
model,"This paper presents an advanced CNN based approach named Contextual Multi - Scale Region - based CNN ( CMS - RCNN ) to handle the problem of face detection in digital face images collected under numerous challenging conditions , e.g. heavy facial occlusion , illumination , extreme offangle , low - resolution , scale difference , etc .","[('named', (8, 9))]","[('Contextual Multi - Scale Region - based CNN ( CMS - RCNN )', (9, 22)), ('face detection', (27, 29))]",[],[],[],[]
model,"Our designed region - based CNN architecture allows the network to simultaneously look at multi-scale features , as well as to explicitly look outside facial regions as the potential body regions .","[('allows', (7, 8)), ('to', (10, 11)), ('simultaneously look at', (11, 14)), ('explicitly look outside', (21, 24)), ('as', (26, 27))]","[('designed region - based CNN architecture', (1, 7)), ('network', (9, 10)), ('multi-scale features', (14, 16)), ('facial regions', (24, 26)), ('potential body regions', (28, 31))]",[],[],[],[]
model,Additionally this architecture also helps to synchronize both the global semantic features in high level layers and the localization features in low level layers for facial representation .,"[('helps to', (4, 6)), ('synchronize', (6, 7)), ('in', (12, 13)), ('in', (20, 21)), ('for', (24, 25))]","[('global semantic features', (9, 12)), ('high level layers', (13, 16)), ('localization features', (18, 20)), ('low level layers', (21, 24)), ('facial representation', (25, 27))]",[],[],[],[]
model,Our CMS - RCNN method introduces the Multi - Scale Region Proposal Network ( MS - RPN ) to generate a set of region candidates and the Contextual Multi - Scale Convolution Neural Network ( CMS - CNN ) to do inference on the region candidates of facial regions .,"[('introduces', (5, 6)), ('to generate', (18, 20)), ('to do', (39, 41)), ('on', (42, 43)), ('of', (46, 47))]","[('CMS - RCNN method', (1, 5)), ('Multi - Scale Region Proposal Network ( MS - RPN )', (7, 18)), ('region candidates', (23, 25)), ('Contextual Multi - Scale Convolution Neural Network ( CMS - CNN )', (27, 39)), ('inference', (41, 42)), ('region candidates', (44, 46)), ('facial regions', (47, 49))]",[],[],[],[]
experimental-setup,Our CMS - RCNN is implemented in the Caffe deep learning framework .,"[('implemented in', (5, 7))]","[('CMS - RCNN', (1, 4)), ('Caffe deep learning framework', (8, 12))]",[],[],[],[]
experimental-setup,"The first 5 sets of convolution layers have the same architecture as the deep VGG - 16 model , and during training their parameters are initialized from the pre-trained VGG - 16 .","[('have', (7, 8)), ('as', (11, 12)), ('during', (20, 21)), ('initialized from', (25, 27))]","[('first 5 sets of convolution layers', (1, 7)), ('same architecture', (9, 11)), ('deep VGG - 16 model', (13, 18)), ('training', (21, 22)), ('parameters', (23, 24)), ('pre-trained VGG - 16', (28, 32))]",[],[],[],[]
experimental-setup,"In the MS - RPN , we want ' conv3 ' , ' conv4 ' , and ' conv5 ' to be synchronized to the same size so that concatenation can be applied .","[('In', (0, 1)), ('want', (7, 8)), ('to be', (20, 22)), ('to', (23, 24))]","[('MS - RPN', (2, 5)), (""' conv3 ' , ' conv4 ' , and ' conv5 '"", (8, 20)), ('synchronized', (22, 23)), ('same size', (25, 27)), ('concatenation', (29, 30))]",[],[],[],[]
baselines,So ' conv3 ' is followed by pooling layer to perform down - sampling .,"[('followed by', (5, 7)), ('to perform', (9, 11))]","[('conv3', (2, 3)), ('pooling layer', (7, 9)), ('down - sampling', (11, 14))]",[],[],[],[]
experimental-setup,"Then ' conv3 ' , ' conv4 ' , and ' conv5 ' are normalized along the channel axis to a learnable re-weighting scale and concatenated together .","[('along', (15, 16)), ('to', (19, 20))]","[(""' conv3 ' , ' conv4 ' , and ' conv5 '"", (1, 13)), ('normalized', (14, 15)), ('channel axis', (17, 19)), ('learnable re-weighting scale', (21, 24)), ('concatenated together', (25, 27))]",[],[],[],[]
experimental-setup,"To ensure training convergence , the initial re-weighting scale needs to be carefully set .","[('To ensure', (0, 2)), ('needs to be', (9, 12))]","[('training convergence', (2, 4)), ('initial re-weighting scale', (6, 9)), ('carefully set', (12, 14))]",[],[],[],[]
experimental-setup,"Here we set the initial scale of ' conv3 ' , ' conv4 ' , and ' conv5 ' to be 66.84 , 94.52 , and 94.52 respectively .","[('set', (2, 3)), ('of', (6, 7)), ('to be', (19, 21))]","[('initial scale', (4, 6)), (""' conv3 ' , ' conv4 ' , and ' conv5 '"", (7, 19)), ('66.84 , 94.52 , and 94.52', (21, 27))]",[],[],[],[]
experimental-setup,"In the CMS - CNN , the RoI pooling layer already ensure that the pooled feature maps have the same size .","[('In', (0, 1)), ('ensure that', (11, 13)), ('have', (17, 18))]","[('CMS - CNN', (2, 5)), ('RoI pooling layer', (7, 10)), ('pooled feature maps', (14, 17)), ('same size', (19, 21))]",[],[],[],[]
experimental-setup,"Specifically , features pooled from ' conv3 ' , ' conv4 ' , and ' conv5 ' are initialized with scale to be 57.75 , 81.67 , and 81.67 respectively , for both face and body pipelines .","[('pooled from', (3, 5)), ('initialized with', (18, 20)), ('to be', (21, 23)), ('for', (31, 32))]","[('features', (2, 3)), (""' conv3 ' , ' conv4 ' , and ' conv5 '"", (5, 17)), ('scale', (20, 21)), ('57.75 , 81.67 , and 81.67', (23, 29)), ('face and body pipelines', (33, 37))]",[],[],[],[]
experimental-setup,"The MS - RPN and the CMS - CNN share the same parameters for all convolution layers so that computation can be done once , resulting in higher efficiency .","[('share', (9, 10)), ('for', (13, 14)), ('resulting in', (25, 27))]","[('MS - RPN and the CMS - CNN', (1, 9)), ('same parameters', (11, 13)), ('all convolution layers', (14, 17)), ('computation', (19, 20)), ('once', (23, 24)), ('higher efficiency', (27, 29))]",[],[],[],[]
experimental-setup,"Additionally , in order to shrink the channel size of the concatenated feature map , a 11 convolution layer is then employed .","[('to shrink', (4, 6)), ('of', (9, 10))]","[('channel size', (7, 9)), ('concatenated feature map', (11, 14)), ('11 convolution layer', (16, 19)), ('employed', (21, 22))]",[],[],[],[]
experiments,Experiments on WIDER FACE Dataset,[],"[('WIDER FACE Dataset', (2, 5))]",[],[],[],[]
results,"It achieves the best average precision in all level faces , i.e. AP = 0.902 ( Easy ) , 0.874 ( Medium ) and 0.643 ( Hard ) , and outperforms the second best baseline by 26.0 % ( Easy ) , 37.4 % ( Medium ) and 60.8 % ( Hard ) .","[('achieves', (1, 2)), ('in', (6, 7)), ('i.e.', (11, 12)), ('outperforms', (30, 31)), ('by', (35, 36))]","[('best average precision', (3, 6)), ('all level faces', (7, 10)), ('second best baseline', (32, 35)), ('26.0 % ( Easy )', (36, 41)), ('37.4 % ( Medium )', (42, 47))]",[],[],[],[]
results,Experiments on FDDB Face Database,[],"[('FDDB Face Database', (2, 5))]",[],[],[],[]
results,Our method achieves the best recall rate on this database .,"[('achieves', (2, 3))]","[('Our method', (0, 2)), ('best recall rate', (4, 7))]",[],[],[],[]
results,The proposed CMS - RCNN approach outperforms most of the published face detection methods and achieves a very high recall rate comparing against all other methods ( as shown ) .,"[('outperforms', (6, 7)), ('achieves', (15, 16)), ('comparing against', (21, 23))]","[('proposed CMS - RCNN approach', (1, 6)), ('most of the published face detection methods', (7, 14)), ('very high recall rate', (17, 21)), ('all other methods', (23, 26))]",[],[],[],[]
research-problem,Face Detection Using Improved Faster RCNN,[],"[('Face Detection', (0, 2))]",[],[],[],[]
research-problem,"In this report , we propose a detailed design Faster RCNN method named FDNet1.0 for face detection , which achieves more decent performance than previous methods .","[('propose', (5, 6)), ('named', (12, 13)), ('for', (14, 15)), ('achieves', (19, 20)), ('than', (23, 24))]","[('detailed design Faster RCNN method', (7, 12)), ('FDNet1.0', (13, 14)), ('face detection', (15, 17)), ('more decent performance', (20, 23)), ('previous methods', (24, 26))]",[],[],[],[]
model,"A deformable layer with fewer channels is attached to the backbone network to produce a "" thin "" feature map , which is subsequently fed to a full connected layer , building an efficient yet accurate two - stage detector .","[('with', (3, 4)), ('attached to', (7, 9)), ('to produce', (12, 14)), ('fed to', (24, 26)), ('building', (31, 32))]","[('deformable layer', (1, 3)), ('fewer channels', (4, 6)), ('backbone network', (10, 12)), ('"" thin "" feature map', (15, 20)), ('full connected layer', (27, 30)), ('efficient yet accurate two - stage detector', (33, 40))]",[],[],[],[]
research-problem,"At testing time , we also find a comparable mean average precision ( m AP ) be achieved when the top - ranked proposals ( e.g. , 6000 ) are directly selected without NMS in the RPN stage over WIDER FACE dataset .","[('find', (6, 7)), ('directly selected without', (30, 33)), ('in', (34, 35)), ('over', (38, 39))]","[('comparable mean average precision ( m AP )', (8, 16)), ('NMS', (33, 34)), ('RPN stage', (36, 38)), ('WIDER FACE dataset', (39, 42))]",[],[],[],[]
model,"Furthermore , the multi-scale training and testing strategy are also applied in our work .","[('applied in', (10, 12))]","[('multi-scale training and testing strategy', (3, 8))]",[],[],[],[]
experimental-setup,Single NVIDIA Tesla K80 is used for training and testing .,"[('used for', (5, 7))]","[('Single NVIDIA Tesla K80', (0, 4)), ('training and testing', (7, 10))]",[],[],[],[]
experimental-setup,Mini batch size is set to 1 considering memory consumption .,"[('set to', (4, 6)), ('considering', (7, 8))]","[('Mini batch size', (0, 3)), ('1', (6, 7)), ('memory consumption', (8, 10))]",[],[],[],[]
experimental-setup,"Specifically , ResNet_v1_101 trained on ImageNet - 128w is used for Faster RCNN feature extraction .","[('trained on', (3, 5)), ('used for', (9, 11))]","[('ResNet_v1_101', (2, 3)), ('ImageNet - 128w', (5, 8)), ('Faster RCNN feature extraction', (11, 15))]",[],[],[],[]
experimental-setup,"Aspect ratios ( 1 , 1.5 , 2 ) and scales ( 16 2 , 32 2 , 64 2 , 128 2 , 256 2 , 512 2 ) are carefully designed to capture better locations of faces in the RPN stage , and the number of filters for the RPN layer is set as 512 .","[('to capture', (33, 35)), ('in', (39, 40)), ('for', (49, 50)), ('set as', (54, 56))]","[('Aspect ratios ( 1 , 1.5 , 2 ) and scales ( 16 2 , 32 2 , 64 2 , 128 2 , 256 2 , 512 2 )', (0, 30)), ('carefully designed', (31, 33)), ('better locations', (35, 37)), ('faces', (38, 39)), ('RPN stage', (41, 43)), ('number of filters', (46, 49)), ('RPN layer', (51, 53)), ('512', (56, 57))]",[],[],[],[]
experimental-setup,"By the way , the batch size of RPN and R - CNN is respectively assigned as 256 and 128 .","[('of', (7, 8)), ('assigned as', (15, 17))]","[('batch size', (5, 7)), ('RPN and R - CNN', (8, 13)), ('256 and 128', (17, 20))]",[],[],[],[]
experimental-setup,"The initial learning rate is set to 1e - 3 , and decrease to 1e - 4 after 20w iterations .","[('set to', (5, 7)), ('decrease to', (12, 14)), ('after', (17, 18))]","[('initial learning rate', (1, 4)), ('1e - 3', (7, 10)), ('1e - 4', (14, 17)), ('20w iterations', (18, 20))]",[],[],[],[]
experimental-setup,Weight decay is and momentum is set to 1e - 4 and 0.9 respectively .,"[('set to', (6, 8))]","[('Weight decay', (0, 2)), ('momentum', (4, 5)), ('1e - 4 and 0.9', (8, 13))]",[],[],[],[]
results,"Compared with the recently published top approaches , FDNet1.0 wins two 1st places ( easy set = 95.9 % , medium set = 94.5 % ) and one 2nd place ( hard set = 87.9 % ) on the validation set , as illustrated in .","[('Compared with', (0, 2)), ('wins', (9, 10)), ('on', (37, 38))]","[('FDNet1.0', (8, 9)), ('one 2nd place ( hard set = 87.9 % )', (27, 37)), ('validation set', (39, 41))]",[],[],[],[]
research-problem,Selective Refinement Network for High Performance Face Detection,[],"[('High Performance Face Detection', (4, 8))]",[],[],[],[]
research-problem,"High performance face detection remains a very challenging problem , especially when there exists many tiny faces .",[],"[('High performance face detection', (0, 4))]",[],[],[],[]
model,"In this paper , we investigate the effects of two - step classification and regression on different levels of detection layers and propose a novel face detection framework , named Selective Refinement Network ( SRN ) , which selectively applies two - step classification and regression to specific levels of detection layers .","[('investigate', (5, 6)), ('of', (8, 9)), ('on', (15, 16)), ('propose', (22, 23)), ('named', (29, 30)), ('selectively applies', (38, 40)), ('to', (46, 47))]","[('effects', (7, 8)), ('two - step classification and regression', (9, 15)), ('novel face detection framework', (24, 28)), ('Selective Refinement Network ( SRN )', (30, 36)), ('two - step classification and regression', (40, 46)), ('specific levels of detection layers', (47, 52))]",[],[],[],[]
model,"The network structure of SRN is shown in , which consists of two key modules , named as the Selective Two - step Classification ( STC ) module and the Selective Two - step Regression ( STR ) module .","[('of', (3, 4)), ('consists of', (10, 12)), ('named as', (16, 18))]","[('SRN', (4, 5)), ('two key modules', (12, 15)), ('Selective Two - step Classification ( STC ) module', (19, 28)), ('Selective Two - step Regression ( STR ) module', (30, 39))]",[],[],[],[]
model,"Specifically , the STC is applied to filter out most simple negative samples ( illustrated in ( a ) ) from the low levels of detection layers , which contains 88.9 % samples .","[('applied to', (5, 7)), ('from', (20, 21)), ('contains', (29, 30))]","[('STC', (3, 4)), ('filter out', (7, 9)), ('most simple negative samples', (9, 13)), ('detection layers', (25, 27)), ('88.9 % samples', (30, 33))]",[],[],[],[]
model,"In addition , we design a Receptive Field Enhancement ( RFE ) to provide more diverse receptive fields to better capture the extreme - pose faces .","[('design', (4, 5)), ('to provide', (12, 14)), ('to better capture', (18, 21))]","[('Receptive Field Enhancement ( RFE )', (6, 12)), ('more diverse receptive fields', (14, 18)), ('extreme - pose faces', (22, 26))]",[],[],[],[]
experimental-setup,"The loss function for SRN is just the sum of the STC loss and the STR loss , i.e. , L = L STC + L STR .","[('for', (3, 4)), ('is', (5, 6)), ('sum of', (8, 10))]","[('loss function', (1, 3)), ('SRN', (4, 5)), ('STC loss and the STR loss', (11, 17)), ('STR loss', (15, 17))]",[],[],[],[]
experimental-setup,"The backbone network is initialized by the pretrained ResNet - 50 model and all the parameters in the newly added convolution layers are initialized by the "" xavier "" method .","[('initialized by', (4, 6)), ('in', (16, 17)), ('initialized by', (23, 25))]","[('backbone network', (1, 3)), ('pretrained ResNet - 50 model', (7, 12)), ('all the parameters', (13, 16)), ('newly added convolution layers', (18, 22)), ('"" xavier "" method', (26, 30))]",[],[],[],[]
experimental-setup,"We fine - tune the SRN model using SGD with 0.9 momentum , 0.0001 weight decay , and batch size 32 .","[('fine - tune', (1, 4)), ('using', (7, 8)), ('with', (9, 10))]","[('SRN model', (5, 7)), ('SGD', (8, 9)), ('0.9 momentum', (10, 12)), ('0.0001 weight decay', (13, 16)), ('batch size', (18, 20)), ('32', (20, 21))]",[],[],[],[]
experimental-setup,"We set the learning rate to 10 ?2 for the first 100 epochs , and decay it to 10 ? 3 and 10 ? 4 for another 20 and 10 epochs , respectively .","[('set', (1, 2)), ('to', (5, 6)), ('for', (8, 9)), ('decay it to', (15, 18)), ('for', (25, 26))]","[('learning rate', (3, 5)), ('10 ?2', (6, 8)), ('first 100 epochs', (10, 13)), ('10 ? 3 and 10 ? 4', (18, 25)), ('another 20 and 10 epochs', (26, 31))]",[],[],[],[]
experimental-setup,We implement SRN using the Py - Torch library .,"[('implement', (1, 2)), ('using', (3, 4))]","[('SRN', (2, 3)), ('Py - Torch library', (5, 9))]",[],[],[],[]
results,AFW Dataset .,[],"[('AFW Dataset', (0, 2))]",[],[],[],[]
results,"As shown in , SRN outperforms these state - of - the - art methods with the top AP score ( 99.87 % ) .","[('with', (15, 16))]","[('SRN', (4, 5)), ('outperforms', (5, 6)), ('state - of - the - art methods', (7, 15)), ('top AP score ( 99.87 % )', (17, 24))]",[],[],[],[]
results,PASCAL Face Dataset .,[],"[('PASCAL Face Dataset', (0, 3))]",[],[],[],[]
results,SRN achieves the state - of - the - art results by improving 4.99 % AP score compared to the second best method STN .,"[('achieves', (1, 2)), ('by improving', (11, 13)), ('compared to', (17, 19))]","[('SRN', (0, 1)), ('state - of - the - art results', (3, 11)), ('4.99 % AP score', (13, 17)), ('second best method STN', (20, 24))]",[],[],[],[]
results,FDDB Dataset .,[],"[('FDDB Dataset', (0, 2))]",[],[],[],[]
results,"As shown in ( c ) , our SRN sets a new state - of - the - art performance , i.e. , 98.8 % true positive rate when the number of false positives is equal to 1000 .","[('sets', (9, 10)), ('i.e.', (21, 22)), ('when', (28, 29)), ('is', (34, 35)), ('equal to', (35, 37))]","[('our SRN', (7, 9)), ('new state - of - the - art performance', (11, 20)), ('98.8 % true positive rate', (23, 28)), ('number of false positives', (30, 34)), ('1000', (37, 38))]",[],[],[],[]
results,WIDER FACE Dataset .,[],"[('WIDER FACE Dataset', (0, 3))]",[],[],[],[]
results,"As shown in , we find that SRN performs favourably against the state - of - the - art based on the average precision ( AP ) across the three subsets , especially on the Hard subset which contains a large amount of small faces .","[('performs', (8, 9)), ('against', (10, 11)), ('based on', (19, 21)), ('across', (27, 28))]","[('SRN', (7, 8)), ('favourably', (9, 10)), ('state - of - the - art', (12, 19)), ('average precision ( AP )', (22, 27)), ('three subsets', (29, 31)), ('Hard subset', (35, 37)), ('large amount of small faces', (40, 45))]",[],[],[],[]
research-problem,Aggregate Channel Features for Multi-view Face Detection,[],"[('Multi-view Face Detection', (4, 7))]",[],[],[],[]
research-problem,Face detection has drawn much attention in recent decades since the seminal work by Viola and Jones .,[],"[('Face detection', (0, 2))]",[],[],[],[]
research-problem,Human face detection have long been one of the most fundamental problems in computer vision and humancomputer interaction .,[],"[('Human face detection', (0, 3))]",[],[],[],[]
model,"In this paper , we adopt a variant of channel features called aggregate channel features , which are extracted directly as pixel values on subsampled channels .","[('adopt', (5, 6)), ('called', (11, 12)), ('extracted directly as', (18, 21)), ('on', (23, 24))]","[('variant of channel features', (7, 11)), ('aggregate channel features', (12, 15)), ('pixel values', (21, 23)), ('subsampled channels', (24, 26))]",[],[],[],[]
model,"With these two superiorities , the aggregate channel features breakthrough the bottleneck in VJ framework and have the potential to make great advance in face detection .","[('breakthrough', (9, 10)), ('in', (12, 13)), ('in', (23, 24))]","[('aggregate channel features', (6, 9)), ('bottleneck', (11, 12)), ('VJ framework', (13, 15)), ('great advance', (21, 23)), ('face detection', (24, 26))]",[],[],[],[]
model,"To do so , we make a deep and all - round investigation into the specific feature parameters concerning channel types , feature pool size , subsampling method , feature scale and soon , which gives insights into the feature design and hopefully provides helpful guidelines for practitioners .","[('make', (5, 6)), ('into', (13, 14)), ('concerning', (18, 19))]","[('deep and all - round investigation', (7, 13)), ('specific feature parameters', (15, 18)), ('channel types', (19, 21)), ('feature pool size', (22, 25)), ('subsampling method', (26, 28)), ('feature scale', (29, 31))]",[],[],[],[]
experiments,"Through the deep exploration , we find that : 1 ) multi-scaling the feature representation further enriches the representation capacity since original aggregate channel features have uniform feature scale ; 2 ) different combinations of channel types impact the performance greatly , while for face detection the color channel in LUV space , plus gradient magnitude channel and gradient histograms channels in RGB space show best result ; 3 ) multi-view detection is proven to be a good match with aggregate channel features as the representation naturally encodes the facial structure ( ) .","[('enriches', (16, 17)), ('impact', (37, 38)), ('for', (43, 44)), ('in', (49, 50)), ('in', (61, 62)), ('show', (64, 65))]","[('deep exploration', (2, 4)), ('multi-scaling', (11, 12)), ('feature representation', (13, 15)), ('representation capacity', (18, 20)), ('different combinations of channel types', (32, 37)), ('performance', (39, 40)), ('greatly', (40, 41)), ('face detection', (44, 46)), ('color channel', (47, 49)), ('LUV space', (50, 52)), ('RGB space', (62, 64)), ('best result', (65, 67)), ('multi-view detection', (70, 72))]",[],[],[],[]
results,"As shown in , in AFW , our multi-scale detector achieves an ap value of 96.8 % , outperforming other academic methods by a large margin .","[('in', (4, 5)), ('achieves', (10, 11)), ('of', (14, 15)), ('outperforming', (18, 19)), ('by', (22, 23))]","[('AFW', (5, 6)), ('our multi-scale detector', (7, 10)), ('ap value', (12, 14)), ('96.8 %', (15, 17)), ('other academic methods', (19, 22)), ('large margin', (24, 26))]",[],[],[],[]
results,"When it comes to commercial systems , ours is better than Face.com and almost equal to Face ++ and Google Picasa .","[('better than', (9, 11)), ('almost equal to', (13, 16))]","[('commercial systems', (4, 6)), ('ours', (7, 8)), ('Face.com', (11, 12)), ('Face ++ and Google Picasa', (16, 21))]",[],[],[],[]
results,"In discrete score where evaluation metric is the same as in AFW , our detector achieves 83.7 % , which is a little better than Yan et al ..","[('In', (0, 1)), ('where', (3, 4)), ('achieves', (15, 16))]","[('discrete score', (1, 3)), ('evaluation metric', (4, 6)), ('AFW', (11, 12)), ('our detector', (13, 15)), ('83.7 %', (16, 18))]",[],[],[],[]
results,"When using continuous score which takes the overlap ratio as the score , our method gets 61.9 % true positive rate at 1 FPPI for multiscale version , surpassing other methods which output rectangular detections by a notable margin ( the Yan et al . detector outputs the same elliptical detections as the groundtruth , therefore having advantages with this metric ) .","[('When using', (0, 2)), ('takes', (5, 6)), ('as', (9, 10)), ('gets', (15, 16)), ('at', (21, 22)), ('for', (24, 25)), ('surpassing', (28, 29)), ('which output', (31, 33)), ('by', (35, 36))]","[('continuous score', (2, 4)), ('overlap ratio', (7, 9)), ('score', (11, 12)), ('our method', (13, 15)), ('61.9 % true positive rate', (16, 21)), ('1 FPPI', (22, 24)), ('multiscale version', (25, 27)), ('other methods', (29, 31)), ('rectangular detections', (33, 35)), ('notable margin', (37, 39))]",[],[],[],[]
results,Our detector using single - scale features performs a little worse with the benefit of faster detection speed .,"[('using', (2, 3)), ('performs', (7, 8)), ('with', (11, 12)), ('benefit of', (13, 15))]","[('Our detector', (0, 2)), ('single - scale features', (3, 7)), ('little worse', (9, 11)), ('faster detection speed', (15, 18))]",[],[],[],[]
research-problem,Supervised Transformer Network for Efficient Face Detection,[],"[('Efficient Face Detection', (4, 7))]",[],[],[],[]
research-problem,Large pose variations remain to be a challenge that confronts real - word face detection .,[],"[('Large pose variations', (0, 3))]",[],[],[],[]
model,"In contrast , we propose a new cascade Convolutional Neural Network that is trained end - to - end .","[('propose', (4, 5)), ('trained', (13, 14))]","[('new cascade Convolutional Neural Network', (6, 11)), ('end - to - end', (14, 19))]",[],[],[],[]
model,"The first stage is a multi-task Region Proposal Network ( RPN ) , which simultaneously proposes candidate face regions along with associated facial landmarks .","[('is', (3, 4)), ('simultaneously proposes', (14, 16)), ('along with', (19, 21))]","[('first stage', (1, 3)), ('multi-task Region Proposal Network ( RPN )', (5, 12)), ('candidate face regions', (16, 19)), ('associated facial landmarks', (21, 24))]",[],[],[],[]
model,"Inspired by Chen et al. , we jointly conduct face detection and face alignment , since face alignment is helpful to distinguish faces / non - faces patterns .","[('jointly conduct', (7, 9))]","[('face detection', (9, 11)), ('face alignment', (12, 14))]",[],[],[],[]
model,"Different from Li et al. , this network is calculated on the original resolution to better leverage more discriminative information .","[('calculated on', (9, 11)), ('to better leverage', (14, 17))]","[('network', (7, 8)), ('original resolution', (12, 14)), ('more discriminative information', (17, 20))]",[],[],[],[]
model,"The aligned candidate face region is then fed into the second - stage network , a RCNN , for further verification .","[('fed into', (7, 9)), ('for', (18, 19))]","[('aligned candidate face region', (1, 5)), ('second - stage network', (10, 14)), ('RCNN', (16, 17)), ('further verification', (19, 21))]",[],[],[],[]
model,Note we only keep the K face candidate regions with top responses in a local neighborhood from the RPN .,"[('keep', (3, 4)), ('with', (9, 10)), ('in', (12, 13)), ('from', (16, 17))]","[('K face candidate regions', (5, 9)), ('top responses', (10, 12)), ('local neighborhood', (14, 16)), ('RPN', (18, 19))]",[],[],[],[]
model,"We concatenate the feature maps from the two cascaded networks together to form an architecture that is trained end - to - end , as shown in .","[('concatenate', (1, 2)), ('from', (5, 6)), ('to form', (11, 13)), ('trained', (17, 18))]","[('feature maps', (3, 5)), ('two cascaded networks', (7, 10)), ('architecture', (14, 15)), ('end - to - end', (18, 23))]",[],[],[],[]
model,Note that the canonical positions of the facial landmarks in the aligned face image and the predicted facial landmarks in the candidate face region jointly defines the transform from the candidate face region .,"[('of', (5, 6)), ('in', (9, 10)), ('in', (19, 20)), ('jointly defines', (24, 26)), ('from', (28, 29))]","[('canonical positions', (3, 5)), ('facial landmarks', (7, 9)), ('aligned face image', (11, 14)), ('predicted facial landmarks', (16, 19)), ('candidate face region', (21, 24)), ('transform', (27, 28)), ('candidate face region', (30, 33))]",[],[],[],[]
model,"In the end - to - end training , the training of the first - stage RPN to predict facial landmarks is also supervised by annotated facial landmarks in each true face regions .","[('In', (0, 1)), ('of', (11, 12)), ('to predict', (17, 19)), ('supervised by', (23, 25)), ('in', (28, 29))]","[('end - to - end training', (2, 8)), ('training', (10, 11)), ('first - stage RPN', (13, 17)), ('facial landmarks', (19, 21)), ('annotated facial landmarks', (25, 28)), ('each true face regions', (29, 33))]",[],[],[],[]
model,We hence call our network a Supervised Transformer Network .,"[('call', (2, 3))]","[('Supervised Transformer Network', (6, 9))]",[],[],[],[]
model,"Therefore , we propose a region - of - interest ( ROI ) convolution scheme to make the run-time of the Supervised Transformer Network to be more efficient .","[('propose', (3, 4)), ('to make', (15, 17)), ('of', (19, 20)), ('to be', (24, 26))]","[('region - of - interest ( ROI ) convolution scheme', (5, 15)), ('run-time', (18, 19)), ('Supervised Transformer Network', (21, 24)), ('more efficient', (26, 28))]",[],[],[],[]
model,It first uses a conventional boosting cascade to obtain a set of face candidate areas .,"[('uses', (2, 3)), ('to obtain', (7, 9))]","[('conventional boosting cascade', (4, 7)), ('set of face candidate areas', (10, 15))]",[],[],[],[]
model,"Then , we combine these regions into irregular binary ROI mask .","[('combine', (3, 4)), ('into', (6, 7))]","[('regions', (5, 6)), ('irregular binary ROI mask', (7, 11))]",[],[],[],[]
model,"All DNN operations ( including convolution , ReLU , pooling , and concatenation ) are all processed inside the ROI mask , and hence significantly reduce the computation .","[('including', (4, 5)), ('processed inside', (16, 18)), ('significantly reduce', (24, 26))]","[('DNN operations', (1, 3)), ('ROI mask', (19, 21)), ('computation', (27, 28))]",[],[],[],[]
results,"As shown in , multi-task RPN , Supervised Transformer , and feature combination will bring about 1 % , 1 % , and 2 % recall improvement respectively .","[('bring about', (14, 16))]","[('multi-task RPN', (4, 6)), ('feature combination', (11, 13)), ('1 % , 1 % , and 2 % recall improvement', (16, 27))]",[],[],[],[]
ablation-analysis,"Besides , these three parts are complementary , remove anyone part will cause a recall drop .","[('are', (5, 6)), ('remove', (8, 9)), ('will cause', (11, 13))]","[('complementary', (6, 7)), ('anyone part', (9, 11)), ('recall drop', (14, 16))]",[],[],[],[]
results,We found that NMS tend to include too much noisy low confidence candidates .,"[('found that', (1, 3)), ('tend to include', (4, 7))]","[('NMS', (3, 4)), ('too much noisy low confidence candidates', (7, 13))]",[],[],[],[]
results,"Our non - top K suppression is very close to using all candidates , and achieved consistently better results than NMS under the same number of candidates .","[('using', (10, 11)), ('achieved', (15, 16)), ('than', (19, 20)), ('under', (21, 22))]","[('Our non - top K suppression', (0, 6)), ('very close', (7, 9)), ('all candidates', (11, 13)), ('consistently better results', (16, 19)), ('NMS', (20, 21)), ('same number of candidates', (23, 27))]",[],[],[],[]
results,"On the FDDB dataset , we compare with all public methods .","[('On', (0, 1)), ('compare with', (6, 8))]","[('FDDB dataset', (2, 4)), ('all public methods', (8, 11))]",[],[],[],[]
baselines,"On the AFW and PASCAL faces datasets , we compare with ( 1 ) deformable part based methods , e.g. structure model and Tree Parts Model ( TSM ) ; ( 2 ) cascade - based methods , e.g .","[('On', (0, 1)), ('compare with', (9, 11))]","[('AFW and PASCAL faces datasets', (2, 7)), ('deformable part based methods', (14, 18)), ('cascade - based methods', (33, 37))]",[],[],[],[]
baselines,"Headhunter ; ( 3 ) commercial system , e.g. face.com , Face ++ and Picasa .",[],"[('Headhunter', (0, 1)), ('commercial system', (5, 7))]",[],[],[],[]
research-problem,"We propose a method to address challenges in unconstrained face detection , such as arbitrary pose variations and occlusions .",[],"[('unconstrained face detection', (8, 11))]",[],[],[],[]
research-problem,It is the first step in automatic face recognition applications .,[],"[('automatic face recognition', (6, 9))]",[],[],[],[]
research-problem,"In this paper , we refer to face detection with arbitrary facial variations as the unconstrained face detection problem .","[('refer to', (5, 7)), ('as', (13, 14))]","[('face detection with arbitrary facial variations', (7, 13)), ('unconstrained face detection problem', (15, 19))]",[],[],[],[]
model,"First , we propose a simple pixel - level feature , called the Normalized Pixel Difference ( NPD ) .","[('propose', (3, 4)), ('called', (11, 12))]","[('simple pixel - level feature', (5, 10)), ('Normalized Pixel Difference ( NPD )', (13, 19))]",[],[],[],[]
model,"An NPD is computed as the ratio of the difference between any two pixel intensity values to the sum of their values , in the same form as the Weber Fraction in experimental psychology .","[('computed as', (3, 5)), ('of', (7, 8)), ('between', (10, 11)), ('to', (16, 17))]","[('NPD', (1, 2)), ('ratio', (6, 7)), ('difference', (9, 10)), ('any two pixel intensity values', (11, 16))]",[],[],[],[]
model,"The NPD feature has several desirable properties , such as scale invariance , boundedness , and ability to reconstruct the original image .","[('such as', (8, 10)), ('to reconstruct', (17, 19))]","[('NPD feature', (1, 3)), ('several desirable properties', (4, 7)), ('scale invariance', (10, 12)), ('boundedness', (13, 14)), ('ability', (16, 17)), ('original image', (20, 22))]",[],[],[],[]
model,"we further show that NPD features can be obtained from a lookup table , and the resulting face detection template can be easily scaled for multiscale face detection .","[('show', (2, 3)), ('obtained from', (8, 10)), ('easily scaled for', (22, 25))]","[('NPD features', (4, 6)), ('lookup table', (11, 13)), ('resulting', (16, 17)), ('face detection template', (17, 20)), ('multiscale face detection', (25, 28))]",[],[],[],[]
model,"Secondly , we propose a deep quadratic tree learning method and construct a single soft - cascade AdaBoost classifier to handle complex face manifolds and arbitrary pose and occlusion conditions .","[('propose', (3, 4)), ('construct', (11, 12)), ('to handle', (19, 21))]","[('deep quadratic tree learning method', (5, 10)), ('single soft - cascade AdaBoost classifier', (13, 19)), ('complex face manifolds', (21, 24)), ('arbitrary pose and occlusion conditions', (25, 30))]",[],[],[],[]
model,"In this way , different types of faces can be automatically divided into different leaves of a tree classifier , and the complex face manifold in a high dimensional space can be partitioned in the learning process .","[('automatically divided into', (10, 13)), ('of', (15, 16)), ('in', (25, 26)), ('partitioned in', (32, 34))]","[('different types of faces', (4, 8)), ('different leaves', (13, 15)), ('tree classifier', (17, 19)), ('complex face manifold', (22, 25)), ('high dimensional space', (27, 30)), ('learning process', (35, 37))]",[],[],[],[]
model,"This is the "" divide and conquer "" strategy to tackle unconstrained face detection in a single classifier , without pre-labeling of views in the training set of face images .","[('is', (1, 2)), ('to tackle', (9, 11)), ('in', (14, 15)), ('without', (19, 20)), ('of', (21, 22)), ('in', (23, 24))]","[('""', (3, 4)), ('divide and conquer "" strategy', (4, 9)), ('unconstrained face detection', (11, 14)), ('single classifier', (16, 18)), ('pre-labeling', (20, 21)), ('views', (22, 23)), ('training set of face images', (25, 30))]",[],[],[],[]
model,"The resulting face detector is robust to variations in pose , occlusion , and illumination , as well as to blur and low image resolution .","[('robust to', (5, 7))]","[('resulting face detector', (1, 4)), ('pose , occlusion , and illumination', (9, 15)), ('blur and low image resolution', (20, 25))]",[],[],[],[]
code,The source code of the proposed method is available in http://www.cbsr.ia.ac.cn/users/scliao/ projects / npdface / .,[],[],[],[],[],[]
hyperparameters,We used a detection template of 24 24 pixels .,"[('used', (1, 2)), ('of', (5, 6))]","[('detection template', (3, 5)), ('24 24 pixels', (6, 9))]",[],[],[],[]
hyperparameters,"We set the maximum depth of the tree classifiers to be learned as eight , so that at most eight NPD features need to be evaluated for each tree classifier .","[('set', (1, 2)), ('of', (5, 6)), ('as', (12, 13))]","[('maximum depth', (3, 5)), ('tree classifiers', (7, 9)), ('eight', (13, 14))]",[],[],[],[]
hyperparameters,"In the soft cascade training , we set the threshold of each exit as the minimal score of positive samples , i.e. we did not reject positive samples during training .","[('In', (0, 1)), ('set', (7, 8)), ('of', (10, 11)), ('as', (13, 14)), ('of', (17, 18))]","[('soft cascade training', (2, 5)), ('threshold', (9, 10)), ('each exit', (11, 13)), ('minimal score', (15, 17)), ('positive samples', (18, 20))]",[],[],[],[]
hyperparameters,"Our final detector contains 1,226 deep quadratic trees , and 46,401 NPD features .","[('contains', (3, 4))]","[('final detector', (1, 3)), ('1,226 deep quadratic trees', (4, 8)), ('46,401 NPD features', (10, 13))]",[],[],[],[]
baselines,"For an analysis , we also trained a near frontal face detector using the proposed NPD features and the classic cascade of regression trees ( CART ) with depth of four .","[('trained', (6, 7)), ('using', (12, 13)), ('with', (27, 28))]","[('near frontal face detector', (8, 12)), ('proposed NPD features', (14, 17)), ('classic cascade of regression trees ( CART )', (19, 27)), ('depth of four', (28, 31))]",[],[],[],[]
hyperparameters,"A subset of the training data 2 in was used , including 12,102 face images and 12,315 nonface images .","[('of', (2, 3)), ('including', (11, 12))]","[('subset', (1, 2)), ('training data', (4, 6)), ('12,102 face images', (12, 15)), ('12,315 nonface images', (16, 19))]",[],[],[],[]
hyperparameters,The detection template is 20 20 pixels .,"[('is', (3, 4))]","[('detection template', (1, 3)), ('20 20 pixels', (4, 7))]",[],[],[],[]
hyperparameters,"The detector cascade contains 15 stages , and for each stage , the target false accept rate was 0.5 , with a detection rate of 0.999 .","[('contains', (3, 4)), ('for', (8, 9)), ('was', (17, 18)), ('with', (20, 21)), ('of', (24, 25))]","[('detector cascade', (1, 3)), ('15 stages', (4, 6)), ('each stage', (9, 11)), ('target false accept rate', (13, 17)), ('0.5', (18, 19)), ('detection rate', (22, 24)), ('0.999', (25, 26))]",[],[],[],[]
results,Evaluation on FDDB Database,[],"[('FDDB Database', (2, 4))]",[],[],[],[]
results,"It can be observed that the proposed method outperforms most of the baseline methods except four methods , , , published recently .","[('observed', (3, 4)), ('outperforms', (8, 9)), ('except', (14, 15))]","[('proposed method', (6, 8)), ('most of the baseline methods', (9, 14))]",[],[],[],[]
results,The proposed NPD face detector is the second best one at FP = 0 for the discrete metric and the third best one for the continuous metric .,"[('is', (5, 6)), ('at', (10, 11)), ('for', (14, 15)), ('for', (23, 24))]","[('proposed NPD face detector', (1, 5)), ('second best one', (7, 10)), ('FP = 0', (11, 14)), ('discrete metric', (16, 18)), ('third best one', (20, 23)), ('continuous metric', (25, 27))]",[],[],[],[]
results,"It can be observed that the proposed NPD detector is among the top performers for the discrete metric , though it is not as good as the four recent methods for the continuous metric .","[('observed that', (3, 5)), ('among', (10, 11)), ('for', (14, 15))]","[('proposed NPD detector', (6, 9)), ('top performers', (12, 14)), ('discrete metric', (16, 18))]",[],[],[],[]
results,"Compared to recent methods , the Joint Cascade algorithm is the most competitive one to us in terms of accuracy and speed ( see Sec. 5.6 ) .","[('is', (9, 10)), ('in terms of', (16, 19))]","[('Joint Cascade algorithm', (6, 9)), ('most competitive one', (11, 14)), ('accuracy and speed', (19, 22))]",[],[],[],[]
results,Evaluation on GENKI Database,[],"[('GENKI Database', (2, 4))]",[],[],[],[]
results,The results show that the proposed NPD face detector significantly outperforms both the Viola - Jones and PittPatt face detectors .,"[('show', (2, 3)), ('significantly outperforms', (9, 11))]","[('proposed NPD face detector', (5, 9)), ('Viola - Jones and PittPatt face detectors', (13, 20))]",[],[],[],[]
results,Evaluation on CMU - MIT Database,[],"[('CMU - MIT Database', (2, 6))]",[],[],[],[]
results,"The results show that , compared to the Viola - Jones frontal face detector , the NPD detector performs better when the number of false positives , FP < 50 , while it is slightly worse than Viola - Jones at higher FPs .","[('show', (2, 3)), ('compared to', (5, 7)), ('performs', (18, 19)), ('when', (20, 21)), ('than', (36, 37)), ('at', (40, 41))]","[('Viola - Jones frontal face detector', (8, 14)), ('NPD detector', (16, 18)), ('better', (19, 20)), ('slightly worse', (34, 36)), ('Viola - Jones', (37, 40)), ('higher FPs', (41, 43))]",[],[],[],[]
research-problem,"Face detection , as a fundamental technology for various applications , is always deployed on edge devices which have limited memory storage and low computing power .",[],"[('Face detection', (0, 2))]",[],[],[],[]
model,"In this paper , we propose a Light and Fast Face Detector ( LFFD ) for edge devices , considerably balancing both accuracy and running efficiency .","[('propose', (5, 6)), ('for', (15, 16))]","[('Light and Fast Face Detector ( LFFD )', (7, 15)), ('edge devices', (16, 18))]",[],[],[],[]
model,The proposed method is inspired by the one - stage and multi-scale object detection method SSD which also enlightens some other face detectors .,"[('inspired by', (4, 6))]","[('one - stage and multi-scale object detection method', (7, 15))]",[],[],[],[]
model,One of the characteristics of SSD is that pre-defined anchor boxes are manually designed for each detection branch .,"[('of', (4, 5)), ('manually designed for', (12, 15))]","[('SSD', (5, 6)), ('pre-defined anchor boxes', (8, 11)), ('each detection branch', (15, 18))]",[],[],[],[]
experimental-setup,We initialize all parameters with xavier method and train the network from scratch .,"[('initialize', (1, 2)), ('with', (4, 5)), ('train', (8, 9)), ('from', (11, 12))]","[('all parameters', (2, 4)), ('xavier method', (5, 7)), ('network', (10, 11)), ('scratch', (12, 13))]",[],[],[],[]
experimental-setup,"The optimization method is SGD with 0.9 momentum , zero weight decay and batch size 32 .","[('is', (3, 4)), ('with', (5, 6))]","[('optimization method', (1, 3)), ('SGD', (4, 5)), ('0.9 momentum', (6, 8)), ('zero weight decay', (9, 12)), ('batch size', (13, 15)), ('32', (15, 16))]",[],[],[],[]
experimental-setup,The initial learning rate is 0.1 .,"[('is', (4, 5))]","[('initial learning rate', (1, 4)), ('0.1', (5, 6))]",[],[],[],[]
experimental-setup,"We train 1,500,000 iterations and reduce the learning rate by multiplying 0.1 at iteration 600,000 , 1,000,000 , 1,200,000 and 1,400,000 .","[('train', (1, 2)), ('reduce', (5, 6)), ('by multiplying', (9, 11)), ('at', (12, 13))]","[('1,500,000 iterations', (2, 4)), ('learning rate', (7, 9)), ('0.1', (11, 12)), ('iteration 600,000 , 1,000,000 , 1,200,000 and 1,400,000', (13, 21))]",[],[],[],[]
experimental-setup,The training time is about 5 days with two NVIDIA GTX 1080 TI .,"[('is', (3, 4)), ('with', (7, 8))]","[('training time', (1, 3)), ('about 5 days', (4, 7)), ('two NVIDIA GTX 1080 TI', (8, 13))]",[],[],[],[]
experimental-setup,Our method is implemented using MXNet and the source code is released .,"[('implemented using', (3, 5))]","[('Our method', (0, 2)), ('MXNet', (5, 6))]",[],[],[],[]
baselines,"Finally , the following methods are taken for comparison : DSFD ( Resnet152 backbone ) , Pyramid Box ( VGG16 backbone ) , S3 FD ( VGG16 backbone ) , SSH ( VGG16 backbone ) and FaceBoxes .",[],"[('DSFD ( Resnet152 backbone )', (10, 15)), ('Pyramid Box ( VGG16 backbone )', (16, 22)), ('S3 FD ( VGG16 backbone )', (23, 29)), ('SSH ( VGG16 backbone )', (30, 35)), ('FaceBoxes', (36, 37))]",[],[],[],[]
results,FDDB dataset .,[],"[('FDDB dataset', (0, 2))]",[],[],[],[]
results,"DSFD , Pyramid Box , S3FD and SSH can achieve high accuracy with marginal gaps .","[('can achieve', (8, 10)), ('with', (12, 13))]","[('high accuracy', (10, 12)), ('marginal gaps', (13, 15))]",[],[],[],[]
results,"The proposed LFFD gains slightly lower accuracy than the first four methods , but outperforms FaceBoxes evidently .","[('gains', (3, 4)), ('than', (7, 8)), ('outperforms', (14, 15))]","[('proposed LFFD', (1, 3)), ('slightly lower accuracy', (4, 7)), ('first four methods', (9, 12)), ('FaceBoxes', (15, 16))]",[],[],[],[]
results,The results indicate that LFFD is superior for detecting unconstrained faces .,"[('indicate', (2, 3)), ('is', (5, 6)), ('for detecting', (7, 9))]","[('LFFD', (4, 5)), ('superior', (6, 7)), ('unconstrained faces', (9, 11))]",[],[],[],[]
results,WIDER FACE dataset .,[],"[('WIDER FACE dataset', (0, 3))]",[],[],[],[]
results,"Firstly , performance drop is evident for DSFD , PyramidBox , S3FD and SSH compared to their original results .","[('for', (6, 7)), ('compared to', (14, 16))]","[('performance drop', (2, 4)), ('evident', (5, 6))]",[],[],[],[]
results,"Secondly , Pyramid Box obtains the best results on Hard parts , whereas the performance of SSH on Hard parts is decreased dramatically mainly due to the neglect of some tiny faces .","[('obtains', (4, 5)), ('on', (8, 9)), ('of', (15, 16)), ('on', (17, 18))]","[('Pyramid Box', (2, 4)), ('best results', (6, 8)), ('Hard parts', (9, 11)), ('performance', (14, 15)), ('SSH', (16, 17)), ('Hard parts', (18, 20)), ('decreased dramatically', (21, 23))]",[],[],[],[]
results,"Thirdly , FaceBoxes does not get desirable results on Medium and Hard parts .","[('does not get', (3, 6)), ('on', (8, 9))]","[('FaceBoxes', (2, 3)), ('desirable results', (6, 8)), ('Medium and Hard parts', (9, 13))]",[],[],[],[]
results,"Fourthly , the proposed method LFFD consistently outperforms Face - Boxes , although having gaps with state of the art methods .","[('consistently outperforms', (6, 8))]","[('proposed method LFFD', (3, 6)), ('Face - Boxes', (8, 11))]",[],[],[],[]
results,"Additionally , LFFD is better than SSH that uses VGG16 as the backbone on Hard parts .","[('better than', (4, 6)), ('that uses', (7, 9)), ('as', (10, 11)), ('on', (13, 14))]","[('LFFD', (2, 3)), ('SSH', (6, 7)), ('VGG16', (9, 10)), ('backbone', (12, 13)), ('Hard parts', (14, 16))]",[],[],[],[]
research-problem,"Abstract - Face detection and alignment in unconstrained environment are challenging due to various poses , illuminations and occlusions .",[],"[('Face detection and alignment', (2, 6))]",[],[],[],[]
research-problem,"However , most of the available face detection and face alignment methods ignore the inherent correlation between these two tasks .",[],"[('face detection and face alignment', (6, 11))]",[],[],[],[]
model,"In this paper , we propose a new framework to integrate these two tasks using unified cascaded CNNs by multi-task learning .","[('propose', (5, 6)), ('to integrate', (9, 11)), ('using', (14, 15)), ('by', (18, 19))]","[('new framework', (7, 9)), ('two tasks', (12, 14)), ('unified cascaded CNNs', (15, 18)), ('multi-task learning', (19, 21))]",[],[],[],[]
model,The proposed CNNs consist of three stages .,"[('consist of', (3, 5))]","[('proposed CNNs', (1, 3)), ('three stages', (5, 7))]",[],[],[],[]
model,"In the first stage , it produces candidate windows quickly through a shallow CNN .","[('In', (0, 1)), ('produces', (6, 7)), ('through', (10, 11))]","[('first stage', (2, 4)), ('candidate windows', (7, 9)), ('quickly', (9, 10)), ('shallow CNN', (12, 14))]",[],[],[],[]
model,"Then , it refines the windows to reject a large number of non-faces windows through a more complex CNN .","[('refines', (3, 4)), ('to reject', (6, 8)), ('through', (14, 15))]","[('windows', (5, 6)), ('large number of non-faces windows', (9, 14)), ('more complex CNN', (16, 19))]",[],[],[],[]
model,"Finally , it uses a more powerful CNN to refine the result and output facial landmarks positions .","[('uses', (3, 4)), ('to refine', (8, 10)), ('output', (13, 14))]","[('more powerful CNN', (5, 8)), ('result', (11, 12)), ('facial landmarks positions', (14, 17))]",[],[],[],[]
experiments,"Then we compare our face detector and alignment against the state - of - the - art methods in Face Detection Data Set and Benchmark ( FDDB ) , WIDER FACE , and Annotated Facial Landmarks in the Wild ( AFLW ) benchmark .","[('compare', (2, 3)), ('against', (8, 9)), ('in', (18, 19))]","[('face detector and alignment', (4, 8)), ('state - of - the - art methods', (10, 18)), ('Face Detection Data Set and Benchmark ( FDDB )', (19, 28)), ('WIDER FACE', (29, 31))]",[],[],[],[]
experiments,The effectiveness of online hard sample mining,[],"[('online hard sample mining', (3, 7))]",[],[],[],[]
results,It is very clear that the hard sample mining is beneficial to performance improvement .,"[('beneficial to', (10, 12))]","[('hard sample mining', (6, 9)), ('performance improvement', (12, 14))]",[],[],[],[]
experiments,The effectiveness of joint detection and alignment,[],"[('joint detection and alignment', (3, 7))]",[],[],[],[]
results,We also compare the performance of bounding box regression in these two O - Nets. suggests that joint landmarks localization task learning is beneficial for both face classification and bounding box regression tasks .,"[('of', (5, 6))]","[('performance', (4, 5)), ('bounding box regression', (6, 9))]",[],[],[],[]
experiments,D. Evaluation on face detection,[],"[('face detection', (3, 5))]",[],[],[],[]
results,( a ) - ( d ) shows that our method consistently outperforms all the previous approaches by a large margin in both the benchmarks .,"[('shows', (7, 8)), ('consistently outperforms', (11, 13)), ('by', (17, 18)), ('in', (21, 22))]","[('our method', (9, 11)), ('all the previous approaches', (13, 17)), ('large margin', (19, 21)), ('both the benchmarks', (22, 25))]",[],[],[],[]
experiments,Evaluation on face alignment,[],"[('face alignment', (2, 4))]",[],[],[],[]
results,( e ) shows that our method outperforms all the state - of - the - art methods with a margin .,"[('shows', (3, 4)), ('with', (18, 19))]","[('our method', (5, 7)), ('outperforms', (7, 8)), ('all the state - of - the - art methods', (8, 18)), ('margin', (20, 21))]",[],[],[],[]
research-problem,Robust Face Detection via Learning Small Faces on Hard Images,[],"[('Robust Face Detection', (0, 3))]",[],[],[],[]
research-problem,"Face detection is a fundamental and important computer vision problem , which is critical for many face - related tasks , such as face alignment , tracking and recognition .",[],"[('Face detection', (0, 2))]",[],[],[],[]
approach,"To address this issue , we propose to mine hard examples at image level in parallel with anchor level .","[('mine', (8, 9)), ('at', (11, 12)), ('in parallel with', (14, 17))]","[('hard examples', (9, 11)), ('image level', (12, 14)), ('anchor level', (17, 19))]",[],[],[],[]
approach,"More specifically , we propose to dynamically assign difficulty scores to training images during the learning process , which can determine whether an image is already well - detected or still useful for further training .","[('dynamically assign', (6, 8)), ('to', (10, 11)), ('during', (13, 14))]","[('difficulty scores', (8, 10)), ('training images', (11, 13)), ('learning process', (15, 17))]",[],[],[],[]
approach,This allows us to fully utilize the images which were not perfectly detected to better facilitate the following learning process .,"[('fully utilize', (4, 6)), ('to better facilitate', (13, 16))]","[('images', (7, 8)), ('not perfectly detected', (10, 13)), ('following learning process', (17, 20))]",[],[],[],[]
approach,"Apart from mining the hard images , we also propose to improve the detection quality by exclusively exploiting small faces .","[('improve', (11, 12)), ('by exclusively exploiting', (15, 18))]","[('detection quality', (13, 15)), ('small faces', (18, 20))]",[],[],[],[]
approach,"Compared with these methods , our detector is more efficient since it is specially designed to aggressively leveraging the small faces during training .","[('is', (7, 8))]","[('our detector', (5, 7)), ('more efficient', (8, 10))]",[],[],[],[]
experimental-setup,"We use an ImageNet pretrained VGG16 model to initialize our network backbone , and our newly introduced layers are randomly initialized with Gaussian initialization .","[('use', (1, 2)), ('to initialize', (7, 9)), ('are', (18, 19)), ('with', (21, 22))]","[('ImageNet pretrained VGG16 model', (3, 7)), ('our network backbone', (9, 12)), ('randomly initialized', (19, 21)), ('Gaussian initialization', (22, 24))]",[],[],[],[]
experimental-setup,"We train the model with the itersize to be 2 , for 46 k iterations , with a learning rate of 0.004 , and then for another 14 k iterations with a smaller learning rate of 0.0004 .","[('train', (1, 2)), ('with', (4, 5)), ('to be', (7, 9)), ('for', (11, 12)), ('with', (16, 17)), ('of', (20, 21)), ('with', (30, 31)), ('of', (35, 36))]","[('model', (3, 4)), ('itersize', (6, 7)), ('2', (9, 10)), ('46 k iterations', (12, 15)), ('learning rate', (18, 20)), ('0.004', (21, 22)), ('another 14 k iterations', (26, 30)), ('smaller learning rate', (32, 35)), ('0.0004', (36, 37))]",[],[],[],[]
experimental-setup,"During training , we use 4 GPUs to simultaneously to compute the gradient and update the weight by synchronized SGD with Momentum .","[('During', (0, 1)), ('use', (4, 5)), ('to simultaneously to compute', (7, 11)), ('update', (14, 15)), ('by', (17, 18)), ('with', (20, 21))]","[('training', (1, 2)), ('4 GPUs', (5, 7)), ('gradient', (12, 13)), ('weight', (16, 17)), ('synchronized SGD', (18, 20)), ('Momentum', (21, 22))]",[],[],[],[]
experimental-setup,"The first two blocks of VGG16 are frozen during the training , and the rest layers of VGG16 are set to have a double learning rate .","[('of', (4, 5)), ('are', (6, 7)), ('frozen during', (7, 9)), ('of', (16, 17)), ('set to have', (19, 22))]","[('first two blocks', (1, 4)), ('VGG16', (5, 6)), ('training', (10, 11)), ('rest layers', (14, 16)), ('VGG16', (17, 18)), ('double learning rate', (23, 26))]",[],[],[],[]
experimental-setup,"Specifically , we resize the testing image so that the short side contains 100 , 300 , 600 , 1000 and 1400 pixels for evaluation on WIDER FACE dataset .","[('resize', (3, 4)), ('so that', (7, 9)), ('contains', (12, 13)), ('on', (25, 26))]","[('testing image', (5, 7)), ('short side', (10, 12)), ('100 , 300 , 600 , 1000 and 1400 pixels', (13, 23)), ('WIDER FACE dataset', (26, 29))]",[],[],[],[]
experimental-setup,We also follow the testing strategies used in Pyra - midBox 2 such as horizontal flip and bounding - box voting .,"[('follow', (2, 3)), ('used in', (6, 8)), ('such as', (12, 14))]","[('testing strategies', (4, 6)), ('Pyra - midBox', (8, 11)), ('horizontal flip', (14, 16)), ('bounding - box voting', (17, 21))]",[],[],[],[]
results,"In , we show the precision - recall ( PR ) curve and average precision ( AP ) for our model compared with many other state - of - the - arts on these three subsets .","[('show', (3, 4)), ('for', (18, 19)), ('compared with', (21, 23))]","[('precision - recall ( PR ) curve', (5, 12)), ('average precision ( AP )', (13, 18)), ('our model', (19, 21))]",[],[],[],[]
results,"As we can see , our method achieves the best performance on the hard subset , and outperforms the current state - of - the - art by a large margin .","[('achieves', (7, 8)), ('on', (11, 12)), ('outperforms', (17, 18)), ('by', (27, 28))]","[('our method', (5, 7)), ('best performance', (9, 11)), ('hard subset', (13, 15)), ('current state - of - the - art', (19, 27)), ('large margin', (29, 31))]",[],[],[],[]
results,"Our performance on the medium subset is comparable to the most recent state - of - the - art and the performance on the easy subset is a bit worse since our method focuses on learning hard faces , and the architecture of our model is simpler compared with other state - of - thearts .","[('on', (2, 3)), ('is', (6, 7)), ('comparable to', (7, 9)), ('on', (22, 23)), ('is', (26, 27))]","[('medium subset', (4, 6)), ('most recent state - of - the - art', (10, 19)), ('performance', (21, 22)), ('easy subset', (24, 26)), ('bit worse', (28, 30))]",[],[],[],[]
results,"We show the discontinuous ROC curve at compared with , and our method achieves the state - of - the - art performance of TPR = 98.7 % given 1000 false positives .","[('show', (1, 2)), ('achieves', (13, 14)), ('of', (23, 24)), ('given', (28, 29))]","[('discontinuous ROC curve', (3, 6)), ('our method', (11, 13)), ('state - of - the - art performance', (15, 23)), ('TPR = 98.7 %', (24, 28)), ('1000 false positives', (29, 32))]",[],[],[],[]
results,"We show the PR curve at compared with , and our method achieves a new the state - of - the - art performance of AP = 99.0 .","[('show', (1, 2)), ('achieves', (12, 13)), ('of', (24, 25))]","[('PR curve', (3, 5)), ('our method', (10, 12)), ('new', (14, 15)), ('AP = 99.0', (25, 28))]",[],[],[],[]
results,"As shown in compared with , our method achieves state - of - the - art and almost perfect performance , with an AP of 99.60 .","[('achieves', (8, 9)), ('with', (21, 22)), ('of', (24, 25))]","[('our method', (6, 8)), ('state - of - the - art and almost perfect performance', (9, 20)), ('AP', (23, 24)), ('99.60', (25, 26))]",[],[],[],[]
results,"Our model with single detection feature map performs better than the one with three detection feature maps , despite its shallower structure , fewer parameters and anchors .","[('with', (2, 3)), ('performs', (7, 8)), ('than', (9, 10))]","[('Our model', (0, 2)), ('single detection feature map', (3, 7)), ('better', (8, 9)), ('one with three detection feature maps', (11, 17))]",[],[],[],[]
results,HIM can improve the performance on hard subset significantly without involving more complex network architecture nor computation overhead .,"[('improve', (2, 3)), ('on', (5, 6)), ('without involving', (9, 11))]","[('HIM', (0, 1)), ('performance', (4, 5)), ('hard subset', (6, 8)), ('significantly', (8, 9)), ('more complex network architecture', (11, 15))]",[],[],[],[]
results,"DH itself can also boost the performance , which shows the effectiveness of designing larger convolution for larger anchors .","[('boost', (4, 5)), ('shows', (9, 10)), ('of designing', (12, 14)), ('for', (16, 17))]","[('DH', (0, 1)), ('performance', (6, 7)), ('effectiveness', (11, 12)), ('larger convolution', (14, 16)), ('larger anchors', (17, 19))]",[],[],[],[]
results,Combining HIM and DH together can improve further towards the state - of - the - art performance .,"[('Combining', (0, 1)), ('towards', (8, 9))]","[('HIM and DH', (1, 4)), ('HIM and DH together', (1, 5)), ('state - of - the - art performance', (10, 18))]",[],[],[],[]
ablation-analysis,Both photometric distortion and cropping can contribute to a more robust face detector .,"[('contribute to', (6, 8))]","[('photometric distortion and cropping', (1, 5)), ('more robust face detector', (9, 13))]",[],[],[],[]
results,"Diagnosis of multi-scale testing. , the extra small scales are crucial to detect easy faces .",[],"[('multi-scale testing.', (2, 4))]",[],[],[],[]
research-problem,Recurrent Scale Approximation for Object Detection in CNN,[],[],[],[],[],[]
research-problem,"Since convolutional neural network ( CNN ) lacks an inherent mechanism to handle large scale variations , we always need to compute feature maps multiple times for multiscale object detection , which has the bottleneck of computational cost in practice .","[('for', (26, 27))]","[('feature maps', (22, 24)), ('multiple times', (24, 26)), ('multiscale object detection', (27, 30))]",[],[],[],[]
code,"Our codes and annotations mentioned in Sec.4.1 can be accessed at github.com/sciencefans/RSA-for-object-detection dle the variations caused by appearance , location and scale .",[],"[('github.com/sciencefans/RSA-for-object-detection', (11, 12))]",[],[],[],[]
model,"In this work , we propose a recurrent scale approximation ( RSA , see ) unit to achieve the goal aforementioned .","[('propose', (5, 6))]","[('recurrent scale approximation ( RSA , see ) unit', (7, 16))]",[],[],[],[]
model,The RSA unit is designed to be plugged at some specific depths in a network and to be fed with an initial feature map at the largest scale .,"[('designed to be', (4, 7)), ('plugged at', (7, 9)), ('in', (12, 13)), ('to be', (16, 18)), ('fed with', (18, 20)), ('at', (24, 25))]","[('RSA unit', (1, 3)), ('some specific depths', (9, 12)), ('network', (14, 15)), ('initial feature map', (21, 24)), ('largest scale', (26, 28))]",[],[],[],[]
model,The unit convolves the input in a recurrent manner to generate the prediction of the feature map that is half the size of the input .,"[('convolves', (2, 3)), ('in', (5, 6)), ('to generate', (9, 11)), ('of', (13, 14)), ('that is', (17, 19)), ('of', (22, 23))]","[('unit', (1, 2)), ('input', (4, 5)), ('recurrent manner', (7, 9)), ('prediction', (12, 13)), ('feature map', (15, 17)), ('half the size', (19, 22)), ('input', (24, 25))]",[],[],[],[]
model,Such a scheme could feed the network with input at one scale only and approximate the rest features at smaller scales through a learnable RSA unit - a balance considering both efficiency and accuracy .,"[('feed', (4, 5)), ('with', (7, 8)), ('at', (9, 10)), ('approximate', (14, 15)), ('at', (18, 19)), ('through', (21, 22))]","[('network', (6, 7)), ('input', (8, 9)), ('one scale only', (10, 13)), ('rest features', (16, 18)), ('smaller scales', (19, 21)), ('learnable RSA unit', (23, 26))]",[],[],[],[]
model,The first is a scale - forecast network to globally predict potential scales for a novel image and we compute feature pyramids for just a certain set of scales based on the prediction .,"[('to globally predict', (8, 11)), ('for', (13, 14)), ('compute', (19, 20)), ('for', (22, 23)), ('based on', (29, 31))]","[('scale - forecast network', (4, 8)), ('potential scales', (11, 13)), ('novel image', (15, 17)), ('feature pyramids', (20, 22)), ('certain set of scales', (25, 29)), ('prediction', (32, 33))]",[],[],[],[]
model,The second is a landmark retracing network that retraces the location of the regressed landmarks in the preceding layers and generates a confidence score for each landmark based on the landmark feature set .,"[('retraces', (8, 9)), ('of', (11, 12)), ('in', (15, 16)), ('generates', (20, 21)), ('for', (24, 25)), ('based on', (27, 29))]","[('landmark retracing network', (4, 7)), ('location', (10, 11)), ('regressed landmarks', (13, 15)), ('preceding layers', (17, 19)), ('confidence score', (22, 24)), ('each landmark', (25, 27)), ('landmark feature set', (30, 33))]",[],[],[],[]
model,The final score of identifying a face within an anchor is thereby revised by the LRN network .,"[('of', (3, 4)), ('within', (7, 8)), ('revised by', (12, 14))]","[('final score', (1, 3)), ('identifying', (4, 5)), ('face', (6, 7)), ('anchor', (9, 10)), ('LRN network', (15, 17))]",[],[],[],[]
model,The three components can be incorporated into a unified CNN framework and trained end - to - end .,"[('incorporated into', (5, 7))]","[('three components', (1, 3)), ('unified CNN framework', (8, 11)), ('trained end - to - end', (12, 18))]",[],[],[],[]
experiments,"The structure of our model is a shallow version of the ResNet where the first seven ResNet blocks are used , i.e. , from conv1 to res3c .","[('of', (2, 3)), ('is', (5, 6)), ('of', (9, 10)), ('where', (12, 13)), ('from', (23, 24))]","[('structure', (1, 2)), ('shallow version', (7, 9)), ('ResNet', (11, 12)), ('first seven ResNet blocks', (14, 18)), ('used', (19, 20))]",[],[],[],[]
experiments,We use this model in scale - forecast network and LRN .,"[('use', (1, 2)), ('in', (4, 5))]","[('scale - forecast network', (5, 9)), ('LRN', (10, 11))]",[],[],[],[]
experiments,"All numbers of channels are set to half of the original ResNet model , for the consideration of time efficiency .","[('set to', (5, 7)), ('of', (8, 9)), ('for', (14, 15))]","[('All numbers of channels', (0, 4)), ('half', (7, 8)), ('original ResNet model', (10, 13)), ('time efficiency', (18, 20))]",[],[],[],[]
experiments,We first train the scale - forecast network and then use the output of predicted scales to launch the RSA unit and LRN .,"[('train', (2, 3)), ('use', (10, 11)), ('of', (13, 14)), ('to launch', (16, 18))]","[('scale - forecast network', (4, 8)), ('output', (12, 13)), ('predicted scales', (14, 16)), ('RSA unit', (19, 21))]",[],[],[],[]
experiments,The ratio of the positive and the negative is 1 : 1 in all experiments .,"[('of', (2, 3)), ('is', (8, 9)), ('in', (12, 13))]","[('ratio', (1, 2)), ('positive and the negative', (4, 8)), ('1 : 1', (9, 12)), ('all experiments', (13, 15))]",[],[],[],[]
experiments,"The batch size is 4 ; base learning rate is set to 0.001 with a decrease of 6 % every 10,000 iterations .","[('is', (3, 4)), ('set to', (10, 12)), ('with', (13, 14)), ('of', (16, 17)), ('every', (19, 20))]","[('batch size', (1, 3)), ('4', (4, 5)), ('base learning rate', (6, 9)), ('0.001', (12, 13)), ('decrease', (15, 16)), ('6 %', (17, 19)), ('10,000 iterations', (20, 22))]",[],[],[],[]
experiments,"The maximum training iteration is 1,000,000 .","[('is', (4, 5))]","[('maximum training iteration', (1, 4)), ('1,000,000', (5, 6))]",[],[],[],[]
experiments,We use stochastic gradient descent as the optimizer .,"[('use', (1, 2)), ('as', (5, 6))]","[('stochastic gradient descent', (2, 5)), ('optimizer', (7, 8))]",[],[],[],[]
experiments,The scale - forecast network is of vital importance to the computational cost and accuracy in the networks afterwards .,[],"[('scale - forecast network', (1, 5))]",[],[],[],[]
experiments,"We can observe from the results that our trained scale network recalls almost 99 % at x = 1 , indicating that on average we only need to generate less than two predictions per image and that we can retrieve all face scales .","[('observe', (2, 3)), ('recalls', (11, 12)), ('at', (15, 16))]","[('our trained scale network', (7, 11)), ('almost 99 %', (12, 15)), ('x = 1', (16, 19))]",[],[],[],[]
experiments,"We can conclude that the deeper the RSA is branched out , the worse the feature approximation at smaller scales will be .","[('conclude', (2, 3)), ('at', (17, 18))]","[('deeper', (5, 6)), ('RSA', (7, 8)), ('branched out', (9, 11)), ('worse', (13, 14)), ('feature approximation', (15, 17)), ('smaller scales', (18, 20))]",[],[],[],[]
baselines,Theoretically RSA can handle all scales of features in a deep CNN model and therefore can be branched out at any depth of the network .,"[('handle', (3, 4)), ('in', (8, 9)), ('at', (19, 20))]","[('features', (7, 8)), ('deep CNN model', (10, 13)), ('branched out', (17, 19))]",[],[],[],[]
hyperparameters,The minimum operation in each component means only the scaleforecast network is used where no face appears in the image ; and the maximum operation indicates the amount when faces appear at all scales .,"[('in', (3, 4)), ('means', (6, 7)), ('used where', (12, 14)), ('appears in', (16, 18)), ('indicates', (25, 26)), ('when', (28, 29)), ('appear at', (30, 32))]","[('minimum operation', (1, 3)), ('each component', (4, 6)), ('scaleforecast network', (9, 11)), ('no face', (14, 16)), ('image', (19, 20)), ('maximum operation', (23, 25)), ('amount', (27, 28)), ('faces', (29, 30)), ('all scales', (32, 34))]",[],[],[],[]
experiments,Most of the computation happens before layer res2 b and it has an acceptable error rate of 3.44 % .,"[('happens before', (4, 6)), ('of', (16, 17))]","[('computation', (3, 4)), ('layer res2 b', (6, 9)), ('acceptable error rate', (13, 16)), ('3.44 %', (17, 19))]",[],[],[],[]
experiments,"For a particular case , as the times of the recurrent operation increase , the error rate goes up due to the cumulative effect of rolling out the predictions .","[('as', (5, 6)), ('of', (8, 9)), ('goes up', (17, 19)), ('due to', (19, 21)), ('of rolling out', (24, 27))]","[('times', (7, 8)), ('recurrent operation', (10, 12)), ('increase', (12, 13)), ('error rate', (15, 17)), ('cumulative effect', (22, 24)), ('predictions', (28, 29))]",[],[],[],[]
research-problem,Detecting Faces Using Region - based Fully Convolutional Networks,[],"[('Detecting Faces', (0, 2))]",[],[],[],[]
research-problem,Face detection has achieved great success using the region - based methods .,[],"[('Face detection', (0, 2))]",[],[],[],[]
model,"In this report , we develop a face detector on the top of R - FCN with elaborate design of the details , which achieves more decent performance than the R - CNN face detectors .","[('develop', (5, 6)), ('on the top of', (9, 13)), ('with', (16, 17)), ('achieves', (24, 25)), ('than', (28, 29))]","[('face detector', (7, 9)), ('R - FCN', (13, 16)), ('more decent performance', (25, 28)), ('R - CNN face detectors', (30, 35))]",[],[],[],[]
model,"According to the size of the general face , we carefully design size of anchors and RoIs .","[('According to', (0, 2)), ('of', (4, 5)), ('carefully design', (10, 12)), ('of', (13, 14))]","[('size', (3, 4)), ('general face', (6, 8)), ('size', (12, 13)), ('anchors and RoIs', (14, 17))]",[],[],[],[]
model,"Since the contribution of facial parts maybe different for detection , we introduce a position - sensitive average pooling to generate embedding features for enhancing discrimination , and eliminate the effect of non-uniformed contribution in each facial part .","[('introduce', (12, 13)), ('to generate', (19, 21)), ('for enhancing', (23, 25)), ('eliminate', (28, 29)), ('in', (34, 35))]","[('position - sensitive average pooling', (14, 19)), ('embedding features', (21, 23)), ('discrimination', (25, 26)), ('effect', (30, 31)), ('non-uniformed contribution', (32, 34)), ('each facial part', (35, 38))]",[],[],[],[]
model,"Furthermore , we also apply the multi-scale training and testing strategy in this work .","[('apply', (4, 5))]","[('multi-scale training and testing strategy', (6, 11))]",[],[],[],[]
model,The on - line hard example mining ( OHEM ) technique is integrated into our network as well for boosting the learning on hard examples .,"[('integrated into', (12, 14)), ('for boosting', (18, 20)), ('on', (22, 23))]","[('on - line hard example mining ( OHEM ) technique', (1, 11)), ('our network', (14, 16)), ('learning', (21, 22)), ('hard examples', (23, 25))]",[],[],[],[]
hyperparameters,Our training hyper - parameters are similar to Face R - CNN .,"[('similar to', (6, 8))]","[('training hyper - parameters', (1, 5)), ('Face R - CNN', (8, 12))]",[],[],[],[]
hyperparameters,"Different from Face R - CNN , we initialize our network with the pre-trained weights of 101 - layer ResNet trained on Image Net .","[('initialize', (8, 9)), ('with', (11, 12)), ('of', (15, 16)), ('trained on', (20, 22))]","[('our network', (9, 11)), ('pre-trained weights', (13, 15)), ('101 - layer ResNet', (16, 20)), ('Image Net', (22, 24))]",[],[],[],[]
hyperparameters,"Specifically , we freeze the general kernels ( weights of few layers at the beginning ) of the pre-trained model throughout the entire training process in order to keep the essential feature extractor trained on ImageNet .","[('freeze', (3, 4)), ('of', (9, 10)), ('of', (16, 17)), ('throughout', (20, 21)), ('to keep', (27, 29)), ('trained on', (33, 35))]","[('pre-trained model', (18, 20)), ('entire training process', (22, 25)), ('essential feature extractor', (30, 33)), ('ImageNet', (35, 36))]",[],[],[],[]
baselines,"In terms of the RPN stage , Face R - FCN enumerates multiple configurations of the anchor in order to accurately search for faces .","[('In terms of', (0, 3)), ('enumerates', (11, 12)), ('of', (14, 15)), ('to accurately search for', (19, 23))]","[('RPN stage', (4, 6)), ('Face R - FCN', (7, 11)), ('multiple configurations', (12, 14)), ('anchor', (16, 17)), ('faces', (23, 24))]",[],[],[],[]
hyperparameters,We combine a range of multiple scales and aspect ratios together to construct multi-scale anchors .,"[('combine', (1, 2)), ('to construct', (11, 13))]","[('range of multiple scales and aspect ratios', (3, 10)), ('multi-scale anchors', (13, 15))]",[],[],[],[]
hyperparameters,The RPN and R - FCN are both learned jointly with the softmax loss and the smooth L1 loss .,"[('learned jointly with', (8, 11))]","[('RPN and R - FCN', (1, 6)), ('softmax loss', (12, 14)), ('smooth L1 loss', (16, 19))]",[],[],[],[]
hyperparameters,Non- maximum suppression ( NMS ) is adopted for regularizing the anchors with certain IoU scores .,"[('with', (12, 13))]","[('Non- maximum suppression ( NMS )', (0, 6)), ('anchors', (11, 12)), ('certain IoU scores', (13, 16))]",[],[],[],[]
hyperparameters,We set the 256 for the size of RPN mini-batch and 128 for R - FCN respectively .,"[('set', (1, 2)), ('for', (4, 5)), ('of', (7, 8)), ('for', (12, 13))]","[('256', (3, 4)), ('size', (6, 7)), ('RPN mini-batch', (8, 10)), ('128', (11, 12)), ('R - FCN', (13, 16))]",[],[],[],[]
hyperparameters,"We utilize multi-scale training where the input image is resized with bilinear interpolation to various scales ( say , 1024 or 1200 ) .","[('utilize', (1, 2)), ('where', (4, 5)), ('resized with', (9, 11)), ('to', (13, 14))]","[('multi-scale training', (2, 4)), ('input image', (6, 8)), ('bilinear interpolation', (11, 13)), ('various scales ( say , 1024 or 1200 )', (14, 23))]",[],[],[],[]
hyperparameters,"In the testing stage , multi-scale testing is performed by scale image into an image pyramid for better detecting on both tiny and general faces .","[('In', (0, 1)), ('performed by', (8, 10)), ('into', (12, 13)), ('for', (16, 17)), ('on', (19, 20))]","[('testing stage', (2, 4)), ('multi-scale testing', (5, 7)), ('scale image', (10, 12)), ('image pyramid', (14, 16)), ('better detecting', (17, 19)), ('tiny and general faces', (21, 25))]",[],[],[],[]
results,"As illustrated in , our proposed approach consistently wins the 1st place across the three subsets on both the validation set and test set of WIDER FACE and significantly outperforms the existing results .","[('consistently wins', (7, 9)), ('across', (12, 13)), ('on', (16, 17)), ('of', (24, 25)), ('significantly outperforms', (28, 30))]","[('1st place', (10, 12)), ('three subsets', (14, 16)), ('validation set and test set', (19, 24)), ('WIDER FACE', (25, 27)), ('existing results', (31, 33))]",[],[],[],[]
results,"In particular , on WIDER FACE hard subset , our approach is superior to the prior best - performing one by a clear margin , which demonstrates the robustness of our algorithm .","[('on', (3, 4)), ('superior to', (12, 14)), ('by', (20, 21))]","[('WIDER FACE hard subset', (4, 8)), ('our approach', (9, 11)), ('prior best - performing one', (15, 20)), ('clear margin', (22, 24))]",[],[],[],[]
experiments,FDDB,[],"[('FDDB', (0, 1))]",[],[],[],[]
experiments,"From , it is clearly that Face R - FCN consistently achieves the impressive performance in terms of both the discrete ROC curve and continuous ROC curve .","[('consistently achieves', (10, 12)), ('in terms of', (15, 18))]","[('Face R - FCN', (6, 10)), ('impressive performance', (13, 15)), ('continuous ROC curve', (24, 27))]",[],[],[],[]
experiments,Our discrete ROC curve is superior to the prior best - performing method .,"[('superior to', (5, 7))]","[('discrete ROC curve', (1, 4)), ('prior best - performing method', (8, 13))]",[],[],[],[]
experiments,We also obtain the best true positive rate of the discrete ROC curve at 1000/2000 false positives ( 98.49%/99.07 % ) .,"[('obtain', (2, 3)), ('of', (8, 9)), ('at', (13, 14))]","[('best true positive rate', (4, 8)), ('discrete ROC curve', (10, 13)), ('1000/2000 false positives ( 98.49%/99.07 % )', (14, 21))]",[],[],[],[]
experiments,"Face R - FCN shows the superior performance over the prior methods across the three subsets ( easy , medium and hard ) in both validation and test sets .","[('shows', (4, 5)), ('over', (8, 9)), ('across', (12, 13)), ('in', (23, 24))]","[('Face R - FCN', (0, 4)), ('superior performance', (6, 8)), ('prior methods', (10, 12)), ('three subsets ( easy , medium and hard )', (14, 23)), ('validation and test sets', (25, 29))]",[],[],[],[]
experiments,"Finally , we obtain the true positive rate 98. 99 % of the discrete ROC curve at 1000 false positives and 99. 42 % at 2000 false positives , which are new state - of - the - art among all the published methods on FDDB .","[('obtain', (3, 4)), ('of', (11, 12)), ('at', (16, 17)), ('at', (24, 25))]","[('true positive rate', (5, 8)), ('98. 99 %', (8, 11)), ('discrete ROC curve', (13, 16)), ('1000 false positives', (17, 20)), ('99. 42 %', (21, 24)), ('2000 false positives', (25, 28)), ('new state - of - the - art', (31, 39)), ('FDDB', (45, 46))]",[],[],[],[]
research-problem,Finding Tiny Faces,[],"[('Finding Tiny Faces', (0, 3))]",[],[],[],[]
research-problem,"Though tremendous strides have been made in object recognition , one of the remaining open challenges is detecting small objects .",[],"[('detecting small objects', (17, 20))]",[],[],[],[]
research-problem,"We explore three aspects of the problem in the context of finding small faces : the role of scale invariance , image resolution , and contextual reasoning .","[('in', (7, 8))]","[('role', (16, 17)), ('scale invariance', (18, 20)), ('image resolution', (21, 23)), ('contextual reasoning', (25, 27))]",[],[],[],[]
research-problem,"lem in the context of face detection : the role of scale invariance , image resolution and contextual reasoning .",[],"[('face detection', (5, 7)), ('scale invariance', (11, 13)), ('image resolution', (14, 16))]",[],[],[],[]
model,"Instead of a "" one-size - fitsall "" approach , we train separate detectors tuned for different scales ( and aspect ratios ) .","[('train', (11, 12)), ('tuned for', (14, 16))]","[('separate detectors', (12, 14)), ('different scales ( and aspect ratios )', (16, 23))]",[],[],[],[]
model,"To address both concerns , we train and run scale - specific detectors in a multitask fashion : they make use of features defined over multiple layers of single ( deep ) feature hierarchy .","[('train and run', (6, 9)), ('in', (13, 14)), ('make use of', (19, 22)), ('defined over', (23, 25)), ('of', (27, 28))]","[('scale - specific detectors', (9, 13)), ('multitask fashion', (15, 17)), ('features', (22, 23)), ('multiple layers', (25, 27)), ('single ( deep ) feature hierarchy', (28, 34))]",[],[],[],[]
model,"To extend features fine - tuned from these networks to objects of novel sizes , we employ a simply strategy : resize images at test - time by interpolation and decimation .","[('to', (9, 10)), ('employ', (16, 17)), ('resize', (21, 22)), ('at', (23, 24)), ('by', (27, 28))]","[('features', (2, 3)), ('objects', (10, 11)), ('simply strategy', (18, 20)), ('images', (22, 23)), ('test - time', (24, 27)), ('interpolation and decimation', (28, 31))]",[],[],[],[]
research-problem,"While many recognition systems are applied in a "" multi-resolution "" fashion by processing an image pyramid , we find that interpolating the lowest layer of the pyramid is particularly crucial for finding small objects .","[('interpolating', (21, 22))]","[('small objects', (33, 35))]",[],[],[],[]
model,Hence our final approach is a delicate mixture of scale - specific detectors that are used in a scale - invariant fashion ( by processing an image pyramid to capture large scale variations ) .,"[('is', (4, 5)), ('of', (8, 9)), ('used in', (15, 17))]","[('final approach', (2, 4)), ('delicate mixture', (6, 8)), ('scale - specific detectors', (9, 13)), ('scale - invariant fashion', (18, 22))]",[],[],[],[]
model,"We demonstrate that convolutional deep features extracted from multiple layers ( also known as "" hypercolumn "" features ) are effective "" foveal "" descriptors that capture both high - resolution detail and coarse low - resolution cues across large receptive field ( ) .","[('demonstrate', (1, 2)), ('extracted from', (6, 8)), ('are', (19, 20)), ('that capture', (25, 27)), ('across', (38, 39))]","[('convolutional deep features', (3, 6)), ('multiple layers', (8, 10)), ('effective "" foveal "" descriptors', (20, 25)), ('high - resolution detail', (28, 32)), ('coarse low - resolution cues', (33, 38)), ('large receptive field', (39, 42))]",[],[],[],[]
model,We show that highresolution components of our foveal descriptors ( extracted from lower convolutional layers ) are crucial for such accurate localization in .,"[('show', (1, 2)), ('of', (5, 6)), ('extracted from', (10, 12)), ('crucial for', (17, 19))]","[('highresolution components', (3, 5)), ('our foveal descriptors', (6, 9)), ('lower convolutional layers', (12, 15)), ('accurate localization', (20, 22))]",[],[],[],[]
results,WIDER FACE :,[],"[('WIDER FACE', (0, 2))]",[],[],[],[]
results,"As shows , our hybrid - resolution model ( HR ) achieves state - of - the - art performance on all difficulty levels , but most importantly , reduces error on the "" hard "" set by 2X .","[('achieves', (11, 12)), ('on', (20, 21)), ('on', (31, 32))]","[('hybrid - resolution model ( HR )', (4, 11)), ('state - of - the - art performance', (12, 20)), ('all difficulty levels', (21, 24)), ('reduces', (29, 30)), ('error', (30, 31)), ('2X', (38, 39))]",[],[],[],[]
baselines,FDDB :,[],"[('FDDB', (0, 1))]",[],[],[],[]
results,"Our out - of - the - box detector ( HR ) outperforms all published results on the discrete score , which uses a standard 50 % intersection - over - union threshold to define correctness .","[('outperforms', (12, 13)), ('on', (16, 17)), ('uses', (22, 23)), ('to define', (33, 35))]","[('out - of - the - box detector ( HR )', (1, 12)), ('all published results', (13, 16)), ('discrete score', (18, 20)), ('standard 50 % intersection - over - union threshold', (24, 33)), ('correctness', (35, 36))]",[],[],[],[]
results,"With the post - hoc regressor , our detector achieves state - of - the - art performance on the continuous score ( measuring average bounding - box overlap ) as well .","[('With', (0, 1)), ('achieves', (9, 10)), ('on', (18, 19))]","[('post - hoc regressor', (2, 6)), ('our detector', (7, 9)), ('state - of - the - art performance', (10, 18)), ('continuous score', (20, 22))]",[],[],[],[]
hyperparameters,Our regressor is trained with 10 - fold cross validation .,"[('trained with', (3, 5))]","[('regressor', (1, 2)), ('10 - fold cross validation', (5, 10))]",[],[],[],[]
research-problem,ADAPT at SemEval- 2018 Task 9 : Skip - Gram Word Embeddings for Unsupervised Hypernym Discovery in Specialised Corpora,[],"[('Unsupervised Hypernym Discovery', (13, 16))]",[],[],[],[]
research-problem,This paper describes a simple but competitive unsupervised system for hypernym discovery .,[],"[('hypernym discovery', (10, 12))]",[],[],[],[]
model,The ADAPT team focused on the two specialised domain English subtasks by developing an unsupervised system that builds word embeddings from the supplied reference corpora for these domains .,"[('focused on', (3, 5)), ('by developing', (11, 13)), ('from', (20, 21)), ('for', (25, 26))]","[('ADAPT', (1, 2)), ('two specialised domain English subtasks', (6, 11)), ('unsupervised system', (14, 16)), ('word embeddings', (18, 20)), ('supplied reference corpora', (22, 25))]",[],[],[],[]
model,"Even though unsupervised systems tend to rank behind supervised systems in NLP tasks in general , our motivation to focus on an unsupervised approach is derived from the fact that they do not require explicit hand - annotated data , and from the expectation that they are able to generalise more easily to unseen hypernym - hyponym pairs .",[],"[('unsupervised approach', (22, 24))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,Our official submission ranked at eleven out of eighteen on the medical domain subtask with a Mean Average Precision ( MAP ) of 8.13 .,"[('ranked at', (3, 5)), ('on', (9, 10)), ('with', (14, 15)), ('of', (22, 23))]","[('eleven out of eighteen', (5, 9)), ('medical domain subtask', (11, 14)), ('Mean Average Precision ( MAP )', (16, 22)), ('8.13', (23, 24))]",[],[],[],[]
results,"However , it ranked first place among all the unsupervised systems on this subtask .","[('ranked', (3, 4)), ('among', (6, 7))]","[('first place', (4, 6)), ('all the unsupervised systems', (7, 11))]",[],[],[],[]
results,"On the music industry domain subtask , our system ranked 13th out of 16 places with a MAP of 1.88 , ranking 4th among the unsupervised systems .","[('On', (0, 1)), ('ranked', (9, 10)), ('with', (15, 16)), ('of', (18, 19)), ('ranking', (21, 22)), ('among', (23, 24))]","[('music industry domain subtask', (2, 6)), ('our system', (7, 9)), ('13th', (10, 11)), ('MAP', (17, 18)), ('1.88', (19, 20)), ('4th', (22, 23)), ('unsupervised systems', (25, 27))]",[],[],[],[]
research-problem,SJTU- NLP at SemEval-2018 Task 9 : Neural Hypernym Discovery with Term Embeddings,[],"[('Neural Hypernym Discovery', (7, 10))]",[],[],[],[]
research-problem,"This paper describes a hypernym discovery system for our participation in the SemEval - 2018 Task 9 , which aims to discover the best ( set of ) candidate hypernyms for input concepts or entities , given the search space of a pre-defined vocabulary .",[],"[('hypernym discovery', (4, 6))]",[],[],[],[]
research-problem,"A relevant well - known scenario is hypernym detection , which is a binary task to decide whether a hypernymic relationship holds between a pair of words or not .",[],"[('hypernym detection', (7, 9))]",[],[],[],[]
model,"In this work , we introduce a neural network architecture for the concerned task and empirically study various neural networks to model the distributed representations for words and phrases .","[('introduce', (5, 6)), ('for', (10, 11)), ('empirically study', (15, 17)), ('to model', (20, 22)), ('for', (25, 26))]","[('neural network architecture', (7, 10)), ('concerned task', (12, 14)), ('various neural networks', (17, 20)), ('distributed representations', (23, 25)), ('words and phrases', (26, 29))]",[],[],[],[]
model,"In our system , we leverage an unambiguous vector representation via term embedding , and we take advantage of deep neural networks to discover the hypernym relationships between terms .","[('leverage', (5, 6)), ('via', (10, 11)), ('take advantage of', (16, 19)), ('to discover', (22, 24)), ('between', (27, 28))]","[('unambiguous vector representation', (7, 10)), ('term embedding', (11, 13)), ('deep neural networks', (19, 22)), ('hypernym relationships', (25, 27)), ('terms', (28, 29))]",[],[],[],[]
experimental-setup,Our model was implemented using the Theano 1 .,"[('implemented using', (3, 5))]","[('Theano', (6, 7))]",[],[],[],[]
experimental-setup,The diagonal variant of Ada - Grad is used for neural network training .,"[('of', (3, 4)), ('used for', (8, 10))]","[('diagonal variant', (1, 3)), ('Ada - Grad', (4, 7)), ('neural network training', (10, 13))]",[],[],[],[]
experimental-setup,We tune the hyper - parameters with the following range of values : learning rate ?,"[('tune', (1, 2)), ('with', (6, 7))]","[('hyper - parameters', (3, 6)), ('learning rate', (13, 15))]",[],[],[],[]
experimental-setup,"{ 1 e ? 3 , 1 e ? 2 } , dropout probability ? { 0.1 , 0.2 } , CNN filter width ? { 2 , 3 , 4 }.",[],"[('dropout probability', (12, 14)), ('CNN filter width', (21, 24))]",[],[],[],[]
experimental-setup,The hidden dimension of all neural models are 200 .,"[('of', (3, 4)), ('are', (7, 8))]","[('hidden dimension', (1, 3)), ('all neural models', (4, 7)), ('200', (8, 9))]",[],[],[],[]
experimental-setup,The batch size is set to 20 and the word embedding and sense embedding sizes are set to 300 .,"[('set to', (4, 6)), ('set to', (16, 18))]","[('batch size', (1, 3)), ('20', (6, 7)), ('word embedding and sense embedding sizes', (9, 15)), ('300', (18, 19))]",[],[],[],[]
experimental-setup,"All of our models are trained on a single GPU ( NVIDIA GTX 980 Ti ) , with roughly 1.5h for general - purpose subtask for English and 0.5h domain - specific domain - specific ones for medical and music .","[('trained on', (5, 7)), ('with', (17, 18)), ('for', (20, 21)), ('for', (25, 26)), ('for', (36, 37))]","[('single GPU ( NVIDIA GTX 980 Ti )', (8, 16)), ('roughly 1.5h', (18, 20)), ('general - purpose subtask', (21, 25)), ('English', (26, 27)), ('0.5h', (28, 29)), ('domain - specific domain - specific ones', (29, 36)), ('medical and music', (37, 40))]",[],[],[],[]
baselines,"Convolution or recurrent gated mechanisms in either CNN - based ( CNN , RCNN ) or RNN ( GRU , LSTM ) based neural networks could essentially be helpful of modeling the semantic connections between words in a phrase , and guide the networks to discover the hypernym relationships .","[('in', (5, 6)), ('of modeling', (29, 31)), ('between', (34, 35)), ('in', (36, 37)), ('guide', (41, 42)), ('to discover', (44, 46))]","[('Convolution or recurrent gated mechanisms', (0, 5)), ('CNN - based ( CNN , RCNN )', (7, 15)), ('RNN ( GRU , LSTM ) based neural networks', (16, 25)), ('semantic connections', (32, 34)), ('words', (35, 36)), ('phrase', (38, 39)), ('networks', (43, 44)), ('hypernym relationships', (47, 49))]",[],[],[],[]
results,"We also observe CNN - based network performance is better than RNN - based , which indicates local features between words could be more important than long - term dependency in this task where the term length is up to trigrams .","[('observe', (2, 3)), ('is', (8, 9)), ('better than', (9, 11))]","[('CNN - based network performance', (3, 8)), ('RNN - based', (11, 14))]",[],[],[],[]
results,"To investigate the performance of neural models on specific domains , we conduct experiments on medical and medicine subtask .","[('on', (14, 15))]","[('medical and medicine subtask', (15, 19))]",[],[],[],[]
results,"All the neural models outperform term embedding averaging in terms of all the metrics and CNN - based network also performs better than RNN - based ones in most of the metrics using word embedding , which verifies our hypothesis in the general - purpose task .","[('in terms of', (8, 11)), ('performs', (20, 21)), ('than', (22, 23)), ('in', (27, 28)), ('using', (32, 33))]","[('outperform', (4, 5)), ('term embedding averaging', (5, 8)), ('all the metrics', (11, 14)), ('CNN - based network', (15, 19)), ('better', (21, 22)), ('RNN - based ones', (23, 27)), ('most of the metrics', (28, 32)), ('word embedding', (33, 35))]",[],[],[],[]
results,"Compared with word embedding , the sense embedding shows a much poorer result though they work closely in generalpurpose subtask .","[('Compared with', (0, 2)), ('shows', (8, 9))]","[('word embedding', (2, 4)), ('sense embedding', (6, 8)), ('much poorer result', (10, 13))]",[],[],[],[]
research-problem,Hypernyms under Siege : Linguistically - motivated Artillery for Hypernymy Detection,[],"[('Hypernymy Detection', (9, 11))]",[],[],[],[]
research-problem,"In the last two decades , the NLP community has invested a consistent effort in developing automated methods to recognize hypernymy .",[],"[('NLP', (7, 8))]",[],[],[],[]
approach,"In this paper we perform an extensive evaluation of various unsupervised distributional measures for hypernymy detection , using several distributional semantic models that differ by context type and feature weighting .","[('for', (13, 14)), ('using', (17, 18))]","[('hypernymy detection', (14, 16))]",[],[],[],[]
approach,"We analyze the performance of the measures in different settings and suggest a principled way to select the suitable measure , context type and feature weighting according to the task setting , yielding consistent performance across datasets .","[('analyze', (1, 2)), ('of', (4, 5)), ('suggest', (11, 12)), ('to select', (15, 17)), ('according to', (26, 28)), ('yielding', (32, 33)), ('across', (35, 36))]","[('performance', (3, 4)), ('measures', (6, 7)), ('principled way', (13, 15)), ('suitable measure', (18, 20)), ('task setting', (29, 31)), ('consistent performance', (33, 35)), ('datasets', (36, 37))]",[],[],[],[]
approach,We also compare the unsupervised measures to the state - of - the - art supervised methods .,"[('compare', (2, 3)), ('to', (6, 7))]","[('unsupervised measures', (4, 6)), ('state - of - the - art supervised methods', (8, 17))]",[],[],[],[]
experiments,Experiments,[],"[('Experiments', (0, 1))]",[],[],[],[]
results,Comparing Unsupervised Measures,[],"[('Unsupervised Measures', (1, 3))]",[],[],[],[]
results,"The results show preference to the syntactic context - types ( dep and joint ) , which might be explained by the fact that these contexts are richer ( as they contain both proximity and syntactic information ) and therefore more discriminative .","[('show', (2, 3)), ('to', (4, 5))]","[('preference', (3, 4)), ('syntactic context - types ( dep and joint )', (6, 15))]",[],[],[],[]
results,"In feature weighting there is no consistency , but interestingly , raw frequency appears to be successful in hypernymy detection , contrary to previously reported results for word similarity tasks , where PPMI was shown to outperform it .","[('In', (0, 1)), ('appears to be', (13, 16)), ('in', (17, 18))]","[('feature weighting', (1, 3)), ('consistency', (6, 7)), ('raw frequency', (11, 13)), ('successful', (16, 17)), ('hypernymy detection', (18, 20))]",[],[],[],[]
results,The new SLQS variants are on top of the list in many settings .,"[('on top of', (5, 8))]","[('new SLQS variants', (1, 4)), ('list', (9, 10)), ('many settings', (11, 13))]",[],[],[],[]
results,"In particular they perform well in discriminating hypernyms from symmetric relations ( antonymy , synonymy , coordination ) .","[('perform', (3, 4)), ('in discriminating', (5, 7)), ('from', (8, 9))]","[('well', (4, 5)), ('hypernyms', (7, 8)), ('symmetric relations', (9, 11)), ('antonymy', (12, 13))]",[],[],[],[]
results,Comparison to State - of - the - art Supervised Methods,[],"[('State - of - the - art Supervised Methods', (2, 11))]",[],[],[],[]
results,"The over all performance of the embeddingbased classifiers is almost perfect , and in particular the best performance is achieved using the concatenation method with either GloVe or the dependency - based embeddings .","[('of', (4, 5)), ('is', (8, 9)), ('achieved using', (19, 21)), ('with', (24, 25))]","[('over all performance', (1, 4)), ('embeddingbased classifiers', (6, 8)), ('almost perfect', (9, 11)), ('best performance', (16, 18)), ('concatenation method', (22, 24)), ('GloVe', (26, 27)), ('dependency - based embeddings', (29, 33))]",[],[],[],[]
results,"As expected , the unsupervised measures perform worse than the embedding - based classifiers , though generally not bad on their own .","[('perform', (6, 7)), ('than', (8, 9))]","[('unsupervised measures', (4, 6)), ('worse', (7, 8)), ('embedding - based classifiers', (10, 14))]",[],[],[],[]
research-problem,Supervised Distributional Hypernym Discovery via Domain Adaptation,[],"[('Supervised Distributional Hypernym Discovery', (0, 4))]",[],[],[],[]
research-problem,"In addition , while not being taxonomy learning systems per se , semi-supervised systems for Information Extraction such as NELL rely crucially on taxonomized concepts and their relations within their learning process .",[],"[('Information Extraction', (15, 17)), ('NELL', (19, 20))]",[],[],[],[]
model,"In this paper we propose TAXOEMBED 2 , a hypernym detection algorithm based on sense embeddings , which can be easily applied to the construction of lexical taxonomies .","[('propose', (4, 5)), ('based on', (12, 14))]","[('TAXOEMBED', (5, 6)), ('hypernym detection algorithm', (9, 12)), ('sense embeddings', (14, 16))]",[],[],[],[]
model,"It is designed to discover hypernymic relations by exploiting linear transformations in embedding spaces and , unlike previous approaches , leverages this intuition to learn a specific semanticallyaware transformation matrix for each domain of knowledge .","[('designed to discover', (2, 5)), ('by exploiting', (7, 9)), ('in', (11, 12)), ('leverages', (20, 21)), ('to learn', (23, 25)), ('for', (30, 31))]","[('hypernymic relations', (5, 7)), ('linear transformations', (9, 11)), ('embedding spaces', (12, 14)), ('specific semanticallyaware transformation matrix', (26, 30)), ('each domain of knowledge', (31, 35))]",[],[],[],[]
model,Our best configuration ( ranking first in two thirds of the experiments conducted ) considers two training sources :,"[('considers', (14, 15))]","[('best configuration', (1, 3)), ('two training sources', (15, 18))]",[],[],[],[]
model,( 1 ) Manually curated pairs from Wikidata ; and ( 2 ) Hypernymy relations from a KB which integrates several Open Information Extraction ( OIE ) systems .,"[('from', (6, 7)), ('from', (15, 16)), ('integrates', (19, 20))]","[('Manually curated pairs', (3, 6)), ('Wikidata', (7, 8)), ('Hypernymy relations', (13, 15)), ('KB', (17, 18)), ('several Open Information Extraction ( OIE ) systems', (20, 28))]",[],[],[],[]
model,"Since our method uses a very large semantic network as reference sense inventory , we are able to perform jointly hypernym extraction and dis ambiguation , from which 1 The terminology is not entirely unified in this respect .","[('uses', (3, 4)), ('as', (9, 10)), ('able to', (16, 18)), ('perform', (18, 19))]","[('jointly', (19, 20)), ('hypernym extraction and dis ambiguation', (20, 25))]",[],[],[],[]
research-problem,2 Data and source code available from the following link : www.taln.upf.edu/taxoembed . expanding existing ontologies becomes a trivial task .,[],[],[],[],[],[]
baselines,"We compare against a number of taxonomy learning and Information Extraction systems , namely , WiBi and DefIE .","[('compare against', (1, 3)), ('namely', (13, 14))]","[('taxonomy learning and Information Extraction systems', (6, 12)), ('WiBi', (15, 16)), ('DefIE', (17, 18))]",[],[],[],[]
baselines,"Finally , DefIE is an automaic OIE system relying on the syntactic structure of pre-dis ambiguated definitions 13 .","[('is', (3, 4)), ('relying on', (8, 10)), ('of', (13, 14))]","[('DefIE', (2, 3)), ('automaic OIE system', (5, 8)), ('syntactic structure', (11, 13)), ('pre-dis ambiguated definitions', (14, 17))]",[],[],[],[]
results,shows the results of TAXOEMBED and all comparison systems .,"[('of', (3, 4))]","[('TAXOEMBED and all comparison systems', (4, 9))]",[],[],[],[]
results,"As expected , Yago and WiBi achieve the best over all results .","[('achieve', (6, 7))]","[('Yago and WiBi', (3, 6)), ('best over all results', (8, 12))]",[],[],[],[]
results,"However , TAXOEM - BED , based solely on distributional information , performed competitively in detecting new hypernyms when compared to DefIE , improving its recall in most domains , and even surpassing Yago in technical areas like biology or health .","[('based solely on', (6, 9)), ('performed', (12, 13)), ('in detecting', (14, 16)), ('compared to', (19, 21)), ('improving', (23, 24)), ('in', (26, 27))]","[('TAXOEM - BED', (2, 5)), ('distributional information', (9, 11)), ('competitively', (13, 14)), ('new hypernyms', (16, 18)), ('DefIE', (21, 22)), ('recall', (25, 26)), ('most domains', (27, 29)), ('surpassing', (32, 33)), ('Yago', (33, 34))]",[],[],[],[]
results,"However , our model does not perform particularly well on media and physics .","[('does not perform', (4, 7)), ('on', (9, 10))]","[('particularly well', (7, 9)), ('media and physics', (10, 13))]",[],[],[],[]
research-problem,Hypernym discovery aims to discover the hypernym word sets given a hyponym word and proper corpus .,[],"[('Hypernym discovery', (0, 2))]",[],[],[],[]
research-problem,"In the past SemEval contest ( Sem Eval - 2015 task 17 1 , SemEval - 2016 task 13 2 ) , the "" Hypernym Detection "" task was treated as a classfication task , i.e. , given a ( hyponym , hypernym ) pair , deciding whether the pair is a true hypernymic relation or not .","[('treated as', (29, 31))]",[],[],[],[],[]
hyperparameters,Word2vec is used to produce the word embeddings .,"[('to produce', (3, 5))]","[('Word2vec', (0, 1)), ('word embeddings', (6, 8))]",[],[],[],[]
hyperparameters,The skip - gram model ( - cbow 0 ) is used with the embedding dimension set to 300 ( - size 300 ) .,"[('used with', (11, 13)), ('set to', (16, 18))]","[('skip - gram model ( - cbow 0 )', (1, 10)), ('embedding dimension', (14, 16)), ('300 ( - size 300 )', (18, 24))]",[],[],[],[]
results,Results Based on Projection Learning,[],"[('Projection Learning', (3, 5))]",[],[],[],[]
results,"By using the same evaluating metrics as PRF in the cited paper , our best F - value on the validation set is 0.68 ( the paper result is 0.73 ) when the best cluster number is 2 and the threshold is ( 17.7 , 17.3 ) .","[('as', (6, 7)), ('on', (18, 19)), ('is', (22, 23)), ('when', (31, 32)), ('is', (36, 37)), ('is', (41, 42))]","[('PRF', (7, 8)), ('best F - value', (14, 18)), ('validation set', (20, 22)), ('0.68', (23, 24)), ('best cluster number', (33, 36)), ('2', (37, 38)), ('threshold', (40, 41))]",[],[],[],[]
results,"This projection learning method performs not very well on task9 , we think the most probable reason is that in , the problem is formalized as a classification problem , in which the ( hyponym , hypernym ) pairs are given .","[('performs', (4, 5)), ('on', (8, 9)), ('formalized as', (24, 26))]","[('projection learning method', (1, 4)), ('not very well', (5, 8)), ('task9', (9, 10)), ('classification problem', (27, 29))]",[],[],[],[]
results,Results Based on NN,[],"[('NN', (3, 4))]",[],[],[],[]
results,The performance evaluated using either cross validation or the test data is much worse than that of a typical hypernym prediction task reported by .,"[('evaluated using', (2, 4)), ('is', (11, 12)), ('than', (14, 15))]","[('performance', (1, 2)), ('cross validation or the test data', (5, 11)), ('much worse', (12, 14)), ('typical hypernym prediction task', (18, 22))]",[],[],[],[]
results,"Although the method proposed by us is quite simple , our submissions are the 1st on Spanish , the 2nd on Italian , the 6th on English , ranked by the metric of MAP .","[('are', (12, 13)), ('on', (15, 16)), ('on', (20, 21)), ('on', (25, 26)), ('ranked by', (28, 30))]","[('1st', (14, 15)), ('Spanish', (16, 17)), ('2nd', (19, 20)), ('Italian', (21, 22)), ('6th', (24, 25)), ('English', (26, 27)), ('metric', (31, 32)), ('MAP', (33, 34))]",[],[],[],[]
results,"Compared with the results got by cross validation , the performance evaluated on the test data ) dropped significantly on English ( MAP dropped by 4 % ) and Italian ( MAP dropped by 8 % ) , but increased by a margin on Spanish ( MAP increased by 3.6 % ) .","[('on', (19, 20)), ('dropped by', (23, 25)), ('dropped by', (32, 34)), ('increased by', (39, 41)), ('on', (43, 44)), ('increased by', (47, 49))]","[('cross validation', (6, 8)), ('performance', (10, 11)), ('test data', (14, 16)), ('dropped', (17, 18)), ('significantly', (18, 19)), ('English', (20, 21)), ('MAP', (22, 23)), ('4 %', (25, 27)), ('8 %', (34, 36)), ('margin', (42, 43)), ('Spanish', (44, 45)), ('3.6 %', (49, 51))]",[],[],[],[]
research-problem,CRIM at SemEval-2018 Task 9 : A Hybrid Approach to Hypernym Discovery,[],"[('Hypernym Discovery', (10, 12))]",[],[],[],[]
model,"The system developed by the CRIM team for the task of hypernym discovery exploits a combination of two approaches : an unsupervised , pattern - based approach and a supervised , projection learning approach .","[('exploits', (13, 14)), ('combination of', (15, 17))]","[('hypernym discovery', (11, 13)), ('unsupervised , pattern - based approach', (21, 27)), ('supervised , projection learning approach', (29, 34))]",[],[],[],[]
results,Our hybrid system was ranked 1st on all three sub - tasks for which we submitted runs .,"[('on', (6, 7))]","[('hybrid system', (1, 3)), ('ranked 1st', (4, 6)), ('all three sub - tasks', (7, 12))]",[],[],[],[]
results,"As shown in , the scores obtained using this system are much higher than the strongest baselines for this task .","[('obtained using', (6, 8)), ('are', (10, 11)), ('than', (13, 14))]","[('scores', (5, 6)), ('much higher', (11, 13)), ('strongest baselines', (15, 17))]",[],[],[],[]
results,"Furthermore , it is likely that we could improve our scores on 2A and 2B , since we only tuned the system on 1A .","[('improve', (8, 9)), ('on', (11, 12))]","[('2A and 2B', (12, 15))]",[],[],[],[]
results,"If we compare runs 1 and 2 of our hybrid system , we see that data augmentation improved our scores slightly on 1A and 2B , and increased them by several points on 2A .","[('see that', (13, 15)), ('improved', (17, 18)), ('on', (21, 22)), ('increased them by', (27, 30)), ('on', (32, 33))]","[('data augmentation', (15, 17)), ('our scores', (18, 20)), ('slightly', (20, 21)), ('1A and 2B', (22, 25)), ('several points', (30, 32)), ('2A', (33, 34))]",[],[],[],[]
results,"Our cross-evaluation results are better than the supervised baseline computed using the normal evaluation setup , so training our system on general - purpose data produced better results on a domain - specific test set than a strong , supervised baseline trained on the domain - specific data .","[('are', (3, 4)), ('better than', (4, 6)), ('computed using', (9, 11)), ('training', (17, 18)), ('on', (20, 21)), ('produced', (25, 26)), ('on', (28, 29)), ('than', (35, 36)), ('trained on', (41, 43))]","[('cross-evaluation results', (1, 3)), ('supervised baseline', (7, 9)), ('normal evaluation setup', (12, 15)), ('general - purpose data', (21, 25)), ('better results', (26, 28)), ('domain - specific test set', (30, 35)), ('strong , supervised baseline', (37, 41))]",[],[],[],[]
results,"Note that the unsupervised system outperformed all other unsupervised systems evaluated on this task , and even outperformed the supervised baseline on 2A .","[('outperformed', (5, 6)), ('outperformed', (17, 18)), ('on', (21, 22))]","[('unsupervised system', (3, 5)), ('all other unsupervised systems', (6, 10)), ('supervised baseline', (19, 21))]",[],[],[],[]
results,"Given this observation , we find it somewhat surprising that run 1 is the best on all 3 test sets when we use the hybrid system .","[('is', (12, 13)), ('on', (15, 16)), ('when', (20, 21)), ('use', (22, 23))]","[('run 1', (10, 12)), ('best', (14, 15)), ('all 3 test sets', (16, 20)), ('hybrid system', (24, 26))]",[],[],[],[]
ablation-analysis,"To assess the influence of different aspects of the supervised system and its training algorithm , we carried out a few simple ablation tests on subtask 1 A .","[('on', (24, 25))]",[],[],[],[],[]
ablation-analysis,"These results show that 2 of the techniques we used , namely subsampling and multitask learning , actually harmed our system 's performance on test set 1 A , although our experiments on the trial set suggested that they would be beneficial .","[('show', (2, 3)), ('namely', (11, 12)), ('harmed', (18, 19)), ('on', (23, 24))]","[('subsampling', (12, 13)), (""our system 's performance"", (19, 23))]",[],[],[],[]
ablation-analysis,"On the other hand , fine - tuning the word embeddings during training seems to be one of the keys to the success of this approach , as are the use of multiple projection matrices , and the sampling of multiple negative examples for each positive example .","[('fine - tuning', (5, 8)), ('during', (11, 12))]","[('word embeddings', (9, 11)), ('training', (12, 13)), ('sampling', (38, 39))]",[],[],[],[]
ablation-analysis,"We should also note that the supervised model is prone to overfitting , and we found early stopping to be particularly important .","[('note', (3, 4)), ('prone to', (9, 11))]","[('supervised model', (6, 8)), ('overfitting', (11, 12)), ('early stopping', (16, 18))]",[],[],[],[]
research-problem,EXPR at SemEval- 2018 Task 9 : A Combined Approach for Hypernym Discovery,[],"[('Hypernym Discovery', (11, 13))]",[],[],[],[]
model,"To tackle this task , we propose an approach that combines a path - based technique and distributional technique via concatenating two feature vectors : a feature vector constructed using dependency parser output and a feature vector obtained using term embeddings .","[('propose', (6, 7)), ('combines', (10, 11)), ('via', (19, 20)), ('concatenating', (20, 21)), ('constructed using', (28, 30)), ('obtained using', (37, 39))]","[('path - based technique', (12, 16)), ('distributional technique', (17, 19)), ('two feature vectors', (21, 24)), ('feature vector', (26, 28)), ('dependency parser output', (30, 33)), ('feature vector', (35, 37)), ('term embeddings', (39, 41))]",[],[],[],[]
model,"Then , by using the concatenated vector we create a binary supervised classifier model based on support vector machine ( SVM ) algorithm .","[('create', (8, 9)), ('based on', (14, 16))]","[('concatenated vector', (5, 7)), ('binary supervised classifier model', (10, 14)), ('support vector machine ( SVM ) algorithm', (16, 23))]",[],[],[],[]
model,The model predicts if a term and its candidate hypernym are hypernym related or not .,"[('predicts', (2, 3)), ('are', (10, 11))]","[('term and its candidate hypernym', (5, 10)), ('hypernym related or not', (11, 15))]",[],[],[],[]
experiments,Results and Analysis,[],[],[],[],[],[]
results,"For the three corpora , our system performs better than STJU system , and it performs better than the MFH system on the English corpora .","[('For', (0, 1)), ('performs', (7, 8)), ('than', (9, 10)), ('performs', (15, 16)), ('than', (17, 18)), ('on', (21, 22))]","[('three corpora', (2, 4)), ('our system', (5, 7)), ('better', (8, 9)), ('STJU system', (10, 12)), ('better', (16, 17)), ('MFH system', (19, 21)), ('English corpora', (23, 25))]",[],[],[],[]
results,"In addition , the result shows that our system performs well in discovering new hypernyms not defined in the gold hypernyms where it yields good False Positive values in the three corpora and we achieve the best False Positive value in Medical corpus The evaluation results of our system and other supervised systems .","[('shows', (5, 6)), ('performs', (9, 10)), ('in discovering', (11, 13)), ('not defined in', (15, 18)), ('yields', (23, 24)), ('in', (28, 29)), ('achieve', (34, 35)), ('in', (40, 41))]","[('our system', (7, 9)), ('well', (10, 11)), ('new hypernyms', (13, 15)), ('gold hypernyms', (19, 21)), ('good False Positive values', (24, 28)), ('three corpora', (30, 32)), ('Medical corpus', (41, 43))]",[],[],[],[]
results,"As shown in the table 2 , the candidate hypernym extraction ( CHE ) coverage for English testing terms is 950 ( 63 % ) , that means our system is unable to extract any candidate hypernym for 550 ( 37 % ) terms ( 398 entities and 152 concepts ) .","[('for', (15, 16)), ('is', (19, 20))]","[('candidate hypernym extraction ( CHE ) coverage', (8, 15)), ('English testing terms', (16, 19)), ('950 ( 63 % )', (20, 25))]",[],[],[],[]
research-problem,"This paper describes 300 - sparsans ' participation in SemEval - 2018 Task 9 : Hypernym Discovery , with a system based on sparse coding and a formal concept hierarchy obtained from word embeddings .","[('based on', (21, 23)), ('obtained from', (30, 32))]","[('Hypernym Discovery', (15, 17)), ('system', (20, 21)), ('sparse coding', (23, 25)), ('formal concept hierarchy', (27, 30)), ('word embeddings', (32, 34))]",[],[],[],[]
model,Here we apply sparse feature pairs to hypernym extraction .,"[('apply', (2, 3)), ('to', (6, 7))]","[('sparse feature pairs', (3, 6)), ('hypernym extraction', (7, 9))]",[],[],[],[]
research-problem,Sparse representation is related to hypernymy in various natural ways .,[],"[('Sparse representation', (0, 2))]",[],[],[],[]
research-problem,One of them is through Formal concept Analysis ( FCA ) .,"[('through', (4, 5))]","[('Formal concept Analysis ( FCA )', (5, 11))]",[],[],[],[]
research-problem,"Another natural formulation is related to hierarchical sparse coding , where trees describe the order in which variables "" enter the model "" ( i.e. , take non - zero values ) .","[('where', (10, 11)), ('describe', (12, 13))]","[('hierarchical sparse coding', (6, 9)), ('trees', (11, 12))]",[],[],[],[]
model,Exploiting the correspondence between the variable tree and the hypernym hierarchy offers itself as a natural choice .,"[('Exploiting', (0, 1)), ('between', (3, 4)), ('offers', (11, 12))]","[('correspondence', (2, 3)), ('variable tree and the hypernym hierarchy', (5, 11)), ('natural choice', (15, 17))]",[],[],[],[]
results,"Our submission with attribute pairs achieved first place in categories ( 1B ) Italian ( all and entities ) , ( 1C ) Spanish entities , and ( 2B ) music entities .","[('with', (2, 3)), ('achieved', (5, 6)), ('in', (8, 9))]","[('attribute pairs', (3, 5)), ('first place', (6, 8)), ('categories', (9, 10)), ('Italian ( all and entities )', (13, 19)), ('Spanish entities', (23, 25)), ('music entities', (30, 32))]",[],[],[],[]
research-problem,Apollo at SemEval-2018 Task 9 : Detecting Hypernymy Relations Using Syntactic Dependencies,"[('Detecting', (6, 7))]","[('Hypernymy Relations', (7, 9))]",[],[],[],[]
research-problem,This paper presents the Apollo team 's system for hypernym discovery which participated in task 9 of Semeval 2018 based on unsupervised machine learning .,"[('based on', (19, 21))]","[('hypernym discovery', (9, 11)), ('unsupervised machine learning', (21, 24))]",[],[],[],[]
model,It is a rule - based system that exploits syntactic dependency paths that generalize Hearst - style lexical patterns .,"[('is', (1, 2)), ('exploits', (8, 9)), ('that generalize', (12, 14))]","[('rule - based system', (3, 7)), ('syntactic dependency paths', (9, 12)), ('Hearst - style lexical patterns', (14, 19))]",[],[],[],[]
experiments,Results,[],[],[],[],[],[]
results,"While some relations have not been very fruitful ( such as X "" obj "" Y , for insance ) , others , instead , have been very productive , generating tens of thousands relations .","[('generating', (30, 31))]","[('very productive', (27, 29)), ('tens of thousands relations', (31, 35))]",[],[],[],[]
results,"The project 's results show that we have managed to accomplish the main objective of this project , to outperform the random strategy .","[('show', (4, 5)), ('managed to accomplish', (8, 11)), ('to outperform', (18, 20))]","[('main objective', (12, 14)), ('random strategy', (21, 23))]",[],[],[],[]
results,"The lower scores have been obtained for multiword expressions , for which we plan to add dedicated modules .","[('obtained for', (5, 7))]","[('lower scores', (1, 3)), ('multiword expressions', (7, 9)), ('dedicated modules', (16, 18))]",[],[],[],[]
research-problem,Neural Models for Reasoning over Multiple Mentions using Coreference,[],"[('Reasoning over Multiple Mentions', (3, 7))]",[],[],[],[]
model,"We call this coreference - based reasoning since multiple pieces of information , which may lie across sentence , paragraph or document boundaries , are tied together with the help of referring expressions which denote the same real - world entity .","[('call', (1, 2))]","[('coreference - based reasoning', (3, 7))]",[],[],[],[]
model,"Specifically , given an input sequence and coreference clusters extracted from an external system , we introduce a term in the update equations for Gated Recurrent Units ( GRU ) which depends on the hidden state of the coreferent antecedent of the current token ( if it exists ) .","[('given', (2, 3)), ('extracted from', (9, 11)), ('introduce', (16, 17)), ('in', (19, 20)), ('for', (23, 24)), ('depends on', (31, 33)), ('of', (36, 37)), ('of', (40, 41))]","[('input sequence and coreference clusters', (4, 9)), ('external system', (12, 14)), ('term', (18, 19)), ('update equations', (21, 23)), ('Gated Recurrent Units ( GRU )', (24, 30)), ('hidden state', (34, 36)), ('coreferent antecedent', (38, 40)), ('current token', (42, 44))]",[],[],[],[]
model,This way hidden states are propagated along coreference chains and the original sequence in parallel .,"[('propagated along', (5, 7))]","[('hidden states', (2, 4)), ('coreference chains', (7, 9)), ('original sequence', (11, 13)), ('in parallel', (13, 15))]",[],[],[],[]
model,We compare our Coref - GRU layer with the regular GRU layer by incorporating it in a recent model for reading comprehension .,"[('compare', (1, 2)), ('with', (7, 8)), ('for', (19, 20))]","[('Coref - GRU layer', (3, 7)), ('regular GRU layer', (9, 12)), ('recent model', (17, 19)), ('reading comprehension', (20, 22))]",[],[],[],[]
results,BAbi AI tasks .,[],"[('BAbi AI tasks', (0, 3))]",[],[],[],[]
experiments,In each case we see clear improvements of using C - GRU layers over GRU layers .,"[('see', (4, 5)), ('of using', (7, 9)), ('over', (13, 14))]","[('clear improvements', (5, 7)), ('C - GRU layers', (9, 13)), ('GRU layers', (14, 16))]",[],[],[],[]
experiments,"Comparing to the QRN baseline , we found that C - GRU was significantly worse on task 15 ( basic deduction ) .","[('Comparing to', (0, 2)), ('found that', (7, 9)), ('was', (12, 13)), ('on', (15, 16))]","[('QRN baseline', (3, 5)), ('C - GRU', (9, 12)), ('significantly worse', (13, 15)), ('task 15 ( basic deduction )', (16, 22))]",[],[],[],[]
experiments,"On the other hand , C - GRU was significantly better than QRN on task 16 ( basic induction ) .","[('significantly better than', (9, 12)), ('than', (11, 12)), ('on', (13, 14))]","[('C - GRU', (5, 8)), ('significantly better', (9, 11)), ('QRN', (12, 13)), ('task 16 ( basic induction )', (14, 20))]",[],[],[],[]
experiments,Wikihop dataset .,[],"[('Wikihop dataset', (0, 2))]",[],[],[],[]
experiments,"We see higher performance for the C - GRU model in the low data regime , and better generalization throughout the training curve for all three settings .","[('see', (1, 2)), ('for', (4, 5)), ('in', (10, 11)), ('throughout', (19, 20))]","[('higher performance', (2, 4)), ('C - GRU model', (6, 10)), ('low data regime', (12, 15)), ('better generalization', (17, 19)), ('training curve', (21, 23))]",[],[],[],[]
research-problem,Cut to the Chase : A Context Zoom - in Network for Reading Comprehension,[],"[('Reading Comprehension', (12, 14))]",[],[],[],[]
research-problem,In recent years many deep neural networks have been proposed to solve Reading Comprehension ( RC ) tasks .,[],"[('Reading Comprehension ( RC )', (12, 17))]",[],[],[],[]
research-problem,"To show the effectiveness of our architecture , we conducted several experiments on the recently proposed and challenging RC dataset ' Nar - rative QA ' .","[('on', (12, 13))]","[('Nar - rative QA', (21, 25))]",[],[],[],[]
model,"To address the issues above we develop a novel context zoom - in network ( ConZNet ) for RC tasks , which can skip through irrelevant parts of a document and generate an answer using only the relevant regions of text .","[('develop', (6, 7)), ('for', (17, 18)), ('skip through', (23, 25)), ('of', (27, 28)), ('generate', (31, 32)), ('using', (34, 35)), ('of', (39, 40))]","[('novel context zoom - in network ( ConZNet )', (8, 17)), ('RC tasks', (18, 20)), ('irrelevant parts', (25, 27)), ('document', (29, 30)), ('answer', (33, 34)), ('relevant regions', (37, 39)), ('text', (40, 41))]",[],[],[],[]
model,The ConZNet architecture consists of two phases .,"[('consists of', (3, 5))]","[('ConZNet architecture', (1, 3)), ('two phases', (5, 7))]",[],[],[],[]
model,In the first phase we identify the relevant regions of text by employing a reinforcement learning algorithm .,"[('In', (0, 1)), ('identify', (5, 6)), ('of', (9, 10)), ('by employing', (11, 13))]","[('first phase', (2, 4)), ('relevant regions', (7, 9)), ('text', (10, 11)), ('reinforcement learning algorithm', (14, 17))]",[],[],[],[]
model,"The second phase is based on an encoder - decoder architecture , which comprehends the identified regions of text and generates the answer by using a residual self - attention network as encoder and a RNNbased sequence generator along with a pointer network as the decoder .","[('based on', (4, 6)), ('comprehends', (13, 14)), ('of', (17, 18)), ('generates', (20, 21)), ('by using', (23, 25)), ('as', (31, 32)), ('along with', (38, 40)), ('as', (43, 44))]","[('second phase', (1, 3)), ('encoder - decoder architecture', (7, 11)), ('identified regions', (15, 17)), ('text', (18, 19)), ('answer', (22, 23)), ('residual self - attention network', (26, 31)), ('encoder', (32, 33)), ('RNNbased sequence generator', (35, 38)), ('pointer network', (41, 43)), ('decoder', (45, 46))]",[],[],[],[]
model,"Unlike existing approaches , our method has the ability to select relevant regions of text not just based on the question but also on how well regions are related to each other .","[('of', (13, 14)), ('based on', (17, 19)), ('related to', (28, 30))]","[('relevant regions', (11, 13)), ('text', (14, 15)), ('question', (20, 21)), ('each other', (30, 32))]",[],[],[],[]
model,"Moreover , our decoder combines span prediction and sequence generation .","[('combines', (4, 5))]","[('span prediction and sequence generation', (5, 10))]",[],[],[],[]
model,This allows the decoder to copy words from the relevant regions of text as well as to generate words from a fixed vocabulary .,"[('allows', (1, 2)), ('to copy', (4, 6)), ('to', (4, 5)), ('copy', (5, 6)), ('from', (7, 8)), ('of', (11, 12)), ('to generate', (16, 18)), ('from', (19, 20))]","[('decoder', (3, 4)), ('words', (6, 7)), ('relevant regions', (9, 11)), ('text', (12, 13)), ('words', (18, 19)), ('fixed vocabulary', (21, 23))]",[],[],[],[]
baselines,"We compare our model against reported models in ( Seq2Seq , ASR , BiDAF ) and the Multi-range Reasoning Unit ( MRU ) in .",[],"[('reported models', (5, 7)), ('Multi-range Reasoning Unit ( MRU )', (17, 23))]",[],[],[],[]
baselines,"We implemented two baseline models ( Baseline 1 , Baseline 2 ) with Context Zoom layer similar to .","[('implemented', (1, 2)), ('with', (12, 13))]","[('two baseline models', (2, 5)), ('Context Zoom layer', (13, 16))]",[],[],[],[]
experimental-setup,The model is implemented using Python and Tensorflow .,"[('implemented using', (3, 5))]","[('Python and Tensorflow', (5, 8))]",[],[],[],[]
experimental-setup,All the weights of the model are initialized by Glorot Initialization and biases are initialized with zeros .,"[('of', (3, 4)), ('initialized by', (7, 9)), ('initialized with', (14, 16))]","[('weights', (2, 3)), ('model', (5, 6)), ('Glorot Initialization', (9, 11)), ('biases', (12, 13)), ('zeros', (16, 17))]",[],[],[],[]
experimental-setup,"We use a 300 dimensional word vectors from GloVe ( with 840 billion pre-trained vectors ) to initialize the word embeddings , which we kept constant during training .","[('use', (1, 2)), ('from', (7, 8)), ('with', (10, 11)), ('to initialize', (16, 18)), ('during', (26, 27))]","[('300 dimensional word vectors', (3, 7)), ('GloVe', (8, 9)), ('840 billion pre-trained vectors', (11, 15)), ('word embeddings', (19, 21)), ('training', (27, 28))]",[],[],[],[]
experimental-setup,All the words that do not appear in Glove are initialized by sampling from a uniform random distribution between .,"[('initialized by', (10, 12)), ('from', (13, 14))]","[('words', (2, 3)), ('Glove', (8, 9)), ('sampling', (12, 13)), ('uniform random distribution', (15, 18))]",[],[],[],[]
experimental-setup,We apply dropout between the layers with keep probability of 0.8 ( i.e dropout = 0.2 ) .,"[('apply', (1, 2)), ('between', (3, 4)), ('with', (6, 7)), ('of', (9, 10))]","[('dropout', (2, 3)), ('layers', (5, 6)), ('keep probability', (7, 9)), ('0.8', (10, 11))]",[],[],[],[]
experimental-setup,The number of hidden units are set to 100 .,"[('set to', (6, 8))]","[('number of hidden units', (1, 5)), ('100', (8, 9))]",[],[],[],[]
experimental-setup,"We trained our model with the AdaDelta ( Zeiler , 2012 ) optimizer for 50 epochs , an initial learning rate of 0.1 , and a minibatch size of 32 .","[('trained', (1, 2)), ('with', (4, 5)), ('for', (13, 14)), ('of', (21, 22)), ('of', (28, 29))]","[('our model', (2, 4)), ('AdaDelta ( Zeiler , 2012 ) optimizer', (6, 13)), ('50 epochs', (14, 16)), ('initial learning rate', (18, 21)), ('0.1', (22, 23)), ('minibatch size', (26, 28)), ('32', (29, 30))]",[],[],[],[]
results,The performance of our model gradually dropped from sample size 7 onwards .,"[('of', (2, 3)), ('from', (7, 8))]","[('performance', (1, 2)), ('our model', (3, 5)), ('gradually dropped', (5, 7)), ('sample size 7 onwards', (8, 12))]",[],[],[],[]
results,This result shows evidence that only a few relevant sentences are sufficient to answer a question .,"[('shows', (2, 3)), ('are', (10, 11))]","[('few relevant sentences', (7, 10)), ('sufficient', (11, 12)), ('question', (15, 16))]",[],[],[],[]
results,The performance of the model improved dramatically with sample sizes 3 and 5 compared to the sample size of 1 .,"[('of', (2, 3)), ('with', (7, 8)), ('compared to', (13, 15))]","[('performance', (1, 2)), ('model', (4, 5)), ('improved dramatically', (5, 7)), ('sample sizes', (8, 10)), ('3 and 5', (10, 13)), ('sample size', (16, 18)), ('1', (19, 20))]",[],[],[],[]
ablation-analysis,This result points out that the self - attention mechanism in the Context zoom layer is an important component to identify related relevant sentences .,"[('in', (10, 11)), ('is', (15, 16)), ('to identify', (19, 21))]","[('self - attention mechanism', (6, 10)), ('Context zoom layer', (12, 15)), ('important component', (17, 19)), ('related relevant sentences', (21, 24))]",[],[],[],[]
research-problem,A Simple and Effective Approach to the Story Cloze Test,[],"[('Story Cloze Test', (7, 10))]",[],[],[],[]
model,"Where previous approaches rely on feature engineering or involved neural network architectures , we achieve high accuracy with a fully neural approach involving only a single feedforward network and pre-trained skip - thought embeddings .","[('achieve', (14, 15)), ('with', (17, 18)), ('involving', (22, 23))]","[('high accuracy', (15, 17)), ('fully neural approach', (19, 22)), ('single feedforward network', (25, 28)), ('pre-trained skip - thought embeddings', (29, 34))]",[],[],[],[]
experiments,"Second , we find that considering only the last sentence of the context outperforms models that consider the full context .","[('considering', (5, 6)), ('of', (10, 11)), ('that consider', (15, 17))]","[('last sentence', (8, 10)), ('context', (12, 13)), ('outperforms', (13, 14)), ('models', (14, 15)), ('full context', (18, 20))]",[],[],[],[]
model,"In sum , our approach differs from previous efforts in the joint use of three strategies : ( 1 ) using skip - thought embeddings for sentences in the story in a feed - forward neural network , ( 2 ) training the model on the provided validation set , and ( 3 ) considering the two endings with only the last sentence in the prompt .","[('in', (9, 10)), ('using', (20, 21)), ('for', (25, 26)), ('in', (27, 28)), ('in', (30, 31)), ('training', (41, 42)), ('on', (44, 45)), ('considering', (54, 55)), ('with', (58, 59)), ('in', (63, 64))]","[('three strategies', (14, 16)), ('skip - thought embeddings', (21, 25)), ('sentences', (26, 27)), ('story', (29, 30)), ('feed - forward neural network', (32, 37)), ('model', (43, 44)), ('provided validation set', (46, 49)), ('two endings', (56, 58)), ('last sentence', (61, 63)), ('prompt', (65, 66))]",[],[],[],[]
hyperparameters,We use cross-entropy loss and SGD with learning rate of 0.01 .,"[('use', (1, 2)), ('with', (6, 7)), ('of', (9, 10))]","[('cross-entropy loss', (2, 4)), ('SGD', (5, 6)), ('learning rate', (7, 9)), ('0.01', (10, 11))]",[],[],[],[]
hyperparameters,"During training , we save the model every 3000 iterations , and calculate the validation accuracy .","[('During', (0, 1)), ('save', (4, 5)), ('every', (7, 8)), ('calculate', (12, 13))]","[('training', (1, 2)), ('model', (6, 7)), ('3000 iterations', (8, 10)), ('validation accuracy', (14, 16))]",[],[],[],[]
results,The 3 - layer feed - forward neural network trained on the validation set by summing the skip - thought embeddings of the last sentence ( LS ) of the story prompt and the ending gives the best accuracy ( 76.5 % ) .,"[('trained on', (9, 11)), ('by summing', (14, 16)), ('of', (21, 22)), ('of', (28, 29)), ('gives', (35, 36))]","[('3 - layer feed - forward neural network', (1, 9)), ('validation set', (12, 14)), ('skip - thought embeddings', (17, 21)), ('last sentence ( LS )', (23, 28)), ('story prompt and the ending', (30, 35)), ('best accuracy ( 76.5 % )', (37, 43))]",[],[],[],[]
results,"Comparing ' val - LS- skip ' to ' val - LS - Glo Ve ' ( i.e. , using skip - thought embeddings for sentences vs. GloVe word embeddings ) , we confirm that the success of this approach lies in the sizable boost to accuracy from the use of pretrained skip - thought embeddings .","[('Comparing', (0, 1)), ('to', (7, 8)), ('confirm', (33, 34)), ('to', (45, 46))]","[('accuracy', (46, 47))]",[],[],[],[]
results,"We note that the model trained using only the last sentence ( LS ) of the story context has higher accuracy compared to the model that uses a GRU to encode the full context ( FC ) , and even the model which encodes the entire context .","[('note', (1, 2)), ('trained using', (5, 7)), ('of', (14, 15)), ('has', (18, 19)), ('compared to', (21, 23)), ('that uses', (25, 27)), ('to encode', (29, 31))]","[('model', (4, 5)), ('last sentence ( LS )', (9, 14)), ('story context', (16, 18)), ('higher accuracy', (19, 21)), ('model', (24, 25)), ('GRU', (28, 29)), ('full context ( FC )', (32, 37)), ('entire context', (45, 47))]",[],[],[],[]
research-problem,Published as a conference paper at ICLR 2017 DYNAMIC COATTENTION NETWORKS FOR QUESTION ANSWERING,[],"[('QUESTION ANSWERING', (12, 14))]",[],[],[],[]
research-problem,Question answering ( QA ) is a crucial task in natural language processing that requires both natural language understanding and world knowledge .,[],"[('Question answering ( QA )', (0, 5))]",[],[],[],[]
research-problem,"Previous QA datasets tend to be high in quality due to human annotation , but small in size .",[],[],[],[],[],[]
model,"We introduce the Dynamic Coattention Network ( DCN ) , illustrated in , an end - to - end neural network for question answering .","[('introduce', (1, 2)), ('for', (21, 22))]","[('Dynamic Coattention Network ( DCN )', (3, 9)), ('end - to - end neural network', (14, 21)), ('question answering', (22, 24))]",[],[],[],[]
model,"The model consists of a coattentive encoder that captures the interactions between the question and the document , as well as a dynamic pointing decoder that alternates between estimating the start and end of the answer span .","[('consists of', (2, 4)), ('captures', (8, 9)), ('between', (11, 12)), ('alternates between', (26, 28)), ('start and end of', (30, 34))]","[('coattentive encoder', (5, 7)), ('interactions', (10, 11)), ('question and the document', (13, 17)), ('dynamic pointing decoder', (22, 25)), ('estimating', (28, 29)), ('answer span', (35, 37))]",[],[],[],[]
experimental-setup,"To preprocess the corpus , we use the tokenizer from Stanford CoreNLP .","[('preprocess', (1, 2)), ('use', (6, 7)), ('from', (9, 10))]","[('corpus', (3, 4)), ('tokenizer', (8, 9)), ('Stanford CoreNLP', (10, 12))]",[],[],[],[]
experimental-setup,We use as Glo Ve word vectors pretrained on the 840B Common Crawl corpus .,"[('use', (1, 2)), ('pretrained on', (7, 9))]","[('Glo Ve word vectors', (3, 7)), ('840B Common Crawl corpus', (10, 14))]",[],[],[],[]
experimental-setup,We limit the vocabulary to words that are present in the Common Crawl corpus and set embeddings for out - of - vocabulary words to zero .,"[('limit', (1, 2)), ('to', (4, 5)), ('present in', (8, 10)), ('set', (15, 16)), ('for', (17, 18)), ('to', (24, 25))]","[('vocabulary', (3, 4)), ('words', (5, 6)), ('Common Crawl corpus', (11, 14)), ('embeddings', (16, 17)), ('out - of - vocabulary words', (18, 24)), ('zero', (25, 26))]",[],[],[],[]
experimental-setup,"We use a max sequence length of 600 during training and a hidden state size of 200 for all recurrent units , maxout layers , and linear layers .","[('use', (1, 2)), ('of', (6, 7)), ('during', (8, 9)), ('of', (15, 16)), ('for', (17, 18))]","[('max sequence length', (3, 6)), ('600', (7, 8)), ('training', (9, 10)), ('hidden state size', (12, 15)), ('200', (16, 17)), ('maxout layers', (22, 24)), ('linear layers', (26, 28))]",[],[],[],[]
experimental-setup,All LSTMs have randomly initialized parameters and an initial state of zero .,"[('have', (2, 3)), ('of', (10, 11))]","[('randomly initialized parameters', (3, 6)), ('initial state', (8, 10)), ('zero', (11, 12))]",[],[],[],[]
experimental-setup,Sentinel vectors are randomly initialized and optimized during training .,"[('are', (2, 3)), ('during', (7, 8))]","[('Sentinel vectors', (0, 2)), ('randomly initialized and optimized', (3, 7)), ('training', (8, 9))]",[],[],[],[]
experimental-setup,"For the dynamic decoder , we set the maximum number of iterations to 4 and use a maxout pool size of 16 .","[('For', (0, 1)), ('set', (6, 7)), ('to', (12, 13)), ('use', (15, 16)), ('of', (20, 21))]","[('dynamic decoder', (2, 4)), ('maximum number of iterations', (8, 12)), ('4', (13, 14)), ('maxout pool size', (17, 20)), ('16', (21, 22))]",[],[],[],[]
experimental-setup,"We use dropout to regularize our network during training , and optimize the model using ADAM .","[('use', (1, 2)), ('to regularize', (3, 5)), ('during', (7, 8)), ('optimize', (11, 12)), ('using', (14, 15))]","[('dropout', (2, 3)), ('our network', (5, 7)), ('training', (8, 9)), ('model', (13, 14)), ('ADAM', (15, 16))]",[],[],[],[]
experimental-setup,All models are implemented and trained with Chainer .,"[('implemented and trained with', (3, 7))]","[('Chainer', (7, 8))]",[],[],[],[]
results,"The performance of the Dynamic Coattention Network on the SQuAD dataset , compared to other submitted models on the leaderboard 3 , is shown in The DCN has the capability to estimate the start and end points of the answer span multiple times , each time conditioned on its previous estimates .","[('of', (2, 3)), ('on', (7, 8)), ('compared to', (12, 14)), ('on', (17, 18)), ('to estimate', (30, 32)), ('of', (37, 38))]","[('performance', (1, 2)), ('Dynamic Coattention Network', (4, 7)), ('SQuAD dataset', (9, 11)), ('other submitted models', (14, 17)), ('DCN', (26, 27)), ('capability', (29, 30)), ('start and end points', (33, 37)), ('answer span', (39, 41)), ('multiple times', (41, 43))]",[],[],[],[]
ablation-analysis,"By doing so , the model is able to explore local maxima corresponding to multiple plausible answers , as is shown in .","[('able to explore', (7, 10)), ('corresponding to', (12, 14))]","[('model', (5, 6)), ('local maxima', (10, 12)), ('multiple plausible answers', (14, 17))]",[],[],[],[]
research-problem,FINDING REMO ( RELATED MEMORY OBJECT ) : A SIMPLE NEURAL ARCHITECTURE FOR TEXT BASED REASONING,[],"[('TEXT BASED REASONING', (13, 16))]",[],[],[],[]
research-problem,"To solve the text - based question and answering task that requires relational reasoning , it is necessary to memorize a large amount of information and find out the question relevant information from the memory .",[],"[('text - based question and answering', (3, 9))]",[],[],[],[]
code,* Code is publicly available at : https://github.com/juung/RMN,[],"[('https://github.com/juung/RMN', (7, 8))]",[],[],[],[]
model,"Our proposed model , "" Relation Memory Network "" ( RMN ) , is able to find complex relation even when a lot of information is given .","[('able to find', (14, 17))]","[('Relation Memory Network "" ( RMN )', (5, 12)), ('complex relation', (17, 19)), ('lot of information', (22, 25)), ('given', (26, 27))]",[],[],[],[]
model,It uses MLP to find out relevant information with a new generalization which simply erase the information already used .,"[('uses', (1, 2)), ('to find out', (3, 6)), ('with', (8, 9))]","[('MLP', (2, 3)), ('relevant information', (6, 8)), ('new generalization', (10, 12)), ('information', (16, 17))]",[],[],[],[]
model,"In other words , RMN inherits RN 's MLP - based output feature map on Memory Network architecture .","[('inherits', (5, 6)), ('on', (14, 15))]","[('RMN', (4, 5)), (""RN 's MLP - based output feature map"", (6, 14)), ('Memory Network architecture', (15, 18))]",[],[],[],[]
experiments,bAbI story - based QA dataset,[],"[('bAbI story - based QA dataset', (0, 6))]",[],[],[],[]
model,"Embedding component is similar to , where story and question are embedded through different LSTMs ; 32 unit word - lookup embeddings ; 32 unit LSTM for story and question .","[('where', (6, 7)), ('embedded through', (11, 13)), ('for', (26, 27))]","[('Embedding component', (0, 2)), ('story and question', (7, 10)), ('different LSTMs', (13, 15)), ('32 unit word - lookup embeddings', (16, 22)), ('32 unit LSTM', (23, 26)), ('story and question', (27, 30))]",[],[],[],[]
model,"For attention component , as we use 2 hop RMN , there are g 1 ?","[('For', (0, 1))]","[('attention component', (1, 3))]",[],[],[],[]
hyperparameters,"For regularization , we use batch normalization for all MLPs .","[('For', (0, 1)), ('use', (4, 5)), ('for', (7, 8))]","[('regularization', (1, 2)), ('batch normalization', (5, 7)), ('all MLPs', (8, 10))]",[],[],[],[]
hyperparameters,The softmax output was optimized with a cross - entropy loss function using the Adam optimizer with a learning rate of 2 e ?4 .,"[('optimized with', (4, 6)), ('using', (12, 13)), ('with', (16, 17)), ('of', (20, 21))]","[('softmax output', (1, 3)), ('cross - entropy loss function', (7, 12)), ('Adam optimizer', (14, 16)), ('learning rate', (18, 20)), ('2 e ?4', (21, 24))]",[],[],[],[]
experiments,bAbI dialog dataset,[],"[('bAbI dialog dataset', (0, 3))]",[],[],[],[]
model,"We trained on full dialog scripts with every model response as answer , all previous dialog history as sentences to be memorized , and the last user utterance as question .","[('trained on', (1, 3)), ('with', (6, 7)), ('as', (10, 11)), ('as', (17, 18)), ('as', (28, 29))]","[('full dialog scripts', (3, 6)), ('every model response', (7, 10)), ('answer', (11, 12)), ('all previous dialog history', (13, 17)), ('sentences', (18, 19)), ('to be memorized', (19, 22)), ('last user utterance', (25, 28)), ('question', (29, 30))]",[],[],[],[]
model,"Model selects the most probable response from 4,212 candidates which are ranked from a set of all bot utterances appearing in training , validation and test sets ( plain and OOV ) for all tasks combined .","[('selects', (1, 2)), ('from', (6, 7)), ('ranked from', (11, 13)), ('of', (15, 16)), ('appearing in', (19, 21)), ('for', (32, 33))]","[('most probable response', (3, 6)), ('4,212 candidates', (7, 9)), ('set', (14, 15)), ('all bot utterances', (16, 19)), ('training , validation and test sets ( plain and OOV )', (21, 32)), ('all tasks', (33, 35))]",[],[],[],[]
experiments,BABI DIALOG,[],"[('BABI DIALOG', (0, 2))]",[],[],[],[]
experiments,"Without any match type , RN and RMN outperform previous memory - augmented models on both normal and OOV tasks .","[('Without', (0, 1)), ('outperform', (8, 9)), ('on', (14, 15))]","[('RN and RMN', (5, 8)), ('previous memory - augmented models', (9, 14)), ('normal and OOV tasks', (16, 20))]",[],[],[],[]
model,"We converted RMN 's attention component to inner product based attention , and the results revealed the error rate increased to 11.3 % .","[('converted', (1, 2)), ('to', (6, 7)), ('revealed', (15, 16)), ('increased to', (19, 21))]","[(""RMN 's attention component"", (2, 6)), ('inner product based attention', (7, 11)), ('error rate', (17, 19)), ('11.3 %', (21, 23))]",[],[],[],[]
model,The number of unnecessary object pairs created by the RN not only increases the processing time but also decreases the accuracy .,"[('created by', (6, 8)), ('decreases', (18, 19))]","[('number of unnecessary object pairs', (1, 6)), ('RN', (9, 10)), ('processing time', (14, 16)), ('accuracy', (20, 21))]",[],[],[],[]
experiments,"With the match type feature , all models other than RMN have significantly improved their performance except for task 3 compared to the plain condition .","[('With', (0, 1)), ('other than', (8, 10)), ('significantly improved', (12, 14)), ('except for', (16, 18)), ('compared to', (20, 22))]","[('match type feature', (2, 5)), ('all models', (6, 8)), ('RMN', (10, 11)), ('performance', (15, 16)), ('task 3', (18, 20)), ('plain condition', (23, 25))]",[],[],[],[]
experiments,"Different from other tasks , RMN yields the same error rate 25.1 % with MemN2N and GMe m N2N on the task 3 .","[('yields', (6, 7)), ('with', (13, 14))]","[('RMN', (5, 6)), ('same error rate', (8, 11)), ('25.1 %', (11, 13)), ('MemN2N and GMe m N2N', (14, 19))]",[],[],[],[]
research-problem,Natural Language Comprehension with the EpiReader,[],"[('Natural Language Comprehension', (0, 3))]",[],[],[],[]
research-problem,"We present the EpiReader , a novel model for machine comprehension of text .",[],"[('EpiReader', (3, 4)), ('machine comprehension of text', (9, 13))]",[],[],[],[]
research-problem,"Machine comprehension of unstructured , real - world text is a major research goal for natural language processing .",[],"[('Machine comprehension of unstructured , real - world text', (0, 9))]",[],[],[],[]
research-problem,"Current tests of machine comprehension pose questions whose answers can be inferred from some supporting text , and evaluate a model 's response to the questions .",[],"[('machine comprehension', (3, 5))]",[],[],[],[]
model,"We propose a deep , end - to - end , neural comprehension model that we call the EpiReader .","[('propose', (1, 2)), ('call', (16, 17))]","[('deep , end - to - end , neural comprehension model', (3, 14)), ('EpiReader', (18, 19))]",[],[],[],[]
model,The EpiReader factors into two components .,"[('factors into', (2, 4))]","[('EpiReader', (1, 2)), ('two components', (4, 6))]",[],[],[],[]
model,The first component extracts a small set of potential answers based on a shallow comparison of the question with its supporting text ; we call this the Extractor .,"[('extracts', (3, 4)), ('based on', (10, 12)), ('of', (15, 16)), ('with', (18, 19))]","[('first component', (1, 3)), ('small set of potential answers', (5, 10)), ('shallow comparison', (13, 15)), ('question', (17, 18)), ('supporting text', (20, 22)), ('Extractor', (27, 28))]",[],[],[],[]
model,The second component reranks the proposed answers based on deeper semantic comparisons with the text ; we call this the Reasoner .,"[('reranks', (3, 4)), ('based on', (7, 9)), ('with', (12, 13)), ('call', (17, 18))]","[('second component', (1, 3)), ('proposed answers', (5, 7)), ('deeper semantic comparisons', (9, 12)), ('text', (14, 15)), ('Reasoner', (20, 21))]",[],[],[],[]
model,"The semantic comparisons implemented by the Reasoner are based on the concept of recognizing textual entailment ( RTE ) , also known as natural language inference .","[('implemented by', (3, 5)), ('based on', (8, 10))]","[('semantic comparisons', (1, 3)), ('Reasoner', (6, 7)), ('concept', (11, 12)), ('recognizing textual entailment ( RTE )', (13, 19))]",[],[],[],[]
model,"Thus , the Extractor serves the important function of filtering a large set of potential answers down to a small , tractable set of likely candidates for more thorough testing .","[('serves', (4, 5)), ('of', (8, 9)), ('filtering', (9, 10)), ('down to', (16, 18)), ('for', (26, 27))]","[('Extractor', (3, 4)), ('important function', (6, 8)), ('large set of potential answers', (11, 16)), ('small , tractable set of likely candidates', (19, 26)), ('more thorough testing', (27, 30))]",[],[],[],[]
model,"The Extractor follows the form of a pointer network , and uses a differentiable attention mechanism to indicate words in the text that potentially answer the question .","[('follows', (2, 3)), ('uses', (11, 12)), ('to indicate', (16, 18)), ('in', (19, 20)), ('potentially answer', (23, 25))]","[('Extractor', (1, 2)), ('pointer network', (7, 9)), ('differentiable attention mechanism', (13, 16)), ('words', (18, 19)), ('text', (21, 22)), ('question', (26, 27))]",[],[],[],[]
model,This approach was used ( on it s own ) for question answering with the Attention Sum Reader .,"[('for', (10, 11)), ('with', (13, 14))]","[('question answering', (11, 13)), ('Attention Sum Reader', (15, 18))]",[],[],[],[]
model,The Extractor outputs a small set of answer candidates along with their estimated probabilities of correctness .,"[('outputs', (2, 3)), ('small set of', (4, 7)), ('along with', (9, 11))]","[('Extractor', (1, 2)), ('answer candidates', (7, 9)), ('estimated probabilities of correctness', (12, 16))]",[],[],[],[]
model,"The Reasoner forms hypotheses by inserting the candidate answers into the question , then estimates the concordance of each hypothesis with each sentence in the supporting text .","[('forms', (2, 3)), ('by inserting', (4, 6)), ('into', (9, 10)), ('estimates', (14, 15)), ('of', (17, 18)), ('with', (20, 21)), ('in', (23, 24))]","[('Reasoner', (1, 2)), ('hypotheses', (3, 4)), ('candidate answers', (7, 9)), ('question', (11, 12)), ('concordance', (16, 17)), ('each hypothesis', (18, 20)), ('each sentence', (21, 23)), ('supporting text', (25, 27))]",[],[],[],[]
model,"We use these estimates as a measure of the evidence for a hypothesis , and aggregate evidence overall sentences .","[('use', (1, 2)), ('as', (4, 5)), ('of', (7, 8)), ('for', (10, 11)), ('aggregate', (15, 16)), ('evidence', (16, 17))]","[('estimates', (3, 4)), ('measure', (6, 7)), ('evidence', (9, 10)), ('hypothesis', (12, 13)), ('overall sentences', (17, 19))]",[],[],[],[]
model,"In the end , we combine the Reasoner 's evidence with the Extractor 's probability estimates to produce a final ranking of the answer candidates .","[('combine', (5, 6)), ('with', (10, 11)), ('to produce', (16, 18)), ('of', (21, 22))]","[(""Reasoner 's evidence"", (7, 10)), (""Extractor 's probability estimates"", (12, 16)), ('final ranking', (19, 21)), ('answer candidates', (23, 25))]",[],[],[],[]
experimental-setup,"To train our model we used stochastic gradient descent with the ADAM optimizer ( Kingma and Ba , 2014 ) , with an initial learning rate of 0.001 .","[('used', (5, 6)), ('with', (9, 10)), ('with', (21, 22)), ('of', (26, 27))]","[('our model', (2, 4)), ('stochastic gradient descent', (6, 9)), ('ADAM optimizer', (11, 13)), ('initial learning rate', (23, 26)), ('0.001', (27, 28))]",[],[],[],[]
experimental-setup,"The word embeddings were initialized randomly , drawing from the uniform distribution over .","[('drawing from', (7, 9))]","[('word embeddings', (1, 3)), ('initialized randomly', (4, 6)), ('initialized', (4, 5)), ('randomly', (5, 6)), ('uniform distribution', (10, 12))]",[],[],[],[]
experimental-setup,"We used batches of 32 examples , and early stopping with a patience of 2 epochs .","[('used', (1, 2)), ('of', (3, 4)), ('with', (10, 11)), ('of', (13, 14))]","[('batches', (2, 3)), ('32 examples', (4, 6)), ('early stopping', (8, 10)), ('patience', (12, 13)), ('2 epochs', (14, 16))]",[],[],[],[]
experimental-setup,Our model was implement in Theano using the Keras framework .,"[('implement in', (3, 5)), ('using', (6, 7))]","[('Theano', (5, 6)), ('Keras framework', (8, 10))]",[],[],[],[]
experimental-setup,"All our models used 2 - regularization at 0.001 , ? = 50 , and ? = 0.04 .","[('used', (3, 4)), ('at', (7, 8))]","[('2 - regularization', (4, 7)), ('0.001 , ? = 50 , and ? = 0.04', (8, 18))]",[],[],[],[]
results,The EpiReader achieves state - of - the - art performance across the board for both datasets .,"[('achieves', (2, 3)), ('across', (11, 12)), ('for', (14, 15))]","[('EpiReader', (1, 2)), ('state - of - the - art performance', (3, 11)), ('board', (13, 14)), ('both datasets', (15, 17))]",[],[],[],[]
results,"On CNN , we score 2.2 % higher on test than the best previous model of .","[('On', (0, 1)), ('score', (4, 5)), ('on', (8, 9)), ('than', (10, 11))]","[('CNN', (1, 2)), ('2.2 % higher', (5, 8)), ('test', (9, 10)), ('best previous model', (12, 15))]",[],[],[],[]
results,On CBT - CN our single model scores 4.0 % higher than the previous best of the AS Reader .,"[('On', (0, 1)), ('scores', (7, 8)), ('than', (11, 12))]","[('CBT - CN', (1, 4)), ('4.0 %', (8, 10)), ('previous best of the AS Reader', (13, 19))]",[],[],[],[]
results,The improvement on CBT - NE is more modest at 1.1 % .,"[('on', (2, 3)), ('is', (6, 7)), ('at', (9, 10))]","[('improvement', (1, 2)), ('CBT - NE', (3, 6)), ('more modest', (7, 9)), ('1.1 %', (10, 12))]",[],[],[],[]
results,"Looking more closely at our CBT - NE results , we found that the validation and test accuracies had relatively high variance even in late epochs of training .","[('found that', (11, 13)), ('had', (18, 19)), ('even in', (22, 24)), ('of', (26, 27))]","[('CBT - NE results', (5, 9)), ('validation and test accuracies', (14, 18)), ('relatively high variance', (19, 22)), ('late epochs', (24, 26)), ('training', (27, 28))]",[],[],[],[]
research-problem,End - To - End Memory Networks,[],"[('End - To - End Memory Networks', (0, 7))]",[],[],[],[]
research-problem,"In this work , we present a novel recurrent neural network ( RNN ) architecture where the recurrence reads from a possibly large external memory multiple times before outputting a symbol .","[('present', (5, 6)), ('where', (15, 16)), ('reads from', (18, 20)), ('before outputting', (27, 29))]","[('novel recurrent neural network ( RNN ) architecture', (7, 15)), ('recurrence', (17, 18)), ('possibly large external memory', (21, 25)), ('multiple times', (25, 27)), ('symbol', (30, 31))]",[],[],[],[]
model,Our model can be considered a continuous form of the Memory Network implemented in [ 23 ] .,"[('considered', (4, 5)), ('of', (8, 9))]","[('continuous form', (6, 8)), ('Memory Network', (10, 12))]",[],[],[],[]
research-problem,"The continuity of the model we present here means that it can be trained end - to - end from input - output pairs , and so is applicable to more tasks , i.e. tasks where such supervision is not available , such as in language modeling or realistically supervised question answering tasks .","[('trained', (13, 14)), ('from', (19, 20)), ('applicable to', (28, 30))]","[('continuity', (1, 2)), ('end - to - end', (14, 19)), ('input - output pairs', (20, 24)), ('more tasks', (30, 32))]",[],[],[],[]
model,"Our model can also be seen as a version of RNNsearch [ 2 ] with multiple computational steps ( which we term "" hops "" ) per output symbol .","[('seen as', (5, 7)), ('version of', (8, 10)), ('with', (14, 15)), ('per', (26, 27))]","[('RNNsearch', (10, 11)), ('multiple computational steps', (15, 18)), ('output symbol', (27, 29))]",[],[],[],[]
hyperparameters,"For each mini-batch update , the 2 norm of the whole gradient of all parameters is measured 5 and if larger than L = 50 , then it is scaled down to have norm L.","[('For', (0, 1)), ('of', (8, 9)), ('of', (12, 13)), ('if', (19, 20)), ('larger than', (20, 22)), ('to have', (31, 33))]","[('each mini-batch update', (1, 4)), ('2 norm', (6, 8)), ('whole gradient', (10, 12)), ('all parameters', (13, 15)), ('measured', (16, 17)), ('larger than L = 50', (20, 25)), ('scaled down', (29, 31)), ('norm L.', (33, 35))]",[],[],[],[]
hyperparameters,"We use the learning rate annealing schedule from , namely , if the validation cost has not decreased after one epoch , then the learning rate is scaled down by a factor 1.5 .","[('use', (1, 2)), ('if', (11, 12)), ('after', (18, 19)), ('scaled down by', (27, 30)), ('by', (29, 30))]","[('learning rate annealing schedule', (3, 7)), ('validation cost', (13, 15)), ('not decreased', (16, 18)), ('one epoch', (19, 21)), ('learning rate', (24, 26)), ('scaled down', (27, 29)), ('factor 1.5', (31, 33))]",[],[],[],[]
hyperparameters,"Weights are initialized using N ( 0 , 0.05 ) and batch size is set to 128 .","[('initialized using', (2, 4)), ('set to', (14, 16))]","[('Weights', (0, 1)), ('N ( 0 , 0.05 )', (4, 10)), ('batch size', (11, 13)), ('128', (16, 17))]",[],[],[],[]
hyperparameters,"On the Penn tree dataset , we repeat each training 10 times with different random initializations and pick the one with smallest validation cost .","[('On', (0, 1)), ('repeat', (7, 8)), ('with', (12, 13)), ('pick', (17, 18)), ('with', (20, 21))]","[('Penn tree dataset', (2, 5)), ('each training', (8, 10)), ('10 times', (10, 12)), ('different random initializations', (13, 16)), ('smallest validation cost', (21, 24))]",[],[],[],[]
baselines,"MemNN : The strongly supervised AM + NG + NL Memory Networks approach , proposed in .",[],"[('MemNN', (0, 1)), ('strongly supervised AM + NG + NL Memory Networks approach', (3, 13))]",[],[],[],[]
baselines,MemNN- WSH :,[],"[('MemNN- WSH', (0, 2))]",[],[],[],[]
baselines,A weakly supervised heuristic version of MemNN where the supporting sentence labels are not used in training .,"[('of', (5, 6)), ('where', (7, 8)), ('not used in', (13, 16))]","[('weakly supervised heuristic version', (1, 5)), ('MemNN', (6, 7)), ('supporting sentence labels', (9, 12)), ('training', (16, 17))]",[],[],[],[]
baselines,"LSTM : A standard LSTM model , trained using question / answer pairs only ( i.e. also weakly supervised ) .","[('trained using', (7, 9))]","[('LSTM', (0, 1)), ('standard LSTM model', (3, 6)), ('question / answer pairs only', (9, 14))]",[],[],[],[]
research-problem,Neural Natural Language Inference Models Enhanced with External Knowledge,[],"[('Neural Natural Language Inference', (0, 4))]",[],[],[],[]
research-problem,Modeling natural language inference is a very challenging task .,[],"[('Modeling natural language inference', (0, 4))]",[],[],[],[]
research-problem,"With the availability of large annotated data , it has recently become feasible to train complex models such as neural - network - based inference models , which have shown to achieve the state - of - the - art performance .",[],[],[],[],[],[]
research-problem,"Although there exist relatively large annotated data , can machines learn all knowledge needed to perform natural language inference ( NLI ) from these data ?",[],"[('natural language inference ( NLI )', (16, 22))]",[],[],[],[]
research-problem,"If not , how can neural - network - based NLI models benefit from external knowledge and how to build NLI models to leverage it ?","[('benefit from', (12, 14))]","[('neural - network - based NLI models', (5, 12)), ('external knowledge', (14, 16)), ('NLI models', (20, 22))]",[],[],[],[]
research-problem,"Natural language inference ( NLI ) , also known as recognizing textual entailment ( RTE ) , is an important NLP problem concerned with determining inferential relationship ( e.g. , entailment , contradiction , or neutral ) between a premise p and a hypothesis h.",[],"[('Natural language inference ( NLI )', (0, 6)), ('recognizing textual entailment ( RTE )', (10, 16))]",[],[],[],[]
model,"In this paper we enrich neural - network - based NLI models with external knowledge in coattention , local inference collection , and inference composition components .","[('enrich', (4, 5)), ('with', (12, 13)), ('in', (15, 16))]","[('neural - network - based NLI models', (5, 12)), ('external knowledge', (13, 15)), ('coattention', (16, 17)), ('local inference collection', (18, 21)), ('inference composition components', (23, 26))]",[],[],[],[]
experiments,We show the proposed model improves the state - of - the - art NLI models to achieve better performances on the SNLI and MultiNLI datasets .,"[('show', (1, 2)), ('improves', (5, 6)), ('to achieve', (16, 18)), ('on', (20, 21))]","[('proposed model', (3, 5)), ('state - of - the - art NLI models', (7, 16)), ('better performances', (18, 20)), ('SNLI and MultiNLI datasets', (22, 26))]",[],[],[],[]
experiments,"The advantage of using external knowledge is more significant when the size of training data is restricted , suggesting that if more knowledge can be obtained , it may bring more benefit .","[('of using', (2, 4)), ('is', (6, 7)), ('when', (9, 10)), ('is', (15, 16))]","[('advantage', (1, 2)), ('external knowledge', (4, 6)), ('more significant', (7, 9)), ('size of training data', (11, 15)), ('restricted', (16, 17))]",[],[],[],[]
hyperparameters,The main training details are as follows : the dimension of the hidden states of LSTMs and word embeddings are 300 .,"[('of', (10, 11)), ('of', (14, 15)), ('are', (19, 20))]","[('dimension', (9, 10)), ('hidden states', (12, 14)), ('LSTMs and word embeddings', (15, 19)), ('300', (20, 21))]",[],[],[],[]
hyperparameters,"The word embeddings are initialized by 300D GloVe 840B , and out - of - vocabulary words among them are initialized randomly .","[('initialized by', (4, 6)), ('among', (17, 18))]","[('word embeddings', (1, 3)), ('300D GloVe 840B', (6, 9)), ('out - of - vocabulary words', (11, 17)), ('initialized', (20, 21)), ('randomly', (21, 22))]",[],[],[],[]
hyperparameters,"Adam ( Kingma and Ba , 2014 ) is used for optimization with an initial learning rate of 0.0004 .","[('used for', (9, 11)), ('with', (12, 13)), ('of', (17, 18))]","[('Adam ( Kingma and Ba , 2014 )', (0, 8)), ('optimization', (11, 12)), ('initial learning rate', (14, 17)), ('0.0004', (18, 19))]",[],[],[],[]
hyperparameters,The mini - batch size is set to 32 .,"[('set to', (6, 8))]","[('mini - batch size', (1, 5)), ('32', (8, 9))]",[],[],[],[]
results,"The proposed model , namely Knowledge - based Inference Model ( KIM ) , which enriches ESIM with external knowledge , obtains an accuracy of 88.6 % , the best single - model performance reported on the SNLI dataset .","[('namely', (4, 5)), ('enriches', (15, 16)), ('with', (17, 18)), ('obtains', (21, 22)), ('of', (24, 25)), ('reported on', (34, 36))]","[('Knowledge - based Inference Model ( KIM )', (5, 13)), ('ESIM', (16, 17)), ('external knowledge', (18, 20)), ('accuracy', (23, 24)), ('88.6 %', (25, 27)), ('best single - model performance', (29, 34)), ('SNLI dataset', (37, 39))]",[],[],[],[]
results,The difference between ESIM and KIM is statistically significant under the one - tailed paired t- test at the 99 % significance level .,"[('between', (2, 3)), ('is', (6, 7)), ('under', (9, 10)), ('at', (17, 18))]","[('difference', (1, 2)), ('ESIM and KIM', (3, 6)), ('statistically significant', (7, 9)), ('one - tailed paired t- test', (11, 17)), ('99 % significance level', (19, 23))]",[],[],[],[]
results,shows the performance of models on the MultiNLI dataset .,"[('shows', (0, 1)), ('on', (5, 6))]","[('performance', (2, 3)), ('models', (4, 5)), ('MultiNLI dataset', (7, 9))]",[],[],[],[]
results,"The baseline ESIM achieves 76.8 % and 75.8 % on in - domain and cross - domain test set , respectively .","[('achieves', (3, 4)), ('on', (9, 10))]","[('baseline ESIM', (1, 3)), ('76.8 % and 75.8 %', (4, 9)), ('in - domain and cross - domain test set', (10, 19))]",[],[],[],[]
results,"If we extend the ESIM with external knowledge , we achieve significant gains to 77.2 % and 76.4 % respectively .","[('extend', (2, 3)), ('with', (5, 6)), ('achieve', (10, 11)), ('to', (13, 14))]","[('ESIM', (4, 5)), ('external knowledge', (6, 8)), ('significant gains', (11, 13)), ('77.2 % and 76.4 %', (14, 19))]",[],[],[],[]
research-problem,Text Understanding with the Attention Sum Reader Network,[],"[('Text Understanding', (0, 2))]",[],[],[],[]
research-problem,"Thanks to the size of these datasets , the associated text comprehension task is well suited for deep - learning techniques that currently seem to outperform all alternative approaches .","[('well suited for', (14, 17))]","[('deep - learning techniques', (17, 21))]",[],[],[],[]
model,Our model called the Attention Sum Reader ( AS Reader ) 4 is tailor - made to leverage the fact that the answer is a word from the context document .,"[('called', (2, 3)), ('tailor - made', (13, 16)), ('to leverage', (16, 18)), ('is', (23, 24)), ('from', (26, 27))]","[('Attention Sum Reader ( AS Reader )', (4, 11)), ('fact', (19, 20)), ('answer', (22, 23)), ('word', (25, 26)), ('context document', (28, 30))]",[],[],[],[]
model,We compute a vector embedding of the query .,"[('compute', (1, 2)), ('of', (5, 6))]","[('vector embedding', (3, 5)), ('query', (7, 8))]",[],[],[],[]
model,We compute a vector embedding of each individual word in the context of the whole document ( contextual embedding ) .,"[('compute', (1, 2)), ('of', (5, 6)), ('in', (9, 10))]","[('vector embedding', (3, 5)), ('each individual word', (6, 9)), ('whole document', (14, 16))]",[],[],[],[]
model,"Using a dot product between the question embedding and the contextual embedding of each occurrence of a candidate answer in the document , we select the most likely answer .","[('Using', (0, 1)), ('between', (4, 5)), ('of', (12, 13)), ('of', (15, 16)), ('in', (19, 20)), ('select', (24, 25))]","[('dot product', (2, 4)), ('question embedding and the contextual embedding', (6, 12)), ('each occurrence', (13, 15)), ('candidate answer', (17, 19)), ('document', (21, 22)), ('most likely answer', (26, 29))]",[],[],[],[]
hyperparameters,To train the model we used stochastic gradient descent with the ADAM update rule and learning rate of 0.001 or 0.0005 .,"[('used', (5, 6)), ('with', (9, 10)), ('of', (17, 18))]","[('model', (3, 4)), ('stochastic gradient descent', (6, 9)), ('ADAM update rule', (11, 14)), ('learning rate', (15, 17)), ('0.001 or 0.0005', (18, 21))]",[],[],[],[]
hyperparameters,Weights in the GRU networks were initialized by random orthogonal matrices and biases were initialized to zero .,"[('in', (1, 2)), ('initialized by', (6, 8)), ('initialized to', (14, 16))]","[('Weights', (0, 1)), ('GRU networks', (3, 5)), ('random orthogonal matrices', (8, 11)), ('biases', (12, 13)), ('zero', (16, 17))]",[],[],[],[]
hyperparameters,We also used a gradient clipping threshold of 10 and batches of size 32 .,"[('used', (2, 3)), ('of', (7, 8)), ('of size', (11, 13))]","[('gradient clipping threshold', (4, 7)), ('10', (8, 9)), ('batches', (10, 11)), ('32', (13, 14))]",[],[],[],[]
results,mance of our single model is a little bit worse than performance of simultaneously published models .,"[('of', (1, 2)), ('is', (5, 6)), ('than', (10, 11)), ('of', (12, 13))]","[('mance', (0, 1)), ('our single model', (2, 5)), ('little bit worse', (7, 10)), ('performance', (11, 12)), ('simultaneously published models', (13, 16))]",[],[],[],[]
results,"However , ensemble of our models outperforms these models even though they use pre-trained word embeddings .","[('outperforms', (6, 7))]","[('ensemble of our models', (2, 6))]",[],[],[],[]
results,On the CNN dataset our single model with best validation accuracy achieves a test accuracy of 69.5 % .,"[('On', (0, 1)), ('with', (7, 8)), ('achieves', (11, 12)), ('of', (15, 16))]","[('CNN dataset', (2, 4)), ('single model', (5, 7)), ('best validation accuracy', (8, 11)), ('test accuracy', (13, 15)), ('69.5 %', (16, 18))]",[],[],[],[]
results,The average performance of the top 20 % models according to validation accuracy is 69.9 % which is even 0.5 % better than the single best - validation model .,"[('of', (3, 4)), ('according to', (9, 11)), ('is', (13, 14)), ('than', (22, 23))]","[('average performance', (1, 3)), ('top 20 % models', (5, 9)), ('validation accuracy', (11, 13)), ('69.9 %', (14, 16)), ('single best - validation model', (24, 29))]",[],[],[],[]
results,Fusing multiple models then gives a significant further increase in accuracy on both CNN and Daily Mail datasets ..,"[('Fusing', (0, 1)), ('gives', (4, 5)), ('in', (9, 10)), ('on', (11, 12))]","[('multiple models', (1, 3)), ('significant further increase', (6, 9)), ('accuracy', (10, 11)), ('CNN and Daily Mail datasets', (13, 18))]",[],[],[],[]
results,"In named entity prediction our best single model with accuracy of 68.6 % performs 2 % absolute better than the MemNN with self supervision , the averaging ensemble performs 4 % absolute better than the best previous result .","[('In', (0, 1)), ('with', (8, 9)), ('of', (10, 11)), ('performs', (13, 14)), ('than', (18, 19)), ('with', (21, 22)), ('performs', (28, 29)), ('than', (33, 34))]","[('named entity prediction', (1, 4)), ('best single model', (5, 8)), ('accuracy', (9, 10)), ('68.6 %', (11, 13)), ('2 % absolute better', (14, 18)), ('MemNN', (20, 21)), ('self supervision', (22, 24)), ('averaging ensemble', (26, 28)), ('4 % absolute better', (29, 33)), ('best previous result', (35, 38))]",[],[],[],[]
results,In common noun prediction our single models is 0.4 % absolute better than Mem NN however the ensemble improves the performance to 69 % which is 6 % absolute better than MemNN .,"[('In', (0, 1)), ('is', (7, 8)), ('than', (12, 13)), ('improves', (18, 19)), ('to', (21, 22)), ('than', (30, 31))]","[('common noun prediction', (1, 4)), ('0.4 % absolute better', (8, 12)), ('Mem NN', (13, 15)), ('ensemble', (17, 18)), ('performance', (20, 21)), ('69 %', (22, 24)), ('MemNN', (31, 32))]",[],[],[],[]
research-problem,GLUE : A MULTI - TASK BENCHMARK AND ANALYSIS PLATFORM FOR NATURAL LANGUAGE UNDERSTAND - ING,[],"[('NATURAL LANGUAGE UNDERSTAND - ING', (11, 16))]",[],[],[],[]
research-problem,"For natural language understanding ( NLU ) technology to be maximally useful , it must be able to process language in away that is not exclusive to a single task , genre , or dataset .",[],"[('natural language understanding ( NLU )', (1, 7))]",[],[],[],[]
research-problem,"However , the low absolute performance of our best model indicates the need for improved general NLU systems .","[('of', (6, 7))]","[('low absolute performance', (3, 6))]",[],[],[],[]
research-problem,"To facilitate research in this direction , we present the General Language Understanding Evaluation ( GLUE ) benchmark : a collection of NLU tasks including question answering , sentiment analysis , and textual entailment , and an associated online platform for model evaluation , comparison , and analysis .",[],"[('General Language Understanding Evaluation ( GLUE )', (10, 17))]",[],[],[],[]
model,GLUE does not place any constraints on model architecture beyond the ability to process single - sentence and sentence - pair inputs and to make corresponding predictions .,"[('does not place', (1, 4)), ('on', (6, 7)), ('beyond', (9, 10)), ('to process', (12, 14)), ('to make', (23, 25))]","[('GLUE', (0, 1)), ('any constraints', (4, 6)), ('model architecture', (7, 9)), ('ability', (11, 12)), ('single - sentence and sentence - pair inputs', (14, 22)), ('corresponding predictions', (25, 27))]",[],[],[],[]
research-problem,"For some GLUE tasks , training data is plentiful , but for others it is limited or fails to match the genre of the test set .","[('is', (7, 8)), ('to match', (18, 20))]","[('GLUE tasks', (2, 4)), ('training data', (5, 7)), ('plentiful', (8, 9)), ('limited', (15, 16)), ('genre', (21, 22)), ('test set', (24, 26))]",[],[],[],[]
experiments,"Four of the datasets feature privately - held test data , which will be used to ensure that the benchmark is used fairly .","[('to ensure', (15, 17))]","[('feature', (4, 5)), ('privately - held test data', (5, 10)), ('benchmark', (19, 20))]",[],[],[],[]
code,Original code for the baselines is available at https://github.com/nyu-mll/GLUE-baselines and a newer version is available at https://github.com/jsalt18-sentence-repl/jiant.,[],"[('https://github.com/nyu-mll/GLUE-baselines', (8, 9)), ('https://github.com/jsalt18-sentence-repl/jiant.', (16, 17))]",[],[],[],[]
model,"Our simplest baseline architecture is based on sentence - to - vector encoders , and sets aside GLUE 's ability to evaluate models with more complex structures .","[('based on', (5, 7)), ('sets aside', (15, 17)), ('to evaluate', (20, 22)), ('with', (23, 24))]","[('simplest baseline architecture', (1, 4)), ('sentence - to - vector encoders', (7, 13)), ('GLUE', (17, 18)), ('models', (22, 23)), ('more complex structures', (24, 27))]",[],[],[],[]
experiments,We find that multi-task training yields better overall scores over single - task training amongst models using attention or ELMo .,"[('find', (1, 2)), ('yields', (5, 6)), ('over', (9, 10)), ('amongst', (14, 15)), ('using', (16, 17))]","[('multi-task training', (3, 5)), ('better overall scores', (6, 9)), ('single - task training', (10, 14)), ('models', (15, 16)), ('attention or ELMo', (17, 20))]",[],[],[],[]
experiments,"We see a consistent improvement in using ELMo embeddings in place of GloVe or CoVe embeddings , particularly for single - sentence tasks .","[('see', (1, 2)), ('in using', (5, 7)), ('in place of', (9, 12)), ('particularly for', (17, 19))]","[('consistent improvement', (3, 5)), ('ELMo embeddings', (7, 9)), ('GloVe or CoVe embeddings', (12, 16)), ('single - sentence tasks', (19, 23))]",[],[],[],[]
experiments,"Among the pre-trained sentence representation models , we observe fairly consistent gains moving from CBoW to Skip - Thought to Infersent and GenSen .","[('Among', (0, 1)), ('observe', (8, 9)), ('moving from', (12, 14)), ('to', (15, 16))]","[('pre-trained sentence representation models', (2, 6)), ('fairly consistent gains', (9, 12)), ('CBoW', (14, 15)), ('Skip - Thought', (16, 19)), ('Infersent and GenSen', (20, 23))]",[],[],[],[]
experiments,"Relative to the models trained directly on the GLUE tasks , InferSent is competitive and GenSen outperforms all but the two best .","[('Relative to', (0, 2)), ('trained directly on', (4, 7)), ('is', (12, 13))]","[('models', (3, 4)), ('GLUE tasks', (8, 10)), ('InferSent', (11, 12)), ('competitive', (13, 14)), ('GenSen', (15, 16)), ('outperforms', (16, 17)), ('all but the two best', (17, 22))]",[],[],[],[]
experiments,"Looking at results per task , we find that the sentence representation models substantially underperform on CoLA compared to the models directly trained on the task .","[('find that', (7, 9)), ('substantially underperform on', (13, 16)), ('compared to', (17, 19)), ('directly trained on', (21, 24))]","[('sentence representation models', (10, 13)), ('CoLA', (16, 17)), ('models', (20, 21)), ('task', (25, 26))]",[],[],[],[]
experiments,"On the other hand , for STS - B , models trained directly on the task lag significantly behind the performance of the best sentence representation model .","[('for', (5, 6)), ('trained directly on', (11, 14)), ('lag significantly behind', (16, 19)), ('significantly behind', (17, 19)), ('of', (21, 22))]","[('STS - B', (6, 9)), ('models', (10, 11)), ('task', (15, 16)), ('lag', (16, 17)), ('performance', (20, 21)), ('best sentence representation model', (23, 27))]",[],[],[],[]
experiments,"On WNLI , no model exceeds most - frequent - class guessing ( 65.1 % ) and we substitute the model predictions for the most -frequent baseline .","[('On', (0, 1)), ('exceeds', (5, 6)), ('substitute', (18, 19)), ('for', (22, 23))]","[('WNLI', (1, 2)), ('most - frequent - class guessing ( 65.1 % )', (6, 16)), ('model predictions', (20, 22)), ('most -frequent baseline', (24, 27))]",[],[],[],[]
experiments,"On RTE and in aggregate , even our best baselines leave room for improvement .","[('On', (0, 1)), ('leave room for', (10, 13))]","[('RTE', (1, 2)), ('improvement', (13, 14))]",[],[],[],[]
research-problem,Parameter Re-Initialization through Cyclical Batch Size Schedules,[],"[('Parameter Re-Initialization', (0, 2))]",[],[],[],[]
research-problem,Optimal parameter initialization remains a crucial problem for neural network training .,[],"[('Optimal parameter initialization', (0, 3))]",[],[],[],[]
model,Our work explores the idea of adapting the weight initialization to the optimization dynamics of the specific learning task at hand .,"[('explores', (2, 3)), ('to', (10, 11)), ('of', (14, 15))]","[('adapting', (6, 7)), ('weight initialization', (8, 10)), ('optimization dynamics', (12, 14)), ('specific learning task', (16, 19))]",[],[],[],[]
model,"From the Bayesian perspective , improved weight initialization can be viewed as starting with a better prior , which leads to a more accurate posterior and thus better generalization ability .","[('viewed as', (10, 12)), ('starting with', (12, 14)), ('leads to', (19, 21))]","[('improved weight initialization', (5, 8)), ('better prior', (15, 17)), ('more accurate posterior', (22, 25)), ('better generalization ability', (27, 30))]",[],[],[],[]
model,"For example , in the seminal works , an adaptive prior is implemented via Markov Chain Monte Carlo ( MCMC ) methods .","[('implemented via', (12, 14))]","[('adaptive prior', (9, 11)), ('Markov Chain Monte Carlo ( MCMC ) methods', (14, 22))]",[],[],[],[]
model,"Motivated by these ideas , we incorporate an "" adaptive initialization "" for neural network training ( see section 2 for details ) , where we use cyclical batch size schedules to control the noise ( or temperature ) of SGD .","[('incorporate', (6, 7)), ('for', (12, 13)), ('use', (26, 27)), ('to control', (31, 33)), ('of', (39, 40))]","[('neural network training', (13, 16)), ('cyclical batch size schedules', (27, 31)), ('noise ( or temperature )', (34, 39)), ('SGD', (40, 41))]",[],[],[],[]
model,"Here , we build upon this work by studying different cyclical annealing strategies for a wide range of problems .","[('studying', (8, 9)), ('for', (13, 14))]","[('different cyclical annealing strategies', (9, 13)), ('wide range of problems', (15, 19))]",[],[],[],[]
experiments,Language Results,[],"[('Language Results', (0, 2))]",[],[],[],[]
research-problem,Language modeling is a challenging problem due to the complex and long - range interactions between distant words .,[],"[('Language modeling', (0, 2))]",[],[],[],[]
results,"CBS schedules effectively help us avoid overfitting , and in addition snapshot ensembling enables even greater performance .","[('avoid', (5, 6)), ('enables', (13, 14))]","[('CBS schedules', (0, 2)), ('overfitting', (6, 7)), ('snapshot ensembling', (11, 13)), ('even greater performance', (14, 17))]",[],[],[],[]
results,"As we can see , the best performing CBS schedules result in significant improvements in perplexity ( up to 7.91 ) over the baseline schedules and also offer reductions in the number of SGD training iterations ( up to 33 % ) .","[('result in', (10, 12)), ('in', (14, 15)), ('over', (21, 22)), ('offer', (27, 28)), ('in', (29, 30)), ('up to', (37, 39))]","[('best performing CBS schedules', (6, 10)), ('significant improvements', (12, 14)), ('perplexity', (15, 16)), ('baseline schedules', (23, 25)), ('reductions', (28, 29)), ('number of SGD training iterations', (31, 36))]",[],[],[],[]
results,Notice that almost all CBS schedules outperform the baseline schedule .,"[('outperform', (6, 7))]","[('almost all CBS schedules', (2, 6)), ('baseline schedule', (8, 10))]",[],[],[],[]
results,"In our experiments , CBS schedules do not yield large performance improvements on models like E1 which exhibit smaller disparities between training and testing performance .","[('do not yield', (6, 9)), ('on', (12, 13)), ('exhibit', (17, 18)), ('between', (20, 21))]","[('CBS schedules', (4, 6)), ('large performance improvements', (9, 12)), ('models', (13, 14)), ('smaller disparities', (18, 20)), ('training and testing performance', (21, 25))]",[],[],[],[]
results,Image Classification Results,[],"[('Image Classification Results', (0, 3))]",[],[],[],[]
results,"As seen in , the training curves of CBS schedules also exhibit the aforementioned cyclical spikes both in training loss and testing accuracy .","[('of', (7, 8)), ('exhibit', (11, 12)), ('in', (17, 18))]","[('training curves', (5, 7)), ('CBS schedules', (8, 10)), ('aforementioned', (13, 14)), ('cyclical spikes', (14, 16)), ('training loss', (18, 20)), ('testing accuracy', (21, 23))]",[],[],[],[]
results,We observe that CBS achieves similar performance to the baseline .,"[('observe', (1, 2)), ('achieves', (4, 5)), ('to', (7, 8))]","[('CBS', (3, 4)), ('similar performance', (5, 7)), ('baseline', (9, 10))]",[],[],[],[]
results,"With CBS - 15 , we see 90.71 % training accuracy and 56. 44 % testing accuracy , which is a larger improvement than that offered by CBS on convolutional models on Cifar - 10 .","[('With', (0, 1)), ('see', (6, 7)), ('than', (23, 24)), ('on', (28, 29))]","[('CBS - 15', (1, 4)), ('90.71 % training accuracy', (7, 11)), ('56. 44 % testing accuracy', (12, 17)), ('larger improvement', (21, 23)), ('convolutional models', (29, 31))]",[],[],[],[]
results,Combining CBS - 15 on C2 with this strategy improves accuracy to 94.82 % .,"[('Combining', (0, 1)), ('on', (4, 5)), ('improves', (9, 10)), ('to', (11, 12))]","[('CBS - 15', (1, 4)), ('C2', (5, 6)), ('accuracy', (10, 11)), ('94.82 %', (12, 14))]",[],[],[],[]
results,Applying snapshot ensembling on C3 trained with CBS - 15 - 2 leads to improved accuracy of 93. 56 % as compared to 92.58 % .,"[('Applying', (0, 1)), ('on', (3, 4)), ('trained with', (5, 7)), ('leads to', (12, 14)), ('of', (16, 17)), ('compared to', (21, 23))]","[('snapshot ensembling', (1, 3)), ('C3', (4, 5)), ('CBS - 15 - 2', (7, 12)), ('improved accuracy', (14, 16)), ('93. 56 %', (17, 20)), ('92.58 %', (23, 25))]",[],[],[],[]
results,"After ensembling ResNet50 on Imagenet with snapshots from the last two cycles , the performance increases to 76.401 % from 75.336 % .","[('After', (0, 1)), ('ensembling', (1, 2)), ('on', (3, 4)), ('with', (5, 6)), ('from', (7, 8)), ('to', (16, 17)), ('from', (19, 20))]","[('ResNet50', (2, 3)), ('Imagenet', (4, 5)), ('snapshots', (6, 7)), ('last two cycles', (9, 12)), ('performance', (14, 15)), ('increases', (15, 16)), ('76.401 %', (17, 19)), ('75.336 %', (20, 22))]",[],[],[],[]
research-problem,Natural Language Inference by Tree - Based Convolution and Heuristic Matching,[],"[('Natural Language Inference', (0, 3))]",[],[],[],[]
research-problem,"In this paper , we propose the TBCNNpair model to recognize entailment and contradiction between two sentences .","[('propose', (5, 6)), ('to recognize', (9, 11)), ('between', (14, 15))]","[('TBCNNpair model', (7, 9)), ('entailment and contradiction', (11, 14)), ('two sentences', (15, 17))]",[],[],[],[]
research-problem,Recognizing entailment and contradiction between two sentences ( called a premise and a hypothesis ) is known as natural language inference ( NLI ) in .,[],"[('natural language inference ( NLI )', (18, 24))]",[],[],[],[]
research-problem,"Several examples are illustrated in NLI is in the core of natural language understanding and has wide applications in NLP , e.g. , question answering and automatic summarization .",[],"[('NLI', (5, 6))]",[],[],[],[]
model,"In this paper , we propose the TBCNN - pair neural model to recognize entailment and contradiction between two sentences .","[('propose', (5, 6)), ('to recognize', (12, 14)), ('between', (17, 18))]","[('TBCNN - pair neural model', (7, 12)), ('entailment and contradiction', (14, 17)), ('two sentences', (18, 20))]",[],[],[],[]
model,"We lever- age our newly proposed TBCNN model to capture structural information in sentences , which is important to NLI .","[('lever- age', (1, 3)), ('to capture', (8, 10)), ('in', (12, 13))]","[('newly proposed TBCNN model', (4, 8)), ('structural information', (10, 12)), ('sentences', (13, 14))]",[],[],[],[]
experiments,"As we can see , TBCNN is more robust than sequential convolution in terms of word order distortion , which maybe introduced by determinators , modifiers , etc .","[('is', (6, 7)), ('than', (9, 10)), ('in terms of', (12, 15))]","[('TBCNN', (5, 6)), ('more robust', (7, 9)), ('sequential convolution', (10, 12)), ('word order distortion', (15, 18))]",[],[],[],[]
model,"A pooling layer then aggregates information along the tree , serving as away of semantic compositonality .","[('along', (6, 7)), ('serving as', (10, 12)), ('of', (13, 14))]","[('pooling layer', (1, 3)), ('aggregates', (4, 5)), ('information', (5, 6)), ('tree', (8, 9)), ('away', (12, 13)), ('semantic compositonality', (14, 16))]",[],[],[],[]
model,"Finally , two sentences ' information is combined by several heuristic matching layers , including concatenation , element - wise product and difference ; they are effective in capturing relationships between two sentences , but remain low complexity .","[('combined by', (7, 9)), ('including', (14, 15))]","[(""two sentences ' information"", (2, 6)), ('several heuristic matching layers', (9, 13)), ('concatenation', (15, 16)), ('difference', (22, 23)), ('relationships', (29, 30))]",[],[],[],[]
hyperparameters,"All our neural layers , including embeddings , were set to 300 dimensions .","[('including', (5, 6)), ('set to', (9, 11))]","[('embeddings', (6, 7)), ('300 dimensions', (11, 13))]",[],[],[],[]
hyperparameters,Word embeddings were pretrained ourselves by word2vec on the English Wikipedia corpus and fined tuned during training as apart of model parameters .,"[('pretrained ourselves by', (3, 6)), ('on', (7, 8)), ('fined tuned during', (13, 16))]","[('Word embeddings', (0, 2)), ('word2vec', (6, 7)), ('English Wikipedia corpus', (9, 12)), ('training', (16, 17)), ('model parameters', (20, 22))]",[],[],[],[]
hyperparameters,We applied 2 penalty of 310 ? 4 ; dropout was chosen by validation with a granularity of 0.1 .,"[('applied', (1, 2)), ('of', (4, 5)), ('chosen by', (11, 13)), ('with', (14, 15)), ('of', (17, 18))]","[('2 penalty', (2, 4)), ('310 ? 4', (5, 8)), ('dropout', (9, 10)), ('validation', (13, 14)), ('granularity', (16, 17)), ('0.1', (18, 19))]",[],[],[],[]
hyperparameters,"Initial learning rate was set to 1 , and a power decay was applied .","[('set to', (4, 6)), ('applied', (13, 14))]","[('Initial learning rate', (0, 3)), ('1', (6, 7)), ('power decay', (10, 12))]",[],[],[],[]
hyperparameters,We used stochastic gradient descent with a batch size of 50 .,"[('used', (1, 2)), ('with', (5, 6)), ('of', (9, 10))]","[('stochastic gradient descent', (2, 5)), ('batch size', (7, 9)), ('50', (10, 11))]",[],[],[],[]
results,"As seen , the TBCNN sentence pair model , followed by simple concatenation alone , outperforms existing sentence encoding - based approaches ( without pretraining ) , including a feature - rich method using 6 groups of humanengineered features , long short term memory .","[('followed by', (9, 11)), ('outperforms', (15, 16)), ('including', (27, 28)), ('using', (33, 34))]","[('TBCNN sentence pair model', (4, 8)), ('simple concatenation', (11, 13)), ('existing sentence encoding - based approaches', (16, 22)), ('feature - rich method', (29, 33)), ('6 groups of humanengineered features', (34, 39)), ('long short term memory', (40, 44))]",[],[],[],[]
results,Model Variant,[],"[('Model Variant', (0, 2))]",[],[],[],[]
results,We first analyze each heuristic separately : using element - wise product alone is significantly worse than concatenation or element - wise difference ; the latter two are comparable to each other .,"[('using', (7, 8)), ('is', (13, 14)), ('than', (16, 17))]","[('element - wise product', (8, 12)), ('significantly worse', (14, 16)), ('concatenation', (17, 18)), ('element - wise difference', (19, 23))]",[],[],[],[]
results,"Combining different matching heuristics improves the result : the TBCNN - pair model with concatenation , element - wise product and difference yields the highest performance of 82.1 % .","[('Combining', (0, 1)), ('improves', (4, 5)), ('with', (13, 14)), ('yields', (22, 23)), ('of', (26, 27))]","[('different matching heuristics', (1, 4)), ('result', (6, 7)), ('TBCNN - pair model', (9, 13)), ('concatenation', (14, 15)), ('element - wise product and difference', (16, 22)), ('highest performance', (24, 26)), ('82.1 %', (27, 29))]",[],[],[],[]
results,Further applying element - wise product improves the accuracy by another 0.5 % .,"[('applying', (1, 2)), ('improves', (6, 7)), ('by', (9, 10))]","[('element - wise product', (2, 6)), ('accuracy', (8, 9)), ('another 0.5 %', (10, 13))]",[],[],[],[]
results,"The full TBCNN - pair model outperforms all existing sentence encoding - based approaches , in - cluding a 1024d gated recurrent unit ( GRU ) - based RNN with "" skip - thought "" pretraining .","[('outperforms', (6, 7)), ('in - cluding', (15, 18)), ('with', (29, 30))]","[('full TBCNN - pair model', (1, 6)), ('all existing sentence encoding - based approaches', (7, 14)), ('1024d gated recurrent unit ( GRU ) - based RNN', (19, 29))]",[],[],[],[]
research-problem,Stochastic Answer Networks for Natural Language Inference,[],"[('Natural Language Inference', (4, 7))]",[],[],[],[]
research-problem,"The natural language inference task , also known as recognizing textual entailment ( RTE ) , is to infer the relation between a pair of sentences ( e.g. , premise and hypothesis ) .",[],"[('natural language inference', (1, 4)), ('recognizing textual entailment ( RTE )', (9, 15))]",[],[],[],[]
research-problem,"Inspired by the recent success of multi-step inference on Machine Reading Comprehension ( MRC ) , we explore the multi-step inference strategies on NLI .",[],"[('Machine Reading Comprehension ( MRC )', (9, 15)), ('NLI', (23, 24))]",[],[],[],[]
model,"Rather than directly predicting the results given the inputs , the model maintains a state and iteratively refines its predictions .","[('maintains', (12, 13)), ('iteratively refines', (16, 18))]","[('model', (11, 12)), ('state', (14, 15)), ('predictions', (19, 20))]",[],[],[],[]
experimental-setup,The spaCy tool 2 is used to tokenize all the dataset and PyTorch is used to implement our models .,[],"[('spaCy tool', (1, 3)), ('tokenize', (7, 8)), ('all the dataset', (8, 11)), ('PyTorch', (12, 13)), ('our models', (17, 19))]",[],[],[],[]
experimental-setup,We fix word embedding with 300 - dimensional GloVe word vectors .,"[('fix', (1, 2)), ('with', (4, 5))]","[('word embedding', (2, 4)), ('300 - dimensional GloVe word vectors', (5, 11))]",[],[],[],[]
experimental-setup,"For the character encoding , we use a concatenation of the multi-filter Convolutional Neural Nets with windows 1 , 3 , 5 and the hidden size 50 , 100 , 150 .","[('For', (0, 1)), ('use', (6, 7)), ('of', (9, 10)), ('with', (15, 16))]","[('character encoding', (2, 4)), ('concatenation', (8, 9)), ('multi-filter Convolutional Neural Nets', (11, 15)), ('windows 1 , 3 , 5', (16, 22)), ('hidden size', (24, 26)), ('50 , 100 , 150', (26, 31))]",[],[],[],[]
experimental-setup,So lexicon embeddings are d =600 - dimensions .,"[('are', (3, 4))]","[('lexicon embeddings', (1, 3)), ('d =600 - dimensions', (4, 8))]",[],[],[],[]
experimental-setup,The embedding for the out - of - vocabulary is zeroed .,"[('for', (2, 3)), ('is', (9, 10))]","[('embedding', (1, 2)), ('out - of - vocabulary', (4, 9)), ('zeroed', (10, 11))]",[],[],[],[]
experimental-setup,"The hidden size of LSTM in the contextual encoding layer , memory generation layer is set to 128 , thus the input size of output layer is 1024 ( 128 * 2 * 4 ) as Eq 2 .","[('of', (3, 4)), ('in', (5, 6)), ('set to', (15, 17)), ('of', (23, 24)), ('is', (26, 27))]","[('hidden size', (1, 3)), ('LSTM', (4, 5)), ('contextual encoding layer', (7, 10)), ('memory generation layer', (11, 14)), ('128', (17, 18)), ('input size', (21, 23)), ('output layer', (24, 26)), ('1024 ( 128 * 2 * 4 )', (27, 35))]",[],[],[],[]
experimental-setup,The projection size in the attention layer is set to 256 .,"[('in', (3, 4)), ('set to', (8, 10))]","[('projection size', (1, 3)), ('attention layer', (5, 7)), ('256', (10, 11))]",[],[],[],[]
experimental-setup,"To speedup training , we use weight normalization .","[('To speedup', (0, 2)), ('use', (5, 6))]","[('training', (2, 3)), ('weight normalization', (6, 8))]",[],[],[],[]
experimental-setup,"The dropout rate is 0.2 , and the dropout mask is fixed through time steps in LSTM .","[('is', (3, 4)), ('fixed through', (11, 13)), ('in', (15, 16))]","[('dropout rate', (1, 3)), ('0.2', (4, 5)), ('dropout mask', (8, 10)), ('time steps', (13, 15)), ('LSTM', (16, 17))]",[],[],[],[]
experimental-setup,The mini - batch size is set to 32 .,"[('set to', (6, 8))]","[('mini - batch size', (1, 5)), ('32', (8, 9))]",[],[],[],[]
experimental-setup,Our optimizer is Adamax and its learning rate is initialized as 0.002 and decreased by 0.5 after each 10 epochs .,"[('is', (2, 3)), ('initialized as', (9, 11)), ('decreased by', (13, 15)), ('after', (16, 17))]","[('Adamax', (3, 4)), ('learning rate', (6, 8)), ('0.002', (11, 12)), ('0.5', (15, 16)), ('each 10 epochs', (17, 20))]",[],[],[],[]
results,shows that our multi-step model consistently outperforms the single - step model on the dev set of all four datasets in terms of accuracy .,"[('shows', (0, 1)), ('consistently outperforms', (5, 7)), ('on', (12, 13)), ('of', (16, 17)), ('in terms of', (20, 23))]","[('our multi-step model', (2, 5)), ('single - step model', (8, 12)), ('dev set', (14, 16)), ('all four datasets', (17, 20)), ('accuracy', (23, 24))]",[],[],[],[]
results,"For example , on SciTail dataset , SAN outperforms the single - step model by .","[('on', (3, 4)), ('outperforms', (8, 9))]","[('SciTail dataset', (4, 6)), ('SAN', (7, 8)), ('single - step model', (10, 14))]",[],[],[],[]
results,"On SciTail dataset , SAN even outperforms GPT .","[('On', (0, 1)), ('outperforms', (6, 7))]","[('SciTail dataset', (1, 3)), ('SAN', (4, 5)), ('GPT', (7, 8))]",[],[],[],[]
results,"Comparing with Single - step baseline , the proposed model obtains + 2.8 improvement on the Sc - iTail test set ( 94.0 vs 91.2 ) and + 2.1 improvement on the SciTail dev set ( 96.1 vs 93.9 ) .","[('Comparing with', (0, 2)), ('obtains', (10, 11)), ('on', (14, 15)), ('on', (30, 31))]","[('Single - step baseline', (2, 6)), ('proposed model', (8, 10)), ('+ 2.8 improvement', (11, 14)), ('94.0 vs 91.2 )', (22, 26)), ('+ 2.1 improvement', (27, 30)), ('96.1 vs 93.9 )', (36, 40))]",[],[],[],[]
results,"Our model outperforms the best system in RepEval 2017 inmost cases , except on "" Conditional "" and "" Tense Difference "" categories .","[('outperforms', (2, 3)), ('in', (6, 7)), ('except on', (12, 14))]","[('Our model', (0, 2)), ('best system', (4, 6)), ('RepEval 2017', (7, 9)), ('inmost cases', (9, 11)), ('Conditional "" and "" Tense Difference "" categories', (15, 23))]",[],[],[],[]
results,"We also find that SAN works extremely well on "" Active / Passive "" and "" Paraphrase "" categories .","[('find that', (2, 4)), ('works', (5, 6)), ('on', (8, 9))]","[('SAN', (4, 5)), ('extremely well', (6, 8)), ('Active / Passive "" and "" Paraphrase "" categories', (10, 19))]",[],[],[],[]
results,"Comparing with Chen 's model , the biggest improvement of SAN ( 50 % vs 77 % and 58 % vs 85 % on Matched and Mismatched settings respectively ) is on the "" Antonym "" category .","[('Comparing with', (0, 2)), ('of', (9, 10)), ('on', (23, 24)), ('on', (31, 32))]","[(""Chen 's model"", (2, 5)), ('biggest improvement', (7, 9)), ('SAN', (10, 11)), ('50 % vs 77 % and 58 % vs 85 %', (12, 23)), ('Matched and Mismatched settings', (24, 28)), ('"" Antonym "" category', (33, 37))]",[],[],[],[]
results,"In particular , on the most challenging "" Long Sentence "" and "" Quantity / Time "" categories , SAN 's result is substantially better than previous systems .","[('on', (3, 4)), ('is', (22, 23)), ('than', (25, 26))]","[('most challenging "" Long Sentence "" and "" Quantity / Time "" categories', (5, 18)), (""SAN 's result"", (19, 22)), ('substantially better', (23, 25)), ('previous systems', (26, 28))]",[],[],[],[]
research-problem,Neural Tree Indexers for Text Understanding,[],"[('Text Understanding', (4, 6))]",[],[],[],[]
model,"In this study , we introduce Neural Tree Indexers ( NTI ) , a class of tree structured models for NLP tasks .","[('introduce', (5, 6))]","[('Neural Tree Indexers ( NTI )', (6, 12))]",[],[],[],[]
model,NTI takes a sequence of tokens and produces its representation by constructing a full n-ary tree in a bottom - up fashion .,"[('takes', (1, 2)), ('produces', (7, 8)), ('by constructing', (10, 12)), ('in', (16, 17))]","[('NTI', (0, 1)), ('sequence of tokens', (3, 6)), ('representation', (9, 10)), ('full n-ary tree', (13, 16)), ('bottom - up fashion', (18, 22))]",[],[],[],[]
model,Each node in NTI is associated with one of the node transformation functions : leaf node mapping and non-leaf node composition functions .,"[('in', (2, 3)), ('associated with', (5, 7))]","[('Each node', (0, 2)), ('NTI', (3, 4)), ('node transformation functions', (10, 13)), ('leaf node mapping', (14, 17)), ('non-leaf node composition functions', (18, 22))]",[],[],[],[]
model,"Furthermore , we propose different variants of node composition function and attention over tree for our NTI models .","[('propose', (3, 4)), ('of', (6, 7)), ('for', (14, 15))]","[('different variants', (4, 6)), ('node composition function and attention over tree', (7, 14)), ('our NTI models', (15, 18))]",[],[],[],[]
model,"When a sequential leaf node transformer such as LSTM is chosen , the NTI network forms a sequence - tree hybrid model taking advantage of both conditional and compositional powers of sequential and recursive models . :","[('When', (0, 1)), ('such as', (6, 8)), ('forms', (15, 16)), ('taking advantage of', (22, 25)), ('of', (30, 31))]","[('sequential leaf node transformer', (2, 6)), ('LSTM', (8, 9)), ('chosen', (10, 11)), ('NTI network', (13, 15)), ('sequence - tree hybrid model', (17, 22)), ('conditional and compositional powers', (26, 30)), ('sequential and recursive models', (31, 35))]",[],[],[],[]
experiments,Natural Language Inference,[],"[('Natural Language Inference', (0, 3))]",[],[],[],[]
experiments,Our best score on this task is 87.3 % accuracy obtained with the full tree matching NTI model .,"[('is', (6, 7)), ('obtained with', (10, 12))]","[('best score', (1, 3)), ('87.3 % accuracy', (7, 10)), ('full tree matching NTI model', (13, 18))]",[],[],[],[]
experiments,Our results show that NTI - SLSTM improved the performance of the sequential LSTM encoder by approximately 2 % .,"[('show', (2, 3)), ('improved', (7, 8)), ('of', (10, 11)), ('by', (15, 16))]","[('NTI - SLSTM', (4, 7)), ('performance', (9, 10)), ('sequential LSTM encoder', (12, 15))]",[],[],[],[]
experiments,"The node - by - node attention models improve the performance , indicating that modeling inter-sentence interaction is an important element in NLI .","[('improve', (8, 9))]","[('node - by - node attention models', (1, 8)), ('performance', (10, 11))]",[],[],[],[]
experiments,Answer Sentence Selection,[],"[('Answer Sentence Selection', (0, 3))]",[],[],[],[]
experiments,"The Deep LSTM and LSTM attention models outperform the previous best result by a large margin , nearly 5 - 6 % .","[('outperform', (7, 8)), ('by', (12, 13))]","[('Deep LSTM and LSTM attention models', (1, 7)), ('previous best result', (9, 12)), ('large margin', (14, 16)), ('nearly 5 - 6 %', (17, 22))]",[],[],[],[]
experiments,NASM improves the result further and sets a strong baseline by combining variational autoencoder with the soft attention .,"[('improves', (1, 2)), ('sets', (6, 7)), ('by combining', (10, 12)), ('with', (14, 15))]","[('NASM', (0, 1)), ('result', (3, 4)), ('strong baseline', (8, 10)), ('variational autoencoder', (12, 14)), ('soft attention', (16, 18))]",[],[],[],[]
experiments,Our NTI model exceeds NASM by approximately 0.4 % on MAP for this task .,"[('exceeds', (3, 4)), ('by', (5, 6)), ('on', (9, 10))]","[('NTI model', (1, 3)), ('NASM', (4, 5)), ('approximately 0.4 %', (6, 9)), ('MAP', (10, 11))]",[],[],[],[]
results,Sentence Classification,[],"[('Sentence Classification', (0, 2))]",[],[],[],[]
experiments,Our NTI - SLSTM model performed slightly worse A dog mouth holds a retrieved ball .,"[('performed', (5, 6)), ('holds', (11, 12))]","[('NTI - SLSTM model', (1, 5)), ('slightly worse', (6, 8)), ('retrieved ball', (13, 15))]",[],[],[],[]
experiments,"After we transformed the input with the LSTM leaf node function , we achieved the best performance on this task .","[('transformed', (2, 3)), ('with', (5, 6)), ('achieved', (13, 14))]","[('input', (4, 5)), ('LSTM leaf node function', (7, 11)), ('best performance', (15, 17))]",[],[],[],[]
research-problem,Attention - over - Attention Neural Networks for Reading Comprehension,[],"[('Reading Comprehension', (8, 10))]",[],[],[],[]
research-problem,Cloze - style reading comprehension is a representative problem in mining relationship between document and query .,[],[],[],[],[],[]
research-problem,"To read and comprehend the human languages are challenging tasks for the machines , which requires that the understanding of natural languages and the ability to do reasoning over various clues .",[],[],[],[],[],[]
model,"In this paper , we present a novel neural network architecture , called attention - over - attention model .","[('present', (5, 6)), ('called', (12, 13))]","[('novel neural network architecture', (7, 11)), ('attention - over - attention model', (13, 19))]",[],[],[],[]
model,"As we can understand the meaning literally , our model aims to place another attention mechanism over the existing document - level attention .","[('aims to place', (10, 13)), ('over', (16, 17))]","[('another attention mechanism', (13, 16)), ('existing document - level attention', (18, 23))]",[],[],[],[]
model,"Unlike the previous works , that are using heuristic merging functions , or setting various pre-defined non-trainable terms , our model could automatically generate an "" attended attention "" over various document - level attentions , and make a mutual look not only from query - to - document but also document - to - query , which will benefit from the interactive information .","[('automatically generate', (22, 24)), ('over', (29, 30)), ('make', (37, 38)), ('not only from', (41, 44))]","[('"" attended attention ""', (25, 29)), ('various document - level attentions', (30, 35)), ('mutual look', (39, 41)), ('query - to - document', (44, 49)), ('document - to - query', (51, 56))]",[],[],[],[]
baselines,Embedding Layer :,[],"[('Embedding Layer', (0, 2))]",[],[],[],[]
experimental-setup,"The embedding weights are randomly initialized with the uniformed distribution in the interval [ ? 0.05 , 0.05 ].","[('with', (6, 7)), ('in', (10, 11))]","[('embedding weights', (1, 3)), ('randomly initialized', (4, 6)), ('uniformed distribution', (8, 10)), ('interval [ ? 0.05 , 0.05 ].', (12, 19))]",[],[],[],[]
experimental-setup,Hidden Layer : Internal weights of GRUs are initialized with random orthogonal matrices .,"[('of', (5, 6)), ('initialized with', (8, 10))]","[('Hidden Layer', (0, 2)), ('Internal weights', (3, 5)), ('GRUs', (6, 7)), ('random orthogonal matrices', (10, 13))]",[],[],[],[]
experimental-setup,"We adopted ADAM optimizer for weight updating , with an initial learning rate of 0.001 .","[('adopted', (1, 2)), ('for', (4, 5)), ('with', (8, 9)), ('of', (13, 14))]","[('ADAM optimizer', (2, 4)), ('weight updating', (5, 7)), ('initial learning rate', (10, 13)), ('0.001', (14, 15))]",[],[],[],[]
experimental-setup,"As the GRU units still suffer from the gradient exploding issues , we set the gradient clipping threshold to 5 .","[('set', (13, 14)), ('to', (18, 19))]","[('gradient clipping threshold', (15, 18)), ('5', (19, 20))]",[],[],[],[]
experimental-setup,We used batched training strategy of 32 samples .,"[('used', (1, 2)), ('of', (5, 6))]","[('batched training strategy', (2, 5)), ('32 samples', (6, 8))]",[],[],[],[]
experimental-setup,"In re-ranking step , we generate 5 - best list from the baseline neural network model , as we did not observe a significant variance when changing the N - best list size .","[('In', (0, 1)), ('generate', (5, 6)), ('from', (10, 11))]","[('re-ranking step', (1, 3)), ('5 - best list', (6, 10)), ('baseline neural network model', (12, 16))]",[],[],[],[]
experimental-setup,"All language model features are trained on the training proportion of each dataset , with 8 - gram wordbased setting and Kneser - Ney smoothing trained by SRILM toolkit .","[('trained on', (5, 7)), ('of', (10, 11)), ('with', (14, 15)), ('trained by', (25, 27))]","[('language model features', (1, 4)), ('training proportion', (8, 10)), ('each dataset', (11, 13)), ('8 - gram wordbased setting', (15, 20)), ('Kneser - Ney smoothing', (21, 25)), ('SRILM toolkit', (27, 29))]",[],[],[],[]
experimental-setup,"Implementation is done with Theano ( Theano Development Team , 2016 ) and Keras , and all models are trained on Tesla K40 GPU . :","[('done with', (2, 4)), ('trained on', (19, 21))]","[('Implementation', (0, 1)), ('Keras', (13, 14)), ('Tesla K40 GPU', (21, 24))]",[],[],[],[]
results,"As we can see that , our AoA Reader outperforms state - of - the - art systems by a large margin , where 2.3 % and 2.0 % absolute improvements over EpiReader in CBTest NE and CN test sets , which demonstrate the effectiveness of our model .","[('outperforms', (9, 10)), ('by', (18, 19)), ('where', (23, 24)), ('over', (31, 32)), ('in', (33, 34))]","[('our AoA Reader', (6, 9)), ('state - of - the - art systems', (10, 18)), ('large margin', (20, 22)), ('2.3 % and 2.0 % absolute improvements', (24, 31)), ('EpiReader', (32, 33)), ('CBTest NE and CN test sets', (34, 40))]",[],[],[],[]
results,"Also by adding additional features in the re-ranking step , there is another significant boost 2.0 % to 3.7 % over Ao A Reader in CBTest NE / CN test sets .","[('adding', (2, 3)), ('in', (5, 6)), ('over', (20, 21)), ('in', (24, 25))]","[('additional features', (3, 5)), ('re-ranking step', (7, 9)), ('another significant boost', (12, 15)), ('2.0 % to 3.7 %', (15, 20)), ('Ao A Reader', (21, 24)), ('CBTest NE / CN test sets', (25, 31))]",[],[],[],[]
results,"We have also found that our single model could stay on par with the previous best ensemble system , and even we have an absolute improvement of 0.9 % beyond the best ensemble model ( Iterative Attention ) in the CBTest NE validation set .","[('found that', (3, 5)), ('on par with', (10, 13)), ('of', (26, 27)), ('beyond', (29, 30)), ('in', (38, 39))]","[('our single model', (5, 8)), ('previous best ensemble system', (14, 18)), ('absolute improvement', (24, 26)), ('0.9 %', (27, 29)), ('best ensemble model ( Iterative Attention )', (31, 38)), ('CBTest NE validation set', (40, 44))]",[],[],[],[]
results,"When it comes to ensemble model , our AoA Reader also shows significant improvements over previous best ensemble models by a large margin and setup a new state - of - the - art system .","[('shows', (11, 12)), ('over', (14, 15)), ('by', (19, 20)), ('setup', (24, 25))]","[('ensemble model', (4, 6)), ('our AoA Reader', (7, 10)), ('significant improvements', (12, 14)), ('previous best ensemble models', (15, 19)), ('large margin', (21, 23)), ('new state - of - the - art system', (26, 35))]",[],[],[],[]
results,"Instead of using pre-defined merging heuristics , and letting the model explicitly learn the weights between individual attentions results in a significant boost in the performance , where 4.1 % and 3.7 % improvements can be made in CNN validation and test set against CAS Reader .","[('letting', (8, 9)), ('explicitly learn', (11, 13)), ('between', (15, 16)), ('results in', (18, 20)), ('in', (23, 24)), ('where', (27, 28)), ('in', (37, 38)), ('against', (43, 44))]","[('pre-defined merging heuristics', (3, 6)), ('model', (10, 11)), ('weights', (14, 15)), ('individual attentions', (16, 18)), ('significant boost', (21, 23)), ('performance', (25, 26)), ('4.1 % and 3.7 % improvements', (28, 34)), ('CNN validation and test set', (38, 43)), ('CAS Reader', (44, 46))]",[],[],[],[]
results,"From the results in , we found that the NE and CN category both benefit a lot from the re-ranking features , but the proportions are quite different .","[('found that', (6, 8)), ('from', (17, 18))]","[('NE and CN category', (9, 13)), ('benefit a lot', (14, 17)), ('re-ranking features', (19, 21))]",[],[],[],[]
results,"Generally speaking , in NE category , the performance is mainly boosted by the LM local feature .","[('in', (3, 4)), ('boosted by', (11, 13))]","[('NE category', (4, 6)), ('performance', (8, 9)), ('LM local feature', (14, 17))]",[],[],[],[]
research-problem,Multi- task Sentence Encoding Model for Semantic Retrieval in Question Answering Systems,[],"[('Semantic Retrieval', (6, 8)), ('Question Answering', (9, 11))]",[],[],[],[]
research-problem,Question Answering ( QA ) systems are used to provide proper responses to users ' questions automatically .,[],"[('Question Answering ( QA )', (0, 5))]",[],[],[],[]
research-problem,Sentence matching is an essential task in the QA systems and is usually reformulated as a Paraphrase Identification ( PI ) problem .,[],"[('Sentence matching', (0, 2)), ('QA', (8, 9)), ('Paraphrase Identification ( PI )', (16, 21))]",[],[],[],[]
model,"We employ a connected graph to depict the paraphrase relation between sentences for the PI task , and propose a multi-task sentence - encoding model , which solves the paraphrase identification task and the sentence intent classification task simultaneously .","[('employ', (1, 2)), ('to depict', (5, 7)), ('between', (10, 11)), ('for', (12, 13)), ('propose', (18, 19)), ('solves', (27, 28))]","[('connected graph', (3, 5)), ('paraphrase relation', (8, 10)), ('sentences', (11, 12)), ('PI task', (14, 16)), ('multi-task sentence - encoding model', (20, 25)), ('paraphrase identification task', (29, 32)), ('sentence intent classification task', (34, 38))]",[],[],[],[]
model,"We propose a semantic retrieval framework that integrates the encoding - based sentence matching model with the approximate nearest neighbor search technology , which allows us to find the most similar question very quickly from all available questions , instead of within only a few candidates , in the QA knowledge base .","[('propose', (1, 2)), ('integrates', (7, 8)), ('with', (15, 16)), ('allows', (24, 25)), ('from', (34, 35)), ('in', (47, 48))]","[('semantic retrieval framework', (3, 6)), ('encoding - based sentence matching model', (9, 15)), ('approximate nearest neighbor search technology', (17, 22)), ('most similar question', (29, 32)), ('very quickly', (32, 34)), ('all available questions', (35, 38)), ('QA knowledge base', (49, 52))]",[],[],[],[]
hyperparameters,"For Quora dataset , we use the Glove - 840B - 300D vector as the pre-trained word embedding .","[('For', (0, 1)), ('use', (5, 6)), ('as', (13, 14))]","[('Quora dataset', (1, 3)), ('Glove - 840B - 300D vector', (7, 13)), ('pre-trained word embedding', (15, 18))]",[],[],[],[]
hyperparameters,The character embedding is randomly initialized with 150 D and the hidden size of BiGRU is set to 300 .,"[('randomly initialized with', (4, 7)), ('with', (6, 7)), ('of', (13, 14)), ('set to', (16, 18))]","[('character embedding', (1, 3)), ('randomly initialized', (4, 6)), ('150 D', (7, 9)), ('hidden size', (11, 13)), ('BiGRU', (14, 15)), ('300', (18, 19))]",[],[],[],[]
hyperparameters,We set = 0.8 in the multi - task loss function .,"[('set', (1, 2)), ('in', (4, 5))]","[('= 0.8', (2, 4)), ('multi - task loss function', (6, 11))]",[],[],[],[]
hyperparameters,"Dropout layer is also applied to the output of the attentive pooling layer , with a dropout rate of 0.1 .","[('applied to', (4, 6)), ('of', (8, 9)), ('with', (14, 15)), ('of', (18, 19))]","[('Dropout layer', (0, 2)), ('output', (7, 8)), ('attentive pooling layer', (10, 13)), ('dropout rate', (16, 18)), ('0.1', (19, 20))]",[],[],[],[]
hyperparameters,An Adam optimizer is used to optimize all the trainable weights .,[],"[('Adam optimizer', (1, 3)), ('all the trainable weights', (7, 11))]",[],[],[],[]
hyperparameters,The learning rate is set to 4e - 4 and the batch size is set to 200 .,"[('set to', (4, 6)), ('set to', (14, 16))]","[('learning rate', (1, 3)), ('4e - 4', (6, 9)), ('batch size', (11, 13)), ('200', (16, 17))]",[],[],[],[]
hyperparameters,"When the performance of the model is no longer improved , an SGD optimizer with a learning rate of 1e - 3 is used to find a better local optimum .","[('When', (0, 1)), ('of', (3, 4)), ('is', (6, 7)), ('with', (14, 15)), ('of', (18, 19)), ('to find', (24, 26))]","[('performance', (2, 3)), ('model', (5, 6)), ('no longer improved', (7, 10)), ('SGD optimizer', (12, 14)), ('learning rate', (16, 18)), ('1e - 3', (19, 22)), ('better local optimum', (27, 30))]",[],[],[],[]
baselines,ESIM : Enhanced Sequential Inference Model is an interaction - based model for natural language inference .,"[('is', (6, 7)), ('for', (12, 13))]","[('ESIM', (0, 1)), ('Enhanced Sequential Inference Model', (2, 6)), ('interaction - based model', (8, 12)), ('natural language inference', (13, 16))]",[],[],[],[]
baselines,BiMPM : Bilateral Multi- Perspective Matching model is an interaction - based sentence matching model with superior performance .,"[('is', (7, 8)), ('with', (15, 16))]","[('BiMPM', (0, 1)), ('Bilateral Multi- Perspective Matching model', (2, 7)), ('interaction - based sentence matching model', (9, 15)), ('superior performance', (16, 18))]",[],[],[],[]
baselines,"SSE : Shortcut - Stacked Sentence Encoder is an encodingbased sentence - matching model , which enhances multi - layer BiLSTM with short - cut connections .","[('is', (7, 8)), ('enhances', (16, 17)), ('with', (21, 22))]","[('SSE', (0, 1)), ('Shortcut - Stacked Sentence Encoder', (2, 7)), ('encodingbased sentence - matching model', (9, 14)), ('multi - layer BiLSTM', (17, 21)), ('short - cut connections', (22, 26))]",[],[],[],[]
baselines,DIIN : Densely Interactive Inference Network is an interaction - based model for natural language inference ( NLI ) .,"[('for', (12, 13))]","[('DIIN', (0, 1)), ('Densely Interactive Inference Network', (2, 6)), ('natural language inference ( NLI )', (13, 19))]",[],[],[],[]
results,"Quora dataset : BiMPM and ESIM models without any sentence interaction information , and is very close to DIIN , the state - of - the - art interaction - based model , but we do n't any external knowledge in our method .","[('without', (7, 8)), ('very close to', (15, 18))]","[('Quora dataset', (0, 2)), ('BiMPM and ESIM models', (3, 7)), ('any sentence interaction information', (8, 12)), ('DIIN', (18, 19)), ('state - of - the - art interaction - based model', (21, 32))]",[],[],[],[]
results,LCQMC dataset : Experimental results of LCQMC dataset compared with the existing models are shown in .,"[('of', (5, 6))]","[('LCQMC dataset', (0, 2)), ('LCQMC dataset', (6, 8))]",[],[],[],[]
results,The experimental results show that our model outperforms state - of the - art models .,"[('show', (3, 4))]","[('our model', (5, 7)), ('outperforms', (7, 8)), ('state - of the - art models', (8, 15))]",[],[],[],[]
results,BQ dataset : BQ dataset is a specific - domain dataset with a low average overlap rate .,"[('is', (5, 6)), ('with', (11, 12))]","[('BQ dataset', (0, 2)), ('specific - domain dataset', (7, 11)), ('low average overlap rate', (13, 17))]",[],[],[],[]
results,"As shown in , our model outperforms state - of - the - art models by a large margin , reaching 83 . 62 % , recording the state - of - the - art performance .","[('by', (15, 16)), ('reaching', (20, 21)), ('recording', (26, 27))]","[('our model', (4, 6)), ('outperforms', (6, 7)), ('state - of - the - art models', (7, 15)), ('large margin', (17, 19)), ('83 . 62 %', (21, 25))]",[],[],[],[]
results,TCS dataset :,[],"[('TCS dataset', (0, 2))]",[],[],[],[]
results,As shown in show that our MSEM model achieves the best performance .,"[('achieves', (8, 9))]","[('best performance', (10, 12))]",[],[],[],[]
ablation-analysis,We first study the contribution of the ARU component .,"[('study', (2, 3)), ('of', (5, 6))]","[('contribution', (4, 5)), ('ARU component', (7, 9))]",[],[],[],[]
ablation-analysis,"The accuracy decreases , the accuracy will drop to 88.25 % .","[('to', (8, 9))]","[('accuracy', (1, 2)), ('decreases', (2, 3)), ('accuracy', (5, 6)), ('drop', (7, 8)), ('88.25 %', (9, 11))]",[],[],[],[]
ablation-analysis,It turns out that the attentive pooling is better than max pooling .,"[('turns out that', (1, 4)), ('is', (7, 8)), ('better than', (8, 10))]","[('attentive pooling', (5, 7)), ('max pooling', (10, 12))]",[],[],[],[]
ablation-analysis,"Then if we remove the highway network , the accuracy will drop to 88.36 % .","[('remove', (3, 4)), ('to', (12, 13))]","[('highway network', (5, 7)), ('accuracy', (9, 10)), ('drop', (11, 12)), ('88.36 %', (13, 15))]",[],[],[],[]
ablation-analysis,"Finally when we remove the character - level embedding , the accuracy will drop to 88.26 % .","[('remove', (3, 4)), ('to', (14, 15))]","[('character - level embedding', (5, 9)), ('accuracy', (11, 12)), ('drop', (13, 14)), ('88.26 %', (15, 17))]",[],[],[],[]
research-problem,Deep Fusion LSTMs for Text Semantic Matching,[],"[('Text Semantic Matching', (4, 7))]",[],[],[],[]
research-problem,"Among many natural language processing ( NLP ) tasks , such as text classification , question answering and machine translation , a common problem is modelling the relevance / similarity of a pair of texts , which is also called text semantic matching .",[],[],[],[],[],[]
model,"In this paper , we adopt a deep fusion strategy to model the strong interactions of two sentences .","[('adopt', (5, 6)), ('to model', (10, 12)), ('of', (15, 16))]","[('deep fusion strategy', (7, 10)), ('strong interactions', (13, 15)), ('two sentences', (16, 18))]",[],[],[],[]
research-problem,"Thus , text matching can be regarded as modelling the interaction of two texts in a recursive matching way .","[('in', (14, 15))]","[('text matching', (2, 4)), ('modelling', (8, 9)), ('interaction', (10, 11)), ('recursive matching way', (16, 19))]",[],[],[],[]
model,"Following this idea , we propose deep fusion long short - term memory neural networks ( DF - LSTMs ) to model the interactions recursively .","[('propose', (5, 6)), ('to model', (20, 22))]","[('deep fusion long short - term memory neural networks ( DF - LSTMs )', (6, 20)), ('interactions', (23, 24)), ('recursively', (24, 25))]",[],[],[],[]
model,"More concretely , DF - LSTMs consist of two interconnected conditional LSTMs , each of which models apiece of text under the influence of another .","[('consist of', (6, 8)), ('under', (20, 21))]","[('DF - LSTMs', (3, 6)), ('two interconnected conditional LSTMs', (8, 12)), ('models', (16, 17)), ('text', (19, 20)), ('another', (24, 25))]",[],[],[],[]
model,The output vector of DF - LSTMs is fed into a task - specific output layer to compute the match - ing score .,"[('of', (3, 4)), ('fed into', (8, 10)), ('to compute', (16, 18))]","[('output vector', (1, 3)), ('DF - LSTMs', (4, 7)), ('task - specific output layer', (11, 16)), ('match - ing score', (19, 23))]",[],[],[],[]
baselines,Neural bag - of - words ( NBOW ) :,[],"[('Neural bag - of - words ( NBOW )', (0, 9))]",[],[],[],[]
baselines,"Each sequence is represented as the sum of the embeddings of the words it contains , then they are concatenated and fed to a MLP .","[('represented as', (3, 5)), ('sum of', (6, 8)), ('of', (10, 11)), ('concatenated and fed to', (19, 23))]","[('Each sequence', (0, 2)), ('embeddings', (9, 10)), ('words', (12, 13)), ('MLP', (24, 25))]",[],[],[],[]
baselines,"Single LSTM : Two sequences are encoded by a single LSTM , proposed by .","[('encoded by', (6, 8))]","[('Single LSTM', (0, 2)), ('Two sequences', (3, 5)), ('single LSTM', (9, 11))]",[],[],[],[]
baselines,"Parallel LSTMs : Two sequences are first encoded by two LSTMs separately , then they are concatenated and fed to a MLP .","[('first encoded by', (6, 9)), ('concatenated and fed to', (16, 20))]","[('Parallel LSTMs', (0, 2)), ('Two sequences', (3, 5)), ('two LSTMs', (9, 11)), ('two LSTMs separately', (9, 12)), ('MLP', (21, 22))]",[],[],[],[]
baselines,"Attention LSTMs : Two sequences are encoded by LSTMs with attention mechanism , proposed by .","[('encoded by', (6, 8)), ('with', (9, 10))]","[('Attention LSTMs', (0, 2)), ('Two sequences', (3, 5)), ('LSTMs', (8, 9)), ('attention mechanism', (10, 12))]",[],[],[],[]
baselines,"Word - by - word Attention LSTMs : An improved strategy of attention LSTMs , which introduces word - by - word attention mechanism and is proposed by . :","[('of', (11, 12)), ('introduces', (16, 17))]","[('Word - by - word Attention LSTMs', (0, 7)), ('word - by - word attention mechanism', (17, 24))]",[],[],[],[]
results,"we can see that the proposed model also shows its superiority on this task , which outperforms the stateof - the - arts methods on both metrics ( P@1 ( 5 ) and P@1 ( 10 ) ) with a large margin .","[('shows', (8, 9)), ('outperforms', (16, 17)), ('on', (24, 25)), ('with', (38, 39))]","[('proposed model', (5, 7)), ('superiority', (10, 11)), ('stateof - the - arts methods', (18, 24)), ('both metrics', (25, 27)), ('large margin', (40, 42))]",[],[],[],[]
results,"By analyzing the evaluation results of questionanswer matching in , we can see strong interaction models ( attention LSTMs , our DF - LSTMs ) consistently outperform the weak interaction models ( NBOW , parallel LSTMs ) with a large margin , which suggests the importance of modelling strong interaction of two sentences .","[('of', (5, 6)), ('see', (12, 13)), ('consistently outperform', (25, 27)), ('with', (37, 38))]","[('questionanswer matching', (6, 8)), ('weak interaction models ( NBOW , parallel LSTMs )', (28, 37)), ('large margin', (39, 41))]",[],[],[],[]
research-problem,Reading Wikipedia to Answer Open-Domain Questions,[],"[('Open-Domain Questions', (4, 6))]",[],[],[],[]
research-problem,"This paper considers the problem of answering factoid questions in an open - domain setting using Wikipedia as the unique knowledge source , such as one does when looking for answers in an encyclopedia .","[('using', (15, 16)), ('as', (17, 18))]","[('open - domain setting', (11, 15)), ('Wikipedia', (16, 17))]",[],[],[],[]
research-problem,"Unlike knowledge bases ( KBs ) such as Freebase or DB - Pedia , which are easier for computers to process but too sparsely populated for open - domain question answering , Wikipedia contains up - to - date knowledge that humans are interested in .",[],[],[],[],[],[]
model,"In order to answer any question , one must first retrieve the few relevant articles among more than 5 million items , and then scan them carefully to identify the answer .","[('retrieve', (10, 11)), ('among', (15, 16)), ('to identify', (27, 29))]","[('few relevant articles', (12, 15)), ('more than 5 million items', (16, 21)), ('scan', (24, 25)), ('carefully', (26, 27)), ('answer', (30, 31))]",[],[],[],[]
research-problem,"We term this setting , machine reading at scale ( MRS ) .",[],"[('machine reading at scale ( MRS )', (5, 12))]",[],[],[],[]
model,Our work treats Wikipedia as a collection of articles and does not rely on its internal graph structure .,"[('treats', (2, 3)), ('as', (4, 5))]","[('Wikipedia', (3, 4)), ('collection of articles', (6, 9))]",[],[],[],[]
model,"As a result , our approach is generic and could be switched to other collections of documents , books , or even daily updated newspapers .","[('is', (6, 7)), ('could be', (9, 11)), ('switched to', (11, 13))]","[('our approach', (4, 6)), ('generic', (7, 8)), ('other collections of documents', (13, 17)), ('daily updated newspapers', (22, 25))]",[],[],[],[]
model,Having a single knowledge source forces the model to be very precise while searching for an answer as the evidence might appear only once .,"[('Having', (0, 1)), ('forces', (5, 6)), ('to be', (8, 10)), ('while', (12, 13)), ('searching for', (13, 15))]","[('single knowledge source', (2, 5)), ('model', (7, 8)), ('very precise', (10, 12)), ('answer', (16, 17))]",[],[],[],[]
experimental-setup,We use 3 - layer bidirectional LSTMs with h = 128 hidden units for both paragraph and question encoding .,"[('use', (1, 2)), ('with', (7, 8)), ('for', (13, 14))]","[('3 - layer bidirectional LSTMs', (2, 7)), ('h = 128 hidden units', (8, 13)), ('paragraph and question encoding', (15, 19))]",[],[],[],[]
experimental-setup,"We apply the Stanford CoreNLP toolkit for tokenization and also generating lemma , partof - speech , and named entity tags .","[('apply', (1, 2)), ('for', (6, 7)), ('generating', (10, 11))]","[('Stanford CoreNLP toolkit', (3, 6)), ('tokenization', (7, 8)), ('lemma', (11, 12)), ('partof - speech', (13, 16)), ('named entity tags', (18, 21))]",[],[],[],[]
experimental-setup,"Lastly , all the training examples are sorted by the length of paragraph and divided into minibatches of 32 examples each .","[('sorted by', (7, 9)), ('of', (11, 12)), ('divided into', (14, 16)), ('of', (17, 18))]","[('training examples', (4, 6)), ('length', (10, 11)), ('paragraph', (12, 13)), ('minibatches', (16, 17)), ('32 examples', (18, 20))]",[],[],[],[]
experimental-setup,We use Adamax for optimization as described in .,"[('use', (1, 2)), ('for', (3, 4))]","[('Adamax', (2, 3)), ('optimization', (4, 5))]",[],[],[],[]
experimental-setup,Dropout with p = 0.3 is applied to word embeddings and all the hidden units of LSTMs .,"[('with', (1, 2)), ('applied to', (6, 8)), ('of', (15, 16))]","[('Dropout', (0, 1)), ('p = 0.3', (2, 5)), ('word embeddings', (8, 10)), ('all the hidden units', (11, 15)), ('LSTMs', (16, 17))]",[],[],[],[]
results,"Our system ( single model ) can achieve 70.0 % exact match and 79.0 % F 1 scores on the test set , which surpasses all the published results and can match the top performance on the SQuAD leaderboard at the time of writing .","[('on', (18, 19)), ('surpasses', (24, 25)), ('match', (31, 32)), ('on', (35, 36))]","[('Our system ( single model )', (0, 6)), ('70.0 % exact match', (8, 12)), ('79.0 % F 1 scores', (13, 18)), ('test set', (20, 22)), ('all the published results', (25, 29)), ('top performance', (33, 35)), ('SQuAD leaderboard', (37, 39))]",[],[],[],[]
results,"Without the aligned question embedding feature ( only word embedding and a few manual features ) , our system is still able to achieve F1 over 77 % .","[('Without', (0, 1)), ('able to achieve', (21, 24)), ('over', (25, 26))]","[('aligned question embedding feature', (2, 6)), ('our system', (17, 19)), ('F1', (24, 25)), ('77 %', (26, 28))]",[],[],[],[]
ablation-analysis,"More interestingly , if we remove both f aligned and f exact match , the performance drops dramatically , so we conclude that both features play a similar but complementary role in the feature representation related to the paraphrased nature of a question vs. the context around an answer .","[('remove', (5, 6)), ('both', (6, 7))]","[('f aligned and f exact match', (7, 13)), ('performance', (15, 16)), ('drops', (16, 17)), ('dramatically', (17, 18))]",[],[],[],[]
research-problem,A Deep Cascade Model for Multi - Document Reading Comprehension,[],"[('Multi - Document Reading Comprehension', (5, 10))]",[],[],[],[]
research-problem,"Machine reading comprehension ( MRC ) , which empowers computers with the ability to read and comprehend knowledge and then answer questions from textual data , has made rapid progress in recent years .",[],"[('Machine reading comprehension ( MRC )', (0, 6))]",[],[],[],[]
research-problem,"From the early cloze - style test to answer extraction from a single paragraph , and to the more complex open - domain question answering from web data , great efforts have been made to push the MRC technique to more practical applications .",[],[],[],[],[],[]
model,"To address the above problems , we propose a deep cascade model which combines the advantages of both methods in a coarse - to - fine manner .","[('propose', (7, 8)), ('combines', (13, 14)), ('of', (16, 17)), ('in', (19, 20))]","[('deep cascade model', (9, 12)), ('advantages', (15, 16)), ('both methods', (17, 19)), ('coarse - to - fine manner', (21, 27))]",[],[],[],[]
model,The deep cascade model is designed to properly keep the balance between the effectiveness and efficiency .,"[('designed to properly keep', (5, 9)), ('between', (11, 12))]","[('deep cascade model', (1, 4)), ('balance', (10, 11)), ('effectiveness and efficiency', (13, 16))]",[],[],[],[]
model,"At early stages of the model , simple features and ranking functions are used to select a candidate set of most relevant contents , filtering out the irrelevant documents and paragraphs as much as possible .","[('At', (0, 1)), ('to select', (14, 16)), ('of', (19, 20)), ('filtering out', (24, 26))]","[('early stages', (1, 3)), ('simple features and ranking functions', (7, 12)), ('candidate set', (17, 19)), ('most relevant contents', (20, 23)), ('irrelevant documents and paragraphs', (27, 31))]",[],[],[],[]
model,Then the selected paragraphs are passed to the attention - based deep MRC model for extracting the actual answer span at word level .,"[('passed to', (5, 7)), ('for extracting', (14, 16)), ('at', (20, 21))]","[('selected paragraphs', (2, 4)), ('attention - based deep MRC model', (8, 14)), ('actual answer span', (17, 20)), ('word level', (21, 23))]",[],[],[],[]
model,"To better support the answer extraction , we also introduce the document extraction and paragraph extraction as two auxiliary tasks , which helps to quickly narrow down the entire search space .","[('introduce', (9, 10))]","[('document extraction', (11, 13)), ('paragraph extraction', (14, 16))]",[],[],[],[]
model,"We jointly optimize all the three tasks in a unified deep MRC model , which shares some common bottom layers .","[('jointly optimize', (1, 3)), ('in', (7, 8)), ('shares', (15, 16))]","[('all the three tasks', (3, 7)), ('unified deep MRC model', (9, 13)), ('some common bottom layers', (16, 20))]",[],[],[],[]
model,"This cascaded structure enables the models to perform a coarse - to - fine pruning at different stages , better models can be learnt effectively and efficiently .","[('enables', (3, 4)), ('to perform', (6, 8)), ('at', (15, 16))]","[('cascaded structure', (1, 3)), ('models', (5, 6)), ('coarse - to - fine pruning', (9, 15)), ('different stages', (16, 18)), ('better models', (19, 21))]",[],[],[],[]
model,"The overall framework of our model is demonstrated in , which consists of three modules : document retrieval , paragraph retrieval and answer extraction .","[('consists of', (11, 13))]","[('three modules', (13, 15)), ('document retrieval', (16, 18)), ('paragraph retrieval', (19, 21)), ('answer extraction', (22, 24))]",[],[],[],[]
model,The first module takes the question and a collection of raw documents as input .,"[('takes', (3, 4)), ('as', (12, 13))]","[('first module', (1, 3)), ('question', (5, 6)), ('collection of raw documents', (8, 12)), ('input', (13, 14))]",[],[],[],[]
model,"The module at each subsequent stage consumes the output from the previous stage , and further prunes the documents , paragraphs and answer spans given the question .","[('at', (2, 3)), ('consumes', (6, 7)), ('from', (9, 10)), ('further prunes', (15, 17)), ('given', (24, 25))]","[('module', (1, 2)), ('each subsequent stage', (3, 6)), ('output', (8, 9)), ('previous stage', (11, 13)), ('documents , paragraphs and answer spans', (18, 24)), ('question', (26, 27))]",[],[],[],[]
model,"The ranking function is first used as a preliminary filter to discard most of the irrelevant documents or paragraphs , so as to keep our framework efficient .","[('used as', (5, 7)), ('to discard', (10, 12))]","[('ranking function', (1, 3)), ('preliminary filter', (8, 10)), ('most of the irrelevant documents or paragraphs', (12, 19))]",[],[],[],[]
model,"The extraction function is then designed to deal with the auxiliary document and paragraph extraction tasks , which is jointly optimized with the final answer extraction module for better extraction performance .","[('designed to deal with', (5, 9)), ('jointly optimized with', (19, 22)), ('for', (27, 28))]","[('extraction function', (1, 3)), ('auxiliary document and paragraph extraction tasks', (10, 16)), ('final answer extraction module', (23, 27)), ('better extraction performance', (28, 31))]",[],[],[],[]
experimental-setup,We choose K = 4 and N = 2 for the good performance when evaluating on the dev set .,"[('choose', (1, 2)), ('for', (9, 10))]","[('K = 4 and N = 2', (2, 9)), ('good performance', (11, 13)), ('dev set', (17, 19))]",[],[],[],[]
experimental-setup,"For the multi-task deep attention framework , we adopt the Adam optimizer for training , with a mini-batch size of 32 and initial learning rate of 0.0005 .","[('For', (0, 1)), ('adopt', (8, 9)), ('for', (12, 13)), ('with', (15, 16)), ('of', (19, 20)), ('of', (25, 26))]","[('multi-task deep attention framework', (2, 6)), ('Adam optimizer', (10, 12)), ('training', (13, 14)), ('mini-batch size', (17, 19)), ('32', (20, 21)), ('initial learning rate', (22, 25)), ('0.0005', (26, 27))]",[],[],[],[]
experimental-setup,We use the GloVe 300 dimensional word embeddings in TriviaQA and train a word2 vec word embeddings with the whole DuReader corpus for DuReader .,"[('use', (1, 2)), ('in', (8, 9)), ('train', (11, 12)), ('with', (17, 18)), ('for', (22, 23))]","[('GloVe 300 dimensional word embeddings', (3, 8)), ('TriviaQA', (9, 10)), ('word2 vec word embeddings', (13, 17)), ('whole DuReader corpus', (19, 22)), ('DuReader', (23, 24))]",[],[],[],[]
experimental-setup,The word embeddings are fixed during training .,"[('fixed during', (4, 6))]","[('word embeddings', (1, 3)), ('training', (6, 7))]",[],[],[],[]
experimental-setup,The hidden size of LSTM is set as 150 for TriviaQA and 128 for DuReader .,"[('of', (3, 4)), ('set as', (6, 8)), ('for', (9, 10)), ('for', (13, 14))]","[('hidden size', (1, 3)), ('LSTM', (4, 5)), ('150', (8, 9)), ('TriviaQA', (10, 11)), ('128', (12, 13)), ('DuReader', (14, 15))]",[],[],[],[]
experimental-setup,The task - specific hyper - parameters ? 1 and ? 2 in Equ. 15 are set as ? 1 = ? 2 = 0.5 . Regularization parameter ? in Equ.,"[('set as', (16, 18))]","[('task - specific hyper - parameters', (1, 7)), ('? 1 = ? 2 = 0.5', (18, 25)), ('Regularization parameter', (26, 28))]",[],[],[],[]
experimental-setup,16 is set as a small value of 0.01 .,"[('set as', (2, 4)), ('of', (7, 8))]","[('small value', (5, 7)), ('0.01', (8, 9))]",[],[],[],[]
experimental-setup,All models are trained on Nvidia Tesla M40 GPU with Cudnn LSTM cell in Tensorflow 1.3 .,"[('trained on', (3, 5)), ('with', (9, 10)), ('in', (13, 14))]","[('Nvidia Tesla M40 GPU', (5, 9)), ('Cudnn LSTM cell', (10, 13)), ('Tensorflow 1.3', (14, 16))]",[],[],[],[]
results,"We can see that by adopting the deep cascade learning framework , the proposed model outperforms the previous state - of - the - art methods by an evident margin on both datasets , which validates the effectiveness of the proposed method in addressing the challenging multi-document MRC task .","[('see', (2, 3)), ('by adopting', (4, 6)), ('outperforms', (15, 16)), ('by', (26, 27)), ('on', (30, 31))]","[('deep cascade learning framework', (7, 11)), ('proposed model', (13, 15)), ('previous state - of - the - art methods', (17, 26)), ('evident margin', (28, 30)), ('both datasets', (31, 33))]",[],[],[],[]
ablation-analysis,"From the results , we can see that : 1 ) the shared LSTM plays an important role in answer extraction among multiple documents , the benefit lies in two parts : a ) it helps to normalize the content probability score from multiple documents so that the answers extracted from different documents can be directly compared ; b ) it can keep the ranking order from document ranking component in mind , which may serve as an additional signal when predicting the best answer .","[('plays', (14, 15)), ('in', (18, 19)), ('among', (21, 22)), ('from', (42, 43)), ('keep', (62, 63)), ('from', (66, 67))]","[('shared LSTM', (12, 14)), ('important role', (16, 18)), ('answer extraction', (19, 21)), ('multiple documents', (22, 24)), ('content probability score', (39, 42)), ('multiple documents', (43, 45)), ('ranking order', (64, 66)), ('document ranking component', (67, 70))]",[],[],[],[]
ablation-analysis,"By incorporating the manual features , the performance can be further improved slightly .",[],"[('manual features', (3, 5)), ('performance', (7, 8)), ('further improved slightly', (10, 13))]",[],[],[],[]
ablation-analysis,"2 ) Both the preliminary cascade ranking and multi-task answer extraction strategy are vital for the final performance , which serve as a good trade - off between the pure pipeline method and fully joint learning method .","[('vital for', (13, 15)), ('serve as', (20, 22)), ('between', (27, 28))]","[('preliminary cascade ranking and multi-task answer extraction strategy', (4, 12)), ('final performance', (16, 18)), ('good trade - off', (23, 27)), ('pure pipeline method', (29, 32)), ('fully joint learning method', (33, 37))]",[],[],[],[]
ablation-analysis,"Jointly training the three extraction tasks can provide great benefits , which shows that the three tasks are actually closely related and can boost each other with shared representations at bottom layers .","[('Jointly training', (0, 2)), ('provide', (7, 8)), ('boost', (23, 24)), ('with', (26, 27)), ('at', (29, 30))]","[('three extraction tasks', (3, 6)), ('great benefits', (8, 10)), ('each other', (24, 26)), ('shared representations', (27, 29)), ('bottom layers', (30, 32))]",[],[],[],[]
research-problem,U - Net : Machine Reading Comprehension with Unanswerable Questions,[],"[('Machine Reading Comprehension', (4, 7))]",[],[],[],[]
research-problem,"Machine reading comprehension ( MRC ) is a challenging task in natural language processing , which requires that machine can read , understand , and answer questions about a text .",[],"[('Machine reading comprehension ( MRC )', (0, 6))]",[],[],[],[]
research-problem,"Benefiting from the rapid development of deep learning techniques and large - scale benchmarks , the end - to - end neural methods have achieved promising results on MRC task .",[],"[('MRC', (28, 29))]",[],[],[],[]
research-problem,"In this paper , we decompose the problem of MRC with unanswerable questions into three sub - tasks : answer pointer , no - answer pointer , and answer verifier .","[('decompose', (5, 6)), ('of', (8, 9)), ('into', (13, 14))]","[('problem', (7, 8)), ('MRC', (9, 10)), ('three sub - tasks', (14, 18)), ('answer pointer', (19, 21)), ('no - answer pointer', (22, 26)), ('answer verifier', (28, 30))]",[],[],[],[]
model,We propose the U - Net to incorporate these three sub - tasks into a unified model :,"[('propose', (1, 2)), ('to incorporate', (6, 8)), ('into', (13, 14))]","[('U - Net', (3, 6)), ('three sub - tasks', (9, 13)), ('unified model', (15, 17))]",[],[],[],[]
model,"1 ) an answer pointer to predict a can - didate answer span for a question ; 2 ) a no -answer pointer to avoid selecting any text span when a question has no answer ; and 3 ) an answer verifier to determine the probability of the "" unanswerability "" of a question with candidate answer information .","[('to predict', (5, 7)), ('for', (13, 14)), ('to avoid', (23, 25)), ('selecting', (25, 26)), ('when', (29, 30)), ('to determine', (42, 44)), ('of', (46, 47)), ('of', (51, 52)), ('with', (54, 55))]","[('answer pointer', (3, 5)), ('can - didate answer span', (8, 13)), ('question', (15, 16)), ('no -answer pointer', (20, 23)), ('any text span', (26, 29)), ('question', (31, 32)), ('no answer', (33, 35)), ('answer verifier', (40, 42)), ('probability', (45, 46)), ('question', (53, 54)), ('candidate answer information', (55, 58))]",[],[],[],[]
model,"Additionally , we also introduce a universal node and process the question and its context passage as a single contiguous sequence of tokens , which greatly improves the conciseness of U - Net .","[('introduce', (4, 5)), ('process', (9, 10)), ('as', (16, 17)), ('greatly improves', (25, 27)), ('of', (29, 30))]","[('universal node', (6, 8)), ('question and its context passage', (11, 16)), ('single contiguous sequence of tokens', (18, 23)), ('conciseness', (28, 29)), ('U - Net', (30, 33))]",[],[],[],[]
model,The universal node acts on both question and passage to learn whether the question is answerable .,"[('acts on', (3, 5)), ('to learn', (9, 11)), ('is', (14, 15))]","[('universal node', (1, 3)), ('question and passage', (6, 9)), ('question', (13, 14)), ('answerable', (15, 16))]",[],[],[],[]
experimental-setup,"We use Spacy to process each question and passage to obtain tokens , POS tags , NER tags and lemmas tags of each text .","[('use', (1, 2)), ('to process', (3, 5)), ('to obtain', (9, 11)), ('of', (21, 22))]","[('Spacy', (2, 3)), ('each question and passage', (5, 9)), ('POS tags', (13, 15)), ('NER tags', (16, 18)), ('lemmas tags', (19, 21)), ('each text', (22, 24))]",[],[],[],[]
experimental-setup,"We use 12 dimensions to embed POS tags , 8 for NER tags .","[('use', (1, 2)), ('to embed', (4, 6)), ('for', (10, 11))]","[('12 dimensions', (2, 4)), ('POS tags', (6, 8)), ('8', (9, 10)), ('NER tags', (11, 13))]",[],[],[],[]
experimental-setup,"We use 3 binary features : exact match , lower - case match and lemma match between the question and passage .","[('use', (1, 2)), ('between', (16, 17))]","[('3 binary features', (2, 5)), ('exact match', (6, 8)), ('lower - case match', (9, 13)), ('lemma match', (14, 16)), ('question and passage', (18, 21))]",[],[],[],[]
experimental-setup,We use 100 - dim Glove pretrained word embeddings and 1024 - dim Elmo embeddings .,"[('use', (1, 2))]","[('100 - dim Glove pretrained word embeddings', (2, 9)), ('1024 - dim Elmo embeddings', (10, 15))]",[],[],[],[]
experimental-setup,All the LSTM blocks are bi-directional with one single layer .,"[('are', (4, 5)), ('with', (6, 7))]","[('LSTM blocks', (2, 4)), ('bi-directional', (5, 6)), ('one single layer', (7, 10))]",[],[],[],[]
experimental-setup,"We set the hidden layer dimension as 125 , attention layer dimension as 250 .","[('set', (1, 2)), ('as', (6, 7)), ('as', (12, 13))]","[('hidden layer dimension', (3, 6)), ('125', (7, 8)), ('attention layer dimension', (9, 12)), ('250', (13, 14))]",[],[],[],[]
experimental-setup,"We added a dropout layer overall the modeling layers , including the embedding layer , at a dropout rate of 0.3 .","[('added', (1, 2)), ('overall', (5, 6)), ('including', (10, 11)), ('at', (15, 16)), ('of', (19, 20))]","[('dropout layer', (3, 5)), ('modeling layers', (7, 9)), ('embedding layer', (12, 14)), ('dropout rate', (17, 19)), ('0.3', (20, 21))]",[],[],[],[]
experimental-setup,We use Adam optimizer with a learning rate of 0.002 ( Kingma and Ba 2014 ) .,"[('use', (1, 2)), ('with', (4, 5)), ('of', (8, 9))]","[('Adam optimizer', (2, 4)), ('learning rate', (6, 8)), ('0.002', (9, 10))]",[],[],[],[]
results,"Our model achieves an F 1 score of 74.0 and an EM score of 70.3 on the development set , and an F 1 score of 72.6 and an EM score of 69.2 on Test set 1 , as shown in .","[('achieves', (2, 3)), ('of', (7, 8)), ('of', (13, 14)), ('on', (15, 16)), ('of', (25, 26)), ('of', (31, 32)), ('on', (33, 34))]","[('Our model', (0, 2)), ('F 1 score', (4, 7)), ('74.0', (8, 9)), ('EM score', (11, 13)), ('70.3', (14, 15)), ('development set', (17, 19)), ('F 1 score', (22, 25)), ('72.6', (26, 27)), ('EM score', (29, 31)), ('69.2', (32, 33)), ('Test set', (34, 36))]",[],[],[],[]
results,Our model outperforms most of the previous approaches .,"[('outperforms', (2, 3))]","[('Our model', (0, 2)), ('most of the previous approaches', (3, 8))]",[],[],[],[]
results,"Comparing to the best - performing systems , our model has a simple architecture and is an end - to - end model .","[('Comparing to', (0, 2)), ('is', (15, 16))]","[('best - performing systems', (3, 7)), ('our model', (8, 10)), ('simple architecture', (12, 14)), ('end - to - end model', (17, 23))]",[],[],[],[]
results,"In fact , among all the end - to - end models , we achieve the best F1 scores .","[('among', (3, 4)), ('achieve', (14, 15))]","[('all the end - to - end models', (4, 12)), ('best F1 scores', (16, 19))]",[],[],[],[]
ablation-analysis,"Our results showed that when node U is shared , as it is called ' universal ' , it learns information interaction between the question and passage , and when it is not shared , the performance slightly degraded .","[('showed', (2, 3)), ('when', (4, 5)), ('is', (7, 8)), ('learns', (19, 20)), ('between', (22, 23)), ('when', (29, 30))]","[('node U', (5, 7)), ('shared', (8, 9)), ('information interaction', (20, 22)), ('question and passage', (24, 27)), ('not shared', (32, 34)), ('performance', (36, 37)), ('slightly degraded', (37, 39))]",[],[],[],[]
ablation-analysis,"Results show that the performance dropped slightly , suggesting sharing BiLSTM is an effective method to improve the quality of the encoder .","[('show', (1, 2))]","[('performance', (4, 5)), ('dropped slightly', (5, 7))]",[],[],[],[]
ablation-analysis,"After removing the plausible answer pointer , the performance also dropped , indicating the plausible answers are useful to improve the model even though they are incorrect .","[('After removing', (0, 2))]","[('plausible answer pointer', (3, 6)), ('performance', (8, 9)), ('dropped', (10, 11))]",[],[],[],[]
ablation-analysis,"After removing the answer verifier , the performance dropped greatly , indicating it is vital for our model .","[('After removing', (0, 2)), ('dropped', (8, 9))]","[('answer verifier', (3, 5)), ('performance', (7, 8)), ('dropped greatly', (8, 10)), ('greatly', (9, 10))]",[],[],[],[]
ablation-analysis,"In the second block ( multi - level attention ) of the U - Net , we do not split the output of the encoded presentation and let it pass through a self - attention layer .","[('In', (0, 1)), ('of', (10, 11)), ('do not split', (17, 20)), ('of', (22, 23)), ('let it', (27, 29)), ('pass through', (29, 31))]","[('U - Net', (12, 15)), ('output', (21, 22)), ('encoded presentation', (24, 26)), ('self - attention layer', (32, 36))]",[],[],[],[]
research-problem,SDNET : CONTEXTUALIZED ATTENTION - BASED DEEP NETWORK FOR CONVERSATIONAL QUESTION AN - SWERING,[],"[('CONVERSATIONAL QUESTION AN - SWERING', (9, 14))]",[],[],[],[]
research-problem,Conversational question answering ( CQA ) is a novel QA task that requires understanding of dialogue context .,[],"[('Conversational question answering ( CQA )', (0, 6))]",[],[],[],[]
research-problem,"Different from traditional single - turn machine reading comprehension ( MRC ) tasks , CQA includes passage comprehension , coreference resolution , and contextual understanding .",[],"[('CQA', (14, 15))]",[],[],[],[]
model,"In this paper , we propose SDNet , a contextual attention - based deep neural network for the task of conversational question answering .","[('propose', (5, 6)), ('for', (16, 17))]","[('SDNet', (6, 7)), ('contextual attention - based deep neural network', (9, 16)), ('conversational question answering', (20, 23))]",[],[],[],[]
model,"Firstly , we apply both inter-attention and self - attention on passage and question to obtain a more effective understanding of the passage and dialogue history .","[('apply', (3, 4)), ('on', (10, 11)), ('to obtain', (14, 16)), ('of', (20, 21))]","[('inter-attention and self - attention', (5, 10)), ('passage and question', (11, 14)), ('more effective understanding', (17, 20)), ('passage and dialogue history', (22, 26))]",[],[],[],[]
model,"Secondly , SDNet leverages the latest breakthrough in NLP : BERT contextual embedding .","[('leverages', (3, 4)), ('in', (7, 8))]","[('SDNet', (2, 3)), ('latest breakthrough', (5, 7)), ('NLP', (8, 9)), ('BERT contextual embedding', (10, 13))]",[],[],[],[]
model,"Different from the canonical way of appending a thin layer after BERT structure according to , we innovatively employed a weighted sum of BERT layer outputs , with locked BERT parameters .","[('innovatively employed', (17, 19)), ('employed', (18, 19)), ('of', (22, 23)), ('with', (27, 28))]","[('weighted sum', (20, 22)), ('BERT layer outputs', (23, 26)), ('locked BERT parameters', (28, 31))]",[],[],[],[]
model,"Thirdly , we prepend previous rounds of questions and answers to the current question to incorporate contextual information .","[('prepend', (3, 4)), ('to', (10, 11)), ('to incorporate', (14, 16))]","[('previous rounds of questions and answers', (4, 10)), ('previous rounds', (4, 6)), ('current question', (12, 14)), ('contextual information', (16, 18))]",[],[],[],[]
results,"As shown , SDNet achieves significantly better results than baseline models .","[('achieves', (4, 5)), ('than', (8, 9))]","[('SDNet', (3, 4)), ('significantly better results', (5, 8)), ('baseline models', (9, 11))]",[],[],[],[]
results,"In detail , the single SDNet model improves overall F 1 by 1.6 % , compared with previous state - of - art model on CoQA , Flow QA .","[('improves', (7, 8)), ('by', (11, 12)), ('compared with', (15, 17)), ('on', (24, 25))]","[('single SDNet model', (4, 7)), ('overall F 1', (8, 11)), ('1.6 %', (12, 14)), ('previous state - of - art model', (17, 24)), ('CoQA', (25, 26))]",[],[],[],[]
results,"Ensemble SDNet model further improves overall F 1 score by 2.7 % , and it 's the first model to achieve over 80 % F 1 score on in - domain datasets ( 80.7 % ) .","[('by', (9, 10)), ('on', (27, 28))]","[('Ensemble SDNet model', (0, 3)), ('overall F 1 score', (5, 9)), ('2.7 %', (10, 12))]",[],[],[],[]
results,"As seen , SDNet overpasses all but one baseline models after the second epoch , and achieves state - of - the - art results only after 8 epochs .","[('overpasses', (4, 5)), ('after', (10, 11)), ('achieves', (16, 17)), ('after', (26, 27))]","[('SDNet', (3, 4)), ('all but one baseline models', (5, 10)), ('second epoch', (12, 14)), ('state - of - the - art results', (17, 25)), ('8 epochs', (27, 29))]",[],[],[],[]
research-problem,TRACKING THE WORLD STATE WITH RECURRENT ENTITY NETWORKS,[],"[('TRACKING THE WORLD STATE', (0, 4))]",[],[],[],[]
research-problem,"In this paper , we investigate this problem through a simple story understanding scenario , in which the agent is given a sequence of textual statements and events , and then given another series of statements about the final state of the world .","[('through', (8, 9)), ('given', (20, 21)), ('given', (31, 32)), ('about', (36, 37))]","[('simple story understanding scenario', (10, 14)), ('agent', (18, 19))]",[],[],[],[]
model,We propose to handle this scenario with a new kind of memory - augmented neural network that uses a distributed memory and processor architecture : the Recurrent Entity Network ( EntNet ) .,"[('with', (6, 7)), ('uses', (17, 18))]","[('new kind of memory - augmented neural network', (8, 16)), ('distributed memory and processor architecture', (19, 24)), ('Recurrent Entity Network ( EntNet )', (26, 32))]",[],[],[],[]
model,"The model consists of a fixed number of dynamic memory cells , each containing a vector key w j and a vector value ( or content ) h j .","[('consists of', (2, 4)), ('containing', (13, 14))]","[('fixed number of dynamic memory cells', (5, 11)), ('vector key w j', (15, 19)), ('vector value ( or content ) h j', (21, 29))]",[],[],[],[]
model,"Each cell is associated with its own "" processor "" , a simple gated recurrent network that may update the cell value given an input .","[('associated with', (3, 5)), ('given', (22, 23))]","[('Each cell', (0, 2)), ('own "" processor ""', (6, 10)), ('simple gated recurrent network', (12, 16)), ('cell value', (20, 22)), ('input', (24, 25))]",[],[],[],[]
model,"Alternatively , the EntNet can be seen as a bank of gated RNNs ( all sharing the same parameters ) , whose hidden states correspond to latent concepts and attributes , and whose parameters describe the laws of the world according to which the attributes of objects are updated .","[('seen as', (6, 8)), ('whose', (21, 22)), ('correspond to', (24, 26)), ('describe', (34, 35)), ('according to which', (40, 43)), ('of', (45, 46))]","[('EntNet', (3, 4)), ('bank of gated RNNs', (9, 13)), ('hidden states', (22, 24)), ('latent concepts and attributes', (26, 30)), ('parameters', (33, 34)), ('laws of the world', (36, 40)), ('attributes', (44, 45)), ('objects', (46, 47)), ('updated', (48, 49))]",[],[],[],[]
model,"Their hidden state is updated only when new information relevant to their concept is received , and remains otherwise unchanged .","[('updated only when', (4, 7)), ('relevant to', (9, 11)), ('is', (13, 14))]","[('hidden state', (1, 3)), ('new information', (7, 9)), ('concept', (12, 13)), ('received', (14, 15))]",[],[],[],[]
model,"The keys used in the addressing / gating mechanism also correspond to concepts or entities , but are modified only during learning , not during inference .","[('used in', (2, 4)), ('correspond to', (10, 12))]","[('keys', (1, 2)), ('addressing / gating mechanism', (5, 9)), ('concepts or entities', (12, 15)), ('modified', (18, 19)), ('learning', (21, 22)), ('inference', (25, 26))]",[],[],[],[]
experiments,SYNTHETIC WORLD MODEL TASK,[],"[('SYNTHETIC WORLD MODEL TASK', (0, 4))]",[],[],[],[]
hyperparameters,"For the MemN2N , we set the number of hops equal to T ? 2 and the embedding dimension to d = 20 .","[('For', (0, 1)), ('set', (5, 6)), ('equal to', (10, 12)), ('to', (19, 20))]","[('MemN2N', (2, 3)), ('number of hops', (7, 10)), ('T ? 2', (12, 15)), ('embedding dimension', (17, 19)), ('d = 20', (20, 23))]",[],[],[],[]
hyperparameters,"The EntNet had embedding dimension d = 20 and 5 memory slots , and the LSTM had 50 hidden units which resulted in it having significantly more parameters than the other two models .","[('had', (2, 3)), ('than', (28, 29))]","[('EntNet', (1, 2)), ('5 memory slots', (9, 12)), ('LSTM', (15, 16)), ('50 hidden units', (17, 20)), ('significantly more parameters', (25, 28)), ('other two models', (30, 33))]",[],[],[],[]
hyperparameters,"All models were trained with ADAM with initial learning rates set by grid search over { 0.1 , 0.01 , 0.001 } and divided by 2 every 10,000 updates .","[('trained with', (3, 5)), ('with', (6, 7)), ('set by', (10, 12)), ('over', (14, 15)), ('divided by', (23, 25))]","[('ADAM', (5, 6)), ('initial learning rates', (7, 10)), ('grid search', (12, 14)), ('{ 0.1 , 0.01 , 0.001 }', (15, 22)), ('2', (25, 26)), ('every 10,000 updates', (26, 29))]",[],[],[],[]
results,"The MemN2N has the worst performance , which degrades quickly as the length of the sequence increases .","[('degrades', (8, 9)), ('as', (10, 11))]","[('MemN2N', (1, 2)), ('worst performance', (4, 6)), ('quickly', (9, 10)), ('sequence', (15, 16)), ('increases', (16, 17))]",[],[],[],[]
results,"The LSTM performs better , but still loses accuracy as the length of the sequence increases .","[('performs', (2, 3)), ('loses', (7, 8)), ('as', (9, 10))]","[('LSTM', (1, 2)), ('better', (3, 4)), ('accuracy', (8, 9)), ('sequence', (14, 15)), ('increases', (15, 16))]",[],[],[],[]
experiments,CHILDRE N'S BOOK TEST ( CBT ),[],"[(""CHILDRE N'S BOOK TEST ( CBT )"", (0, 7))]",[],[],[],[]
results,"It was shown in that methods with limited memory such as LSTMs perform well on more frequent , syntax based words such as prepositions and verbs , being similar to human performance , but poorly relative to humans on more semantically meaningful words such as named entities and common nouns .","[('with', (6, 7)), ('such as', (9, 11)), ('perform', (12, 13)), ('on', (14, 15)), ('such as', (21, 23)), ('on', (38, 39)), ('such as', (43, 45))]","[('methods', (5, 6)), ('limited memory', (7, 9)), ('LSTMs', (11, 12)), ('well', (13, 14)), ('more frequent , syntax based words', (15, 21)), ('prepositions and verbs', (23, 26)), ('poorly', (34, 35)), ('more semantically meaningful words', (39, 43))]",[],[],[],[]
research-problem,PHASE CONDUCTOR ON MULTI - LAYERED ATTEN - TIONS FOR MACHINE COMPREHENSION,[],"[('MACHINE COMPREHENSION', (10, 12))]",[],[],[],[]
research-problem,"Benefiting from the availability of large - scale benchmark datasets such as SQuAD , the attention - based neural networks has spread to machine comprehension and question answering tasks to allow the model to attend over past output vectors .",[],[],[],[],[],[]
model,"Inspired by the above - mentioned works , we are proposing to introduce a general framework PhaseCond for the use of multiple attention layers .","[('introduce', (12, 13)), ('for', (17, 18))]","[('general framework PhaseCond', (14, 17)), ('multiple attention layers', (21, 24))]",[],[],[],[]
model,"First , previous research on the self - attention model is to purely capture long - distance dependencies , and therefore a multi-hops architecture is used to alternatively captures question - aware passage representations and refines the results by using a self - attention model .","[('refines', (35, 36)), ('by using', (38, 40))]","[('multi-hops architecture', (22, 24)), ('alternatively captures', (27, 29)), ('question - aware passage representations', (29, 34)), ('results', (37, 38)), ('self - attention model', (41, 45))]",[],[],[],[]
model,"Second , unlike the domains such as machine translation which jointly align and translate words , question - passage attention models for machine comprehension and question answering calculate the alignment matrix corresponding to all question and passage word pairs .","[('for', (21, 22)), ('calculate', (27, 28)), ('corresponding to', (31, 33))]","[('question - passage attention models', (16, 21)), ('machine comprehension and question answering', (22, 27)), ('alignment matrix', (29, 31)), ('all question and passage word pairs', (33, 39))]",[],[],[],[]
results,"The EM result of our baseline Iterative Aligner is lower than RNET , confirming that the problem is not caused by our proposed model .","[('of', (3, 4)), ('is', (8, 9)), ('lower than', (9, 11))]","[('EM result', (1, 3)), ('our baseline Iterative Aligner', (4, 8)), ('RNET', (11, 12))]",[],[],[],[]
results,"Our explanations is that 1 ) RNET uses a different feature set ( e.g. , Glo Ve 300 dimensional word vectors are employed ) and different encoding steps ( e.g. , three GRU layers are used for encoding question and passage representations ) , and 2 ) RNET uses a different ensemble method from our implementation .","[('uses', (7, 8))]","[('RNET', (6, 7)), ('different feature set', (9, 12)), ('different encoding steps', (25, 28)), ('different ensemble method', (50, 53))]",[],[],[],[]
results,shows the performance with different number of layers for both question - passage attention phase and self - attention phase .,"[('shows', (0, 1)), ('with', (3, 4)), ('for', (8, 9))]","[('performance', (2, 3)), ('different number of layers', (4, 8)), ('question - passage attention phase', (10, 15)), ('self - attention phase', (16, 20))]",[],[],[],[]
results,"For the question - passage attention phase , using single layer does n't degrade the performance significantly from the default setting of two layers , resulting in a different conclusion from ; .","[('For', (0, 1)), ('using', (8, 9)), (""does n't degrade"", (11, 14)), ('from', (17, 18)), ('of', (21, 22))]","[('question - passage attention phase', (2, 7)), ('single layer', (9, 11)), ('performance', (15, 16)), ('significantly', (16, 17)), ('default setting', (19, 21)), ('two layers', (22, 24))]",[],[],[],[]
baselines,"In contrast , multiple stacking layers are needed to allow the evidence fully propagated through the passage .","[('to allow', (8, 10)), ('fully propagated through', (12, 15))]","[('multiple stacking layers', (3, 6)), ('needed', (7, 8)), ('evidence', (11, 12)), ('passage', (16, 17))]",[],[],[],[]
research-problem,Exploring Question Understanding and Adaptation in Neural - Network - Based Question Answering,[],[],[],[],[],[]
research-problem,The last several years have seen intensive interest in exploring neural - networkbased models for machine comprehension ( MC ) and question answering ( QA ) .,[],"[('machine comprehension ( MC )', (15, 20)), ('question answering ( QA )', (21, 26))]",[],[],[],[]
model,"In this paper , we take a closer look at modeling questions in such an end - to - end neural network framework , since we regard question understanding is of importance for such problems .","[('in', (12, 13))]","[('modeling questions', (10, 12)), ('end - to - end neural network framework', (15, 23))]",[],[],[],[]
model,We first introduced syntactic information to help encode questions .,"[('introduced', (2, 3)), ('to help', (5, 7))]","[('syntactic information', (3, 5)), ('questions', (8, 9))]",[],[],[],[]
model,We then viewed and modelled different types of questions and the information shared among them as an adaptation problem and proposed adaptation models for them .,"[('viewed and modelled', (2, 5)), ('as', (15, 16))]","[('different types of questions', (5, 9)), ('information', (11, 12)), ('adaptation problem', (17, 19)), ('proposed', (20, 21)), ('adaptation models', (21, 23))]",[],[],[],[]
results,We test our models on Stanford Question Answering Dataset ( SQuAD ) .,"[('on', (4, 5))]","[('Stanford Question Answering Dataset ( SQuAD )', (5, 12))]",[],[],[],[]
results,"The SQuAD dataset consists of more than 100,000 questions annotated by crowdsourcing workers on a selected set of Wikipedia articles , and the answer to each question is a span of text in the Wikipedia articles .","[('consists of', (3, 5)), ('annotated by', (9, 11)), ('on', (13, 14))]","[('SQuAD dataset', (1, 3)), ('more than 100,000 questions', (5, 9)), ('crowdsourcing workers', (11, 13))]",[],[],[],[]
hyperparameters,We use pre-trained 300 - D Glove 840B vectors to initialize our word embeddings .,"[('use', (1, 2)), ('to initialize', (9, 11))]","[('pre-trained 300 - D Glove 840B vectors', (2, 9)), ('our word embeddings', (11, 14))]",[],[],[],[]
hyperparameters,Out - of - vocabulary ( OOV ) words are initialized randomly with Gaussian samples .,"[('initialized', (10, 11)), ('with', (12, 13))]","[('Out - of - vocabulary ( OOV ) words', (0, 9)), ('randomly', (11, 12)), ('Gaussian samples', (13, 15))]",[],[],[],[]
hyperparameters,"CharCNN filter length is 1 , 3 , 5 , each is 50 dimensions .","[('is', (3, 4))]","[('CharCNN filter length', (0, 3)), ('1 , 3 , 5', (4, 9)), ('50 dimensions', (12, 14))]",[],[],[],[]
hyperparameters,The cluster number K in discriminative block is 100 .,"[('in', (4, 5)), ('is', (7, 8))]","[('cluster number K', (1, 4)), ('discriminative block', (5, 7)), ('100', (8, 9))]",[],[],[],[]
hyperparameters,The Adam method is used for optimization .,"[('used for', (4, 6))]","[('Adam method', (1, 3)), ('optimization', (6, 7))]",[],[],[],[]
hyperparameters,And the first momentum is set to be 0.9 and the second 0.999 .,"[('set to be', (5, 8))]","[('first momentum', (2, 4)), ('0.9', (8, 9)), ('second', (11, 12)), ('0.999', (12, 13))]",[],[],[],[]
hyperparameters,The initial learning rate is 0.0004 and the batch size is 32 .,"[('is', (4, 5)), ('is', (10, 11))]","[('initial learning rate', (1, 4)), ('0.0004', (5, 6)), ('batch size', (8, 10)), ('32', (11, 12))]",[],[],[],[]
hyperparameters,"All hidden states of GRUs , and TreeLSTMs are 500 dimensions , while word - level embedding d w is 300 dimensions .","[('of', (3, 4)), ('are', (8, 9)), ('is', (19, 20))]","[('hidden states', (1, 3)), ('GRUs , and TreeLSTMs', (4, 8)), ('500 dimensions', (9, 11)), ('word - level embedding d w', (13, 19)), ('300 dimensions', (20, 22))]",[],[],[],[]
hyperparameters,"We set max length of document to 500 , and drop the question - document pairs beyond this on training set .","[('set', (1, 2)), ('of', (4, 5)), ('to', (6, 7)), ('drop', (10, 11)), ('beyond', (16, 17)), ('on', (18, 19))]","[('max length', (2, 4)), ('document', (5, 6)), ('500', (7, 8)), ('question - document pairs', (12, 16)), ('training set', (19, 21))]",[],[],[],[]
hyperparameters,Explicit question - type dimension d ET is 50 .,"[('is', (7, 8))]","[('Explicit question - type dimension d ET', (0, 7)), ('50', (8, 9))]",[],[],[],[]
hyperparameters,We apply dropout to the Encoder layer and aggregation layer with a dropout rate of 0.5 .,"[('apply', (1, 2)), ('to', (3, 4)), ('with', (10, 11)), ('of', (14, 15))]","[('dropout', (2, 3)), ('Encoder layer and aggregation layer', (5, 10)), ('dropout rate', (12, 14)), ('0.5', (15, 16))]",[],[],[],[]
results,"Our model achieves a 68.73 % EM score and 77.39 % F1 score , which is ranked among the state of the art single models ( without model ensembling shows the ablation performances of various Q- code on the development set .","[('achieves', (2, 3)), ('ranked among', (16, 18))]","[('Our model', (0, 2)), ('68.73 % EM score', (4, 8)), ('77.39 % F1 score', (9, 13)), ('state of the art single models', (19, 25))]",[],[],[],[]
results,"Our baseline model using no Q- code achieved a 68.00 % and 77.36 % EM and F 1 scores , respectively .","[('using', (3, 4)), ('achieved', (7, 8))]","[('baseline model', (1, 3)), ('no Q- code', (4, 7)), ('68.00 % and 77.36 % EM and F 1 scores', (9, 19))]",[],[],[],[]
results,"When we added the explicit question type T - code into the baseline model , the performance was improved slightly to 68.16 % ( EM ) and 77.58 % ( F1 ) .","[('added', (2, 3)), ('into', (10, 11)), ('to', (20, 21))]","[('explicit question type T - code', (4, 10)), ('baseline model', (12, 14)), ('performance', (16, 17)), ('improved slightly', (18, 20)), ('68.16 % ( EM )', (21, 26)), ('77.58 % ( F1 )', (27, 32))]",[],[],[],[]
results,"We then used TreeLSTM introduce syntactic parses for question representation and understanding ( replacing simple question type as question understanding Q-code ) , which consistently shows further improvement .","[('used', (2, 3)), ('introduce', (4, 5)), ('for', (7, 8))]","[('TreeLSTM', (3, 4)), ('syntactic parses', (5, 7)), ('question representation and understanding', (8, 12))]",[],[],[],[]
results,"Take our best model as an example , we observed a 78.38 % F1 score on the whole development set , which can be separated into two parts : one is where F1 score equals to 100 % , which means an exact match .","[('observed', (9, 10)), ('on', (15, 16)), ('separated into', (24, 26)), ('equals to', (34, 36))]","[('78.38 % F1 score', (11, 15)), ('whole development set', (17, 20)), ('two parts', (26, 28))]",[],[],[],[]
research-problem,Convolutional Neural Network Architectures for Matching Natural Language Sentences,[],[],[],[],[],[]
research-problem,"Semantic matching is of central importance to many natural language tasks [ 2,28 ] .",[],"[('Semantic matching', (0, 2))]",[],[],[],[]
research-problem,Matching two potentially heterogenous language objects is central to many natural language applications .,[],"[('Matching two potentially heterogenous language objects', (0, 6))]",[],[],[],[]
research-problem,"Natural language sentences have complicated structures , both sequential and hierarchical , that are essential for understanding them .",[],"[('Natural language sentences', (0, 3)), ('complicated structures', (4, 6))]",[],[],[],[]
research-problem,A successful sentence - matching algorithm therefore needs to capture not only the internal structures of sentences but also the rich patterns in their interactions .,"[('of', (15, 16)), ('in', (22, 23))]","[('successful sentence - matching algorithm', (1, 6)), ('internal structures', (13, 15)), ('sentences', (16, 17)), ('rich patterns', (20, 22)), ('interactions', (24, 25))]",[],[],[],[]
model,"Towards this end , we propose deep neural network models , which adapt the convolutional strategy ( proven successful on image and speech ) to natural language .","[('propose', (5, 6)), ('adapt', (12, 13)), ('to', (24, 25))]","[('deep neural network models', (6, 10)), ('convolutional strategy', (14, 16)), ('natural language', (25, 27))]",[],[],[],[]
model,"To further explore the relation between representing sentences and matching them , we devise a novel model that can naturally host both the hierarchical composition for sentences and the simple - to - comprehensive fusion of matching patterns with the same convolutional architecture .","[('devise', (13, 14)), ('for', (25, 26)), ('of', (35, 36)), ('with', (38, 39))]","[('novel model', (15, 17)), ('naturally host', (19, 21)), ('hierarchical composition', (23, 25)), ('sentences', (26, 27)), ('simple - to - comprehensive fusion', (29, 35)), ('matching patterns', (36, 38)), ('same convolutional architecture', (40, 43))]",[],[],[],[]
model,"Our model is generic , requiring no prior knowledge of natural language ( e.g. , parse tree ) and putting essentially no constraints on the matching tasks .","[('is', (2, 3)), ('requiring no', (5, 7)), ('of', (9, 10)), ('putting', (19, 20)), ('on', (23, 24))]","[('generic', (3, 4)), ('prior knowledge', (7, 9)), ('natural language', (10, 12)), ('constraints', (22, 23)), ('matching tasks', (25, 27))]",[],[],[],[]
results,Experiment I : Sentence Completion,[],"[('Sentence Completion', (3, 5))]",[],[],[],[]
results,"ARC - II outperforms ARC - I significantly , showing the power of joint modeling of matching and sentence meaning .","[('outperforms', (3, 4)), ('showing', (9, 10))]","[('ARC - II', (0, 3)), ('ARC - I', (4, 7)), ('significantly', (7, 8))]",[],[],[],[]
results,"As another convolutional model , SENNA + MLP performs fairly well on this task , although still running behind the proposed convolutional architectures since it is too shallow to adequately model the sentence .","[('performs', (8, 9)), ('on', (11, 12))]","[('SENNA + MLP', (5, 8)), ('fairly well', (9, 11))]",[],[],[],[]
results,Experiment III : Paraphrase Identification,[],"[('Paraphrase Identification', (3, 5))]",[],[],[],[]
results,"Nevertheless , our generic matching models still manage to perform reasonably well , achieving an accuracy and F1 score close to the best performer in 2008 based on hand - crafted features , but still significantly lower than the state - of - the - art ( 76.8%/83.6 % ) , achieved with unfolding - RAE and other features designed for this task .","[('manage to perform', (7, 10)), ('achieving', (13, 14)), ('close to', (19, 21)), ('in', (24, 25)), ('based on', (26, 28)), ('than', (37, 38)), ('achieved with', (51, 53))]","[('generic matching models', (3, 6)), ('reasonably well', (10, 12)), ('accuracy and F1 score', (15, 19)), ('best performer', (22, 24)), ('2008', (25, 26)), ('hand - crafted features', (28, 32)), ('significantly lower', (35, 37)), ('state - of - the - art ( 76.8%/83.6 % )', (39, 50)), ('unfolding - RAE', (53, 56))]",[],[],[],[]
research-problem,Scaling Memory - Augmented Neural Networks with Sparse Reads and Writes,[],"[('Scaling Memory - Augmented Neural Networks', (0, 6))]",[],[],[],[]
approach,We refer to this class of models as memory augmented neural networks ( MANNs ) .,[],"[('memory augmented neural networks ( MANNs )', (8, 15))]",[],[],[],[]
approach,"In this paper , we present a MANN named SAM ( sparse access memory ) .","[('present', (5, 6)), ('named', (8, 9))]","[('MANN', (7, 8)), ('SAM ( sparse access memory )', (9, 15))]",[],[],[],[]
approach,"By thresholding memory modifications to a sparse subset , and using efficient data structures for content - based read operations , our model is optimal in space and time with respect to memory size , while retaining end - to - end gradient based optimization .","[('thresholding', (1, 2)), ('to', (4, 5)), ('using', (10, 11)), ('for', (14, 15)), ('is', (23, 24)), ('in', (25, 26)), ('with respect to', (29, 32)), ('retaining', (36, 37))]","[('memory modifications', (2, 4)), ('sparse subset', (6, 8)), ('efficient data structures', (11, 14)), ('content - based read operations', (15, 20)), ('our model', (21, 23)), ('optimal', (24, 25)), ('space and time', (26, 29)), ('memory size', (32, 34)), ('end - to - end gradient based optimization', (37, 45))]",[],[],[],[]
experiments,Learning with sparse memory access,[],"[('Learning with sparse memory access', (0, 5))]",[],[],[],[]
results,"shows that sparse models are able to learn with comparable efficiency to the dense models and , surprisingly , learn more effectively for some tasks - notably priority sort and associative recall .","[('shows', (0, 1)), ('able to', (5, 7)), ('with', (8, 9)), ('to', (11, 12)), ('learn', (19, 20)), ('for', (22, 23))]","[('sparse models', (2, 4)), ('learn', (7, 8)), ('comparable efficiency', (9, 11)), ('dense models', (13, 15)), ('more effectively', (20, 22)), ('some tasks', (23, 25)), ('notably', (26, 27)), ('priority sort', (27, 29)), ('associative recall', (30, 32))]",[],[],[],[]
results,Scaling with a curriculum,[],"[('Scaling with a curriculum', (0, 4))]",[],[],[],[]
results,"For all tasks , SAM was able to advance further than the other models , and in the associative recall task , SAM was able to advance through the curriculum to sequences greater than 4000 ( ) .","[('For', (0, 1)), ('able to', (6, 8)), ('than', (10, 11)), ('in', (16, 17)), ('able to', (24, 26)), ('through', (27, 28)), ('to', (30, 31)), ('greater than', (32, 34))]","[('all tasks', (1, 3)), ('SAM', (4, 5)), ('advance', (8, 9)), ('further', (9, 10)), ('other models', (12, 14)), ('associative recall task', (18, 21)), ('SAM', (22, 23)), ('curriculum', (29, 30)), ('sequences', (31, 32))]",[],[],[],[]
experiments,Question answering on the Babi tasks,[],"[('Question answering on the Babi tasks', (0, 6))]",[],[],[],[]
results,"The MANNs , except the NTM , are able to learn solutions comparable to the previous best results , failing at only 2 of the tasks .","[('except', (3, 4)), ('able to learn', (8, 11)), ('comparable to', (12, 14)), ('failing at', (19, 21))]","[('MANNs', (1, 2)), ('NTM', (5, 6)), ('solutions', (11, 12)), ('previous best results', (15, 18))]",[],[],[],[]
results,"The SDNC manages to solve all but 1 of the tasks , the best reported result on Babi that we are aware of .","[('manages to solve', (2, 5))]","[('SDNC', (1, 2)), ('all but 1 of the tasks', (5, 11))]",[],[],[],[]
results,We believe the NTM may perform poorly since it lacks a mechanism which allows it to allocate memory effectively .,"[('believe', (1, 2)), ('perform', (5, 6))]","[('NTM', (3, 4)), ('poorly', (6, 7))]",[],[],[],[]
experiments,Learning on real world data,[],"[('Learning on real world data', (0, 5))]",[],[],[],[]
results,"SAM outperformed other models , presumably due to its much larger memory capacity .","[('outperformed', (1, 2))]","[('SAM', (0, 1)), ('other models', (2, 4))]",[],[],[],[]
results,All of the MANNs were able to perform much better than chance with ?,"[('able to perform', (5, 8)), ('than', (10, 11))]","[('MANNs', (3, 4)), ('much better', (8, 10)), ('chance', (11, 12))]",[],[],[],[]
research-problem,MemoReader : Large - Scale Reading Comprehension through Neural Memory Controller,[],"[('Large - Scale Reading Comprehension', (2, 7))]",[],[],[],[]
research-problem,Machine reading comprehension helps machines learn to utilize most of the human knowledge written in the form of text .,[],"[('Machine reading comprehension', (0, 3))]",[],[],[],[]
research-problem,"In this paper , we propose a novel deep neural network architecture to handle a long - range dependency in RC tasks .","[('propose', (5, 6)), ('to handle', (12, 14)), ('in', (19, 20))]","[('novel deep neural network architecture', (7, 12)), ('long - range dependency', (15, 19)), ('RC tasks', (20, 22))]",[],[],[],[]
research-problem,Reading comprehension ( RC ) to understand this knowledge is a major challenge that can vastly increase the range of knowledge available to the machines .,[],"[('Reading comprehension ( RC )', (0, 5))]",[],[],[],[]
model,"To overcome this issue , we propose two novel strategies that improve the memory - handling capability while mitigating the information distortion .","[('propose', (6, 7)), ('that improve', (10, 12)), ('while mitigating', (17, 19))]","[('two novel strategies', (7, 10)), ('memory - handling capability', (13, 17)), ('information distortion', (20, 22))]",[],[],[],[]
model,We extend the memory controller with a residual connection to alleviate the information distortion occurring in it .,"[('extend', (1, 2)), ('with', (5, 6)), ('to alleviate', (9, 11))]","[('memory controller', (3, 5)), ('residual connection', (7, 9)), ('information distortion', (12, 14))]",[],[],[],[]
model,We also expand the gated recurrent unit ( GRU ) with a dense connection that conveys enriched features to the next layer containing the original as well as the transformed information .,"[('expand', (2, 3)), ('with', (10, 11)), ('conveys', (15, 16)), ('to', (18, 19)), ('containing', (22, 23))]","[('gated recurrent unit ( GRU )', (4, 10)), ('dense connection', (12, 14)), ('enriched features', (16, 18)), ('next layer', (20, 22)), ('original as well as the transformed information', (24, 31))]",[],[],[],[]
experimental-setup,Implementation details . to build the model and Sonnet 2 to implement the memory interface .,"[('to build', (3, 5)), ('to implement', (10, 12))]","[('model', (6, 7)), ('Sonnet', (8, 9)), ('memory interface', (13, 15))]",[],[],[],[]
experimental-setup,NLTK is used for tokenizing words .,"[('used for', (2, 4))]","[('NLTK', (0, 1)), ('tokenizing', (4, 5)), ('tokenizing words', (4, 6))]",[],[],[],[]
experimental-setup,"In the memory controller , we use four read heads and one write head , and the memory size is set to 100 36 , with all initialized as 0 .","[('In', (0, 1)), ('use', (6, 7)), ('set to', (20, 22)), ('initialized as', (27, 29))]","[('memory controller', (2, 4)), ('four read heads', (7, 10)), ('one write head', (11, 14)), ('memory size', (17, 19)), ('100 36', (22, 24)), ('0', (29, 30))]",[],[],[],[]
experimental-setup,The hidden vector dimension l is set to 200 .,"[('set to', (6, 8))]","[('hidden vector dimension l', (1, 5)), ('200', (8, 9))]",[],[],[],[]
experimental-setup,"We use AdaDelta ( Zeiler , 2012 ) as an optimizer with a learning rate of 0.5 .","[('use', (1, 2)), ('as', (8, 9)), ('with', (11, 12)), ('of', (15, 16))]","[('AdaDelta ( Zeiler , 2012 )', (2, 8)), ('optimizer', (10, 11)), ('learning rate', (13, 15)), ('0.5', (16, 17))]",[],[],[],[]
experimental-setup,The batch size is set to 20 for TriviaQA and 30 for SQuAD and QUASAR - T .,"[('set to', (4, 6)), ('for', (7, 8)), ('for', (11, 12))]","[('batch size', (1, 3)), ('20', (6, 7)), ('TriviaQA', (8, 9)), ('30', (10, 11)), ('SQuAD and QUASAR - T', (12, 17))]",[],[],[],[]
experimental-setup,We use an exponential moving average of weights with a decaying factor of 0.001 .,"[('use', (1, 2)), ('of', (6, 7)), ('with', (8, 9)), ('of', (12, 13))]","[('exponential moving average', (3, 6)), ('weights', (7, 8)), ('decaying factor', (10, 12)), ('0.001', (13, 14))]",[],[],[],[]
experiments,"Our model does require more memory than existing methods , but a single GPU ( e.g. , M40 with 12 GB memory ) was enough to train model within a reasonable amount of time .","[('require', (3, 4)), ('than', (6, 7)), ('within', (28, 29))]","[('more memory', (4, 6)), ('existing methods', (7, 9)), ('single GPU', (12, 14))]",[],[],[],[]
results,"Overall , in lengthy - document cases such as Trivi aQA and QUASAR - T , our model outperforms all the published results , as seen in Tables 2 and 3 , while in the short - document case such as SQuAD , we mostly achieve the best results , as seen in .","[('in', (2, 3)), ('such as', (7, 9)), ('outperforms', (18, 19)), ('in', (33, 34)), ('such as', (39, 41))]","[('lengthy - document cases', (3, 7)), ('our model', (16, 18)), ('all the published results', (19, 23)), ('short - document case', (35, 39)), ('SQuAD', (41, 42)), ('best results', (47, 49))]",[],[],[],[]
ablation-analysis,We assume that the concatenation of the layer outputs in DEBS helps the memory controller store contextual representations clearly .,"[('assume', (1, 2)), ('of', (5, 6)), ('in', (9, 10)), ('helps', (11, 12)), ('store', (15, 16))]","[('concatenation', (4, 5)), ('layer outputs', (7, 9)), ('DEBS', (10, 11)), ('memory controller', (13, 15)), ('contextual representations', (16, 18))]",[],[],[],[]
results,"As can be seen in , using DEBS in all the places improves the performance most , and furthermore , the memory controller with DEBS gives the largest performance margin .","[('using', (6, 7)), ('in', (8, 9)), ('improves', (12, 13)), ('with', (23, 24)), ('gives', (25, 26))]","[('DEBS', (7, 8)), ('all the places', (9, 12)), ('performance most', (14, 16)), ('memory controller', (21, 23)), ('DEBS', (24, 25)), ('largest performance margin', (27, 30))]",[],[],[],[]
research-problem,Sentence Similarity Learning by Lexical Decomposition and Composition,[],"[('Sentence Similarity Learning', (0, 3))]",[],[],[],[]
research-problem,"Most conventional sentence similarity methods only focus on similar parts of two input sentences , and simply ignore the dissimilar parts , which usually give us some clues and semantic meanings about the sentences .",[],"[('sentence similarity', (2, 4))]",[],[],[],[]
model,"In this paper , we propose a novel model to tackle all these challenges jointly by decomposing and composing lexical semantics over sentences .","[('propose', (5, 6)), ('over', (21, 22))]","[('novel model', (7, 9)), ('lexical semantics', (19, 21)), ('sentences', (22, 23))]",[],[],[],[]
model,"Given a sentence pair , the model represents each word as a low -dimensional vector ( challenge 1 ) , and calculates a semantic matching vector for each word based on all words in the other sentence ( challenge 2 ) .","[('Given', (0, 1)), ('represents', (7, 8)), ('as', (10, 11)), ('calculates', (21, 22)), ('for', (26, 27)), ('based on', (29, 31)), ('in', (33, 34))]","[('sentence pair', (2, 4)), ('each word', (8, 10)), ('low -dimensional vector', (12, 15)), ('semantic matching vector', (23, 26)), ('each word', (27, 29)), ('all words', (31, 33)), ('other sentence', (35, 37))]",[],[],[],[]
model,"Then based on the semantic matching vector , each word vector is decomposed into two components : a similar component and a dissimilar component ( challenge 3 ) .","[('based on', (1, 3)), ('decomposed into', (12, 14))]","[('semantic matching vector', (4, 7)), ('each word vector', (8, 11)), ('two components', (14, 16)), ('similar component', (18, 20)), ('dissimilar component', (22, 24))]",[],[],[],[]
model,"We use similar components of all the words to represent the similar parts of the sentence pair , and dissimilar components of every word to model the dissimilar parts explicitly .","[('use', (1, 2)), ('of', (4, 5)), ('to represent', (8, 10)), ('of', (13, 14)), ('of', (21, 22)), ('to model', (24, 26))]","[('similar components', (2, 4)), ('all the words', (5, 8)), ('similar parts', (11, 13)), ('sentence pair', (15, 17)), ('dissimilar components', (19, 21)), ('every word', (22, 24)), ('dissimilar parts', (27, 29))]",[],[],[],[]
model,"After this , a two - channel CNN operation is performed to compose the similar and dissimilar components into a feature vector ( challenge 2 and 3 ) .","[('performed', (10, 11)), ('to compose', (11, 13)), ('into', (18, 19))]","[('two - channel CNN operation', (4, 9)), ('similar and dissimilar components', (14, 18)), ('feature vector', (20, 22))]",[],[],[],[]
model,"Finally , the composed feature vector is utilized to predict the sentence similarity .","[('to predict', (8, 10))]","[('composed feature vector', (3, 6)), ('sentence similarity', (11, 13))]",[],[],[],[]
results,QASent dataset .,[],"[('QASent dataset', (0, 2))]",[],[],[],[]
results,"After adding some word overlap features between the two sentences , the performance was improved significantly ( the third row of ) .","[('adding', (1, 2)), ('between', (6, 7))]","[('some word overlap features', (2, 6)), ('two sentences', (8, 10)), ('performance', (12, 13)), ('improved significantly', (14, 16))]",[],[],[],[]
results,"We can see that our model ( the last row of ) got the best MAP among all previous work , and a comparable MRR than dos .","[('see that', (2, 4)), ('got', (12, 13)), ('among', (16, 17)), ('than', (25, 26))]","[('our model', (4, 6)), ('best MAP', (14, 16)), ('all previous work', (17, 20)), ('comparable MRR', (23, 25)), ('dos', (26, 27))]",[],[],[],[]
results,Wiki QA dataset .,[],"[('Wiki QA dataset', (0, 3))]",[],[],[],[]
results,The best performance ( shown at the second row of ) was acquired by a bigram CNN model combining with the word overlap features .,"[('acquired by', (12, 14)), ('combining with', (18, 20))]","[('best performance', (1, 3)), ('bigram CNN model', (15, 18)), ('word overlap features', (21, 24))]",[],[],[],[]
results,MSRP dataset .,[],"[('MSRP dataset', (0, 2))]",[],[],[],[]
results,"Comparing to these neural network based models , our model obtained a comparable performance ( the last row of ) without using any sparse features , extra annotated resources and specific training strategies .","[('obtained', (10, 11)), ('without using', (20, 22))]","[('our model', (8, 10)), ('comparable performance', (12, 14)), ('sparse features', (23, 25)), ('extra annotated resources', (26, 29)), ('specific training strategies', (30, 33))]",[],[],[],[]
research-problem,Dynamic Self - Attention : Computing Attention over Words Dynamically for Sentence Embedding,[],"[('Sentence Embedding', (11, 13))]",[],[],[],[]
research-problem,"In this paper , we propose Dynamic Self - Attention ( DSA ) , a new self - attention mechanism for sentence embedding .","[('propose', (5, 6)), ('for', (20, 21))]","[('Dynamic Self - Attention ( DSA )', (6, 13)), ('new self - attention mechanism', (15, 20)), ('sentence embedding', (21, 23))]",[],[],[],[]
research-problem,"We design DSA by modifying dynamic routing in capsule network ( Sabour et al. , 2017 ) for natural language processing .","[('design', (1, 2)), ('by modifying', (3, 5)), ('in', (7, 8)), ('for', (17, 18))]","[('DSA', (2, 3)), ('dynamic routing', (5, 7)), ('capsule network', (8, 10))]",[],[],[],[]
model,"Motivated by dynamic routing ) , we propose a new self - attention mechanism for sentence embedding , namely Dynamic Self - Attention ( DSA ) .","[('propose', (7, 8)), ('for', (14, 15)), ('namely', (18, 19))]","[('new self - attention mechanism', (9, 14)), ('sentence embedding', (15, 17)), ('Dynamic Self - Attention ( DSA )', (19, 26))]",[],[],[],[]
model,"To this end , we modify dynamic routing such that it functions as self - attention with the dynamic weight vector .","[('modify', (5, 6)), ('such', (8, 9)), ('functions as', (11, 13)), ('with', (16, 17))]","[('dynamic routing', (6, 8)), ('self - attention', (13, 16)), ('dynamic weight vector', (18, 21))]",[],[],[],[]
experiments,"DSA , which is stacked on CNN with Dense Connection , achieves new state - of - the - art results among the sentence encoding methods in Stanford Natural Language Inference ( SNLI ) dataset with the least number of parameters , while obtaining comparative results in Stanford Sentiment Treebank ( SST ) dataset .","[('stacked on', (4, 6)), ('with', (7, 8)), ('achieves', (11, 12)), ('among', (21, 22)), ('in', (26, 27)), ('with', (35, 36)), ('obtaining', (43, 44)), ('in', (46, 47))]","[('DSA', (0, 1)), ('CNN', (6, 7)), ('new state - of - the - art results', (12, 21)), ('sentence encoding methods', (23, 26)), ('Stanford Natural Language Inference ( SNLI ) dataset', (27, 35)), ('least number of parameters', (37, 41)), ('comparative results', (44, 46)), ('Stanford Sentiment Treebank ( SST ) dataset', (47, 54))]",[],[],[],[]
experiments,It also outperforms recent models in terms of time efficiency due to its simplicity and highly parallelized computations .,"[('outperforms', (2, 3)), ('in terms of', (5, 8)), ('due to', (10, 12))]","[('recent models', (3, 5)), ('time efficiency', (8, 10))]",[],[],[],[]
experiments,Natural Language Inference Results,[],"[('Natural Language Inference Results', (0, 4))]",[],[],[],[]
experiments,"Entailment , Contradiction and Neutral .",[],"[('Entailment', (0, 1))]",[],[],[],[]
experiments,"As the task considers the semantic relationship , SNLI is used as a benchmark for evaluating the performance of a sentence encoder .","[('for evaluating', (14, 16))]","[('SNLI', (8, 9)), ('benchmark', (13, 14)), ('performance', (17, 18)), ('sentence encoder', (20, 22))]",[],[],[],[]
results,"With tradeoffs in terms of parameters and learning time per epoch , multiple DSA outperforms other models by a large margin ( + 1.1 % ) .","[('With', (0, 1)), ('in terms of', (2, 5)), ('outperforms', (14, 15)), ('by', (17, 18))]","[('tradeoffs', (1, 2)), ('multiple DSA', (12, 14)), ('other models', (15, 17)), ('large margin ( + 1.1 % )', (19, 26))]",[],[],[],[]
results,"In comparison to the baseline , single DSA shows better performance than self - attention ( + 2.2 % ) .","[('In comparison to', (0, 3)), ('shows', (8, 9)), ('than', (11, 12))]","[('baseline', (4, 5)), ('single DSA', (6, 8)), ('better performance', (9, 11)), ('self - attention ( + 2.2 % )', (12, 20))]",[],[],[],[]
results,"Note that our implementation of the baseline , selfattention stacked on CNN with Dense Connection , shows better performance ( + 0.4 % ) than the one stacked on BiLSTM .","[('of', (4, 5)), ('stacked on', (9, 11)), ('shows', (16, 17)), ('than', (24, 25)), ('stacked on', (27, 29))]","[('our implementation', (2, 4)), ('baseline', (6, 7)), ('selfattention', (8, 9)), ('CNN with Dense Connection', (11, 15)), ('better performance ( + 0.4 % )', (17, 24)), ('BiLSTM', (29, 30))]",[],[],[],[]
results,Sentiment Analysis Results,[],"[('Sentiment Analysis Results', (0, 3))]",[],[],[],[]
results,"Single DSA outperforms all the baseline models in SST - 2 dataset , and achieves comparative results in SST - 5 , which again verifies the effectiveness of the dynamic weight vector .","[('outperforms', (2, 3)), ('in', (7, 8)), ('achieves', (14, 15)), ('in', (17, 18))]","[('Single DSA', (0, 2)), ('all the baseline models', (3, 7)), ('SST - 2 dataset', (8, 12)), ('comparative results', (15, 17)), ('SST - 5', (18, 21))]",[],[],[],[]
results,"In contrast to the distinguished results in SNLI dataset ( + 2.2 % ) , in SST dataset , only marginal differences in the performance between DSA and the previous self - attentive models are found .","[('in', (6, 7)), ('in', (15, 16)), ('in', (22, 23)), ('between', (25, 26))]","[('SST dataset', (16, 18)), ('marginal differences', (20, 22)), ('performance', (24, 25)), ('DSA and the previous self - attentive models', (26, 34)), ('found', (35, 36))]",[],[],[],[]
research-problem,"Machine reading systems can be tested on their ability to answer questions posed on the contents of documents that they have seen , but until now large scale training and test datasets have been missing for this type of evaluation .",[],"[('Machine reading', (0, 2))]",[],[],[],[]
research-problem,"Traditional approaches to machine reading and comprehension have been based on either hand engineered grammars , or information extraction methods of detecting predicate argument triples that can later be queried as a relational database .",[],"[('machine reading and comprehension', (3, 7))]",[],[],[],[]
approach,In this work we seek to directly address the lack of real natural language training data by introducing a novel approach to building a supervised reading comprehension data set .,"[('introducing', (17, 18)), ('to building', (21, 23))]","[('novel approach', (19, 21)), ('supervised reading comprehension data set', (24, 29))]",[],[],[],[]
approach,"We observe that summary and paraphrase sentences , with their associated documents , can be readily converted to context - query - answer triples using simple entity detection and anonymisation algorithms .","[('observe', (1, 2)), ('readily converted to', (15, 18)), ('using', (24, 25))]","[('summary and paraphrase sentences', (3, 7)), ('context - query - answer triples', (18, 24)), ('simple entity detection and anonymisation algorithms', (25, 31))]",[],[],[],[]
approach,Using this approach we have collected two new corpora of roughly a million news stories with associated queries from the CNN and Daily Mail websites .,"[('collected', (5, 6)), ('of', (9, 10)), ('with', (15, 16)), ('from', (18, 19))]","[('two new corpora', (6, 9)), ('roughly a million news stories', (10, 15)), ('associated queries', (16, 18)), ('CNN and Daily Mail websites', (20, 25))]",[],[],[],[]
approach,We demonstrate the efficacy of our new corpora by building novel deep learning models for reading comprehension .,"[('demonstrate', (1, 2)), ('of', (4, 5)), ('by building', (8, 10)), ('for', (14, 15))]","[('efficacy', (3, 4)), ('novel deep learning models', (10, 14)), ('reading comprehension', (15, 17))]",[],[],[],[]
results,We expect that the attention - based models would therefore outperform the pure LSTM - based approaches .,"[('expect', (1, 2)), ('outperform', (10, 11))]","[('attention - based models', (4, 8)), ('pure LSTM - based approaches', (12, 17))]",[],[],[],[]
results,Word distance benchmark,[],"[('Word distance benchmark', (0, 3))]",[],[],[],[]
results,"More surprising perhaps is the relatively strong performance of the word distance benchmark , particularly relative to the frame - semantic benchmark , which we had expected to perform better .","[('of', (8, 9)), ('relative to', (15, 17))]","[('relatively strong performance', (5, 8)), ('word distance benchmark', (10, 13)), ('frame - semantic benchmark', (18, 22))]",[],[],[],[]
experiments,Neural models,[],"[('Neural models', (0, 2))]",[],[],[],[]
experiments,"Within the group of neural models explored here , the results paint a clear picture with the Impatient and the Attentive Readers outperforming all other models .","[('Within', (0, 1)), ('paint', (11, 12)), ('with', (15, 16)), ('outperforming', (22, 23))]","[('clear picture', (13, 15)), ('Impatient and the Attentive Readers', (17, 22)), ('all other models', (23, 26))]",[],[],[],[]
baselines,The Deep LSTM,[],"[('Deep LSTM', (1, 3))]",[],[],[],[]
results,"Reader performs surprisingly well , once again demonstrating that this simple sequential architecture can do a reasonable job of learning to abstract long sequences , even when they are up to two thousand tokens in length .","[('performs', (1, 2))]","[('Reader', (0, 1)), ('surprisingly well', (2, 4))]",[],[],[],[]
research-problem,Learning Natural Language Inference using Bidirectional LSTM model and Inner- Attention,[],"[('Natural Language Inference', (1, 4))]",[],[],[],[]
research-problem,"In this paper , we proposed a sentence encoding - based model for recognizing text entailment .","[('proposed', (5, 6)), ('for recognizing', (12, 14))]","[('sentence encoding - based model', (7, 12)), ('text entailment', (14, 16))]",[],[],[],[]
research-problem,"Given a pair of sentences , the goal of recognizing text entailment ( RTE ) is to determine whether the hypothesis can reasonably be inferred from the premises .",[],"[('recognizing text entailment ( RTE )', (9, 15))]",[],[],[],[]
model,"There were three types of relation in RTE , Entailment ( inferred to be true ) , Contradiction ( inferred to be false ) and Neutral ( truth unknown ) .","[('in', (6, 7))]","[('three types of relation', (2, 6)), ('RTE', (7, 8)), ('Entailment', (9, 10)), ('inferred to be true', (11, 15)), ('Contradiction', (17, 18)), ('inferred to be false', (19, 23)), ('Neutral', (25, 26))]",[],[],[],[]
model,"In this paper , we proposed a unified deep learning framework for recognizing textual entailment which dose not require any feature engineering , or external resources .","[('proposed', (5, 6)), ('for recognizing', (11, 13))]","[('unified deep learning framework', (7, 11)), ('textual entailment', (13, 15))]",[],[],[],[]
model,The basic model is based on building biL - STM models on both premises and hypothesis .,"[('based on', (4, 6)), ('on', (11, 12))]","[('basic model', (1, 3)), ('building', (6, 7)), ('biL - STM models', (7, 11)), ('premises and hypothesis', (13, 16))]",[],[],[],[]
model,The basic mean pooling encoder can roughly form a intuition about what this sentence is talking about .,"[('roughly form', (6, 8)), ('about', (10, 11))]","[('basic mean pooling encoder', (1, 5)), ('intuition', (9, 10))]",[],[],[],[]
model,"In addition , we introduced a simple effective input strategy that get ride of same words in hypothesis and premise , which further boosts our performance .","[('introduced', (4, 5)), ('that', (10, 11)), ('get ride of', (11, 14)), ('in', (16, 17))]","[('simple effective input strategy', (6, 10)), ('same words', (14, 16)), ('hypothesis and premise', (17, 20))]",[],[],[],[]
hyperparameters,"The training objective of our model is cross - entropy loss , and we use minibatch SGD with the Rmsprop ( Tieleman and Hinton , 2012 ) for optimization .","[('of', (3, 4)), ('is', (6, 7)), ('use', (14, 15)), ('with', (17, 18)), ('for', (27, 28))]","[('training objective', (1, 3)), ('cross - entropy loss', (7, 11)), ('minibatch SGD', (15, 17)), ('Rmsprop ( Tieleman and Hinton , 2012 )', (19, 27)), ('optimization', (28, 29))]",[],[],[],[]
hyperparameters,The batch size is 128 .,"[('is', (3, 4))]","[('batch size', (1, 3)), ('128', (4, 5))]",[],[],[],[]
hyperparameters,A dropout layer was applied in the output of the network with the dropout rate set to 0.25 .,"[('applied in', (4, 6)), ('of', (8, 9)), ('with', (11, 12)), ('set to', (15, 17))]","[('dropout layer', (1, 3)), ('output', (7, 8)), ('network', (10, 11)), ('dropout rate', (13, 15)), ('0.25', (17, 18))]",[],[],[],[]
hyperparameters,"In our model , we used pretrained 300D Glove 840B vectors to initialize the word embedding .","[('used', (5, 6)), ('to initialize', (11, 13))]","[('pretrained 300D Glove 840B vectors', (6, 11)), ('word embedding', (14, 16))]",[],[],[],[]
hyperparameters,"Out - of - vocabulary words in the training set are randomly initialized by sampling values uniformly from ( 0.05 , 0.05 ) .","[('in', (6, 7)), ('are', (10, 11)), ('by', (13, 14)), ('uniformly from', (16, 18))]","[('Out - of - vocabulary words', (0, 6)), ('training set', (8, 10)), ('randomly initialized', (11, 13)), ('sampling values', (14, 16)), ('values', (15, 16)), ('( 0.05 , 0.05 )', (18, 23))]",[],[],[],[]
results,"We observed that more attention was given to Nones , Verbs and Adjectives .","[('observed', (1, 2)), ('given to', (6, 8))]","[('more attention', (3, 5)), ('Nones , Verbs and Adjectives', (8, 13))]",[],[],[],[]
baselines,"While mean pooling regarded each word of equal importance , the attention mechanism helps re-weight words according to their importance .","[('regarded', (3, 4)), ('of', (6, 7)), ('helps', (13, 14)), ('re-weight', (14, 15)), ('according to', (16, 18))]","[('mean pooling', (1, 3)), ('each word', (4, 6)), ('equal importance', (7, 9)), ('attention mechanism', (11, 13)), ('words', (15, 16)), ('importance', (19, 20))]",[],[],[],[]
research-problem,A BERT Baseline for the Natural Questions,[],"[('BERT Baseline', (1, 3)), ('Natural Questions', (5, 7))]",[],[],[],[]
model,In this technical note we describe a BERT - based model for the Natural Questions .,"[('describe', (5, 6)), ('for', (11, 12))]","[('BERT - based model', (7, 11)), ('Natural Questions', (13, 15))]",[],[],[],[]
model,"The key insights in our approach are 1 . to jointly predict short and long answers in a single model rather than using a pipeline approach , 2 . to split each document into multiple training instances by using overlapping windows of tokens , like in the original BERT model for the SQuAD task , 3 . to aggressively downsample null instances ( i.e. instances without an answer ) at training time to create a balanced training set , 4 . to use the "" [ CLS ] "" token at training time to predict null instances and rank spans at inference time by the difference between the span score and the "" [ CLS ] "" score .","[('jointly predict', (10, 12)), ('in', (16, 17)), ('into', (33, 34)), ('by using', (37, 39)), ('aggressively downsample', (58, 60)), ('at', (69, 70)), ('to create', (72, 74)), ('at', (90, 91)), ('to predict', (93, 95))]","[('short and long answers', (12, 16)), ('single model', (18, 20)), ('pipeline approach', (24, 26)), ('each document', (31, 33)), ('multiple training instances', (34, 37)), ('overlapping windows of tokens', (39, 43)), ('null instances', (60, 62)), ('training time', (70, 72)), ('balanced training set', (75, 78)), ('"" [ CLS ] "" token', (84, 90)), ('training time', (91, 93)), ('null instances', (95, 97)), ('rank', (98, 99)), ('spans', (99, 100)), ('at', (100, 101)), ('inference time', (101, 103)), ('by', (103, 104)), ('difference', (105, 106)), ('span score', (108, 110))]",[],[],[],[]
experimental-setup,We initialized our model from a BERT model already finetuned on SQ u AD 1.1 .,"[('initialized', (1, 2)), ('from', (4, 5)), ('finetuned on', (9, 11))]","[('our model', (2, 4)), ('BERT model', (6, 8)), ('SQ u AD 1.1', (11, 15))]",[],[],[],[]
experimental-setup,"We trained the model by minimizing loss L from Section 3 with the Adam optimizer ( Kingma and Ba , 2014 ) with a batch size of 8 .","[('trained', (1, 2)), ('by minimizing', (4, 6)), ('with', (11, 12)), ('with', (22, 23)), ('of', (26, 27))]","[('model', (3, 4)), ('loss L', (6, 8)), ('Adam optimizer', (13, 15)), ('batch size', (24, 26)), ('8', (27, 28))]",[],[],[],[]
experimental-setup,"As is common practice for BERT models , we only tuned the number of epochs and the initial learning rate for finetuning and found that training for 1 epoch with an initial learning rate of 3 10 ? 5 was the best setting .","[('tuned', (10, 11)), ('for', (20, 21)), ('training for', (25, 27)), ('with', (29, 30)), ('of', (34, 35)), ('was', (39, 40))]","[('number of epochs', (12, 15)), ('initial learning rate', (17, 20)), ('finetuning', (21, 22)), ('1 epoch', (27, 29)), ('initial learning rate', (31, 34)), ('3 10 ? 5', (35, 39)), ('best setting', (41, 43))]",[],[],[],[]
experimental-setup,Evaluation completed in about 5 hours on the NQ dev and test set with a single Tesla P100 GPU .,"[('on', (6, 7)), ('with', (13, 14))]","[('Evaluation', (0, 1)), ('NQ dev and test set', (8, 13)), ('single Tesla P100 GPU', (15, 19))]",[],[],[],[]
results,Our BERT model for NQ performs dramatically better than the models presented in the original NQ paper .,"[('for', (3, 4)), ('performs', (5, 6)), ('than', (8, 9))]","[('BERT model', (1, 3)), ('NQ', (4, 5)), ('dramatically better', (6, 8)), ('models', (10, 11))]",[],[],[],[]
results,Our model closes the gap between the F 1 score achieved by the original baseline systems and the super - annotator upper bound by 30 % for the long answer NQ task and by 50 % for the short answer NQ task .,"[('closes', (2, 3)), ('between', (5, 6)), ('achieved by', (10, 12)), ('by', (23, 24)), ('for', (26, 27)), ('by', (33, 34)), ('for', (36, 37))]","[('Our model', (0, 2)), ('gap', (4, 5)), ('F 1 score', (7, 10)), ('original baseline systems', (13, 16)), ('super - annotator upper bound', (18, 23)), ('30 %', (24, 26)), ('long answer NQ task', (28, 32)), ('50 %', (34, 36)), ('short answer NQ task', (38, 42))]",[],[],[],[]
